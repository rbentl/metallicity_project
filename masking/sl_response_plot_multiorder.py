import numpy as npimport pandas as pdimport pylab as pltimport matplotlibimport mathfrom astropy import units as ufrom astropy.modeling import models,fittingfrom astropy.modeling import Modelfrom astropy.io import asciifrom astroquery.vizier import Vizierimport starkitfrom starkit.fitkit.likelihoods import SpectralChi2Likelihood as Chi2Likelihood, SpectralL1Likelihoodfrom starkit.gridkit import load_gridfrom starkit.fitkit.multinest.base import MultiNest, MultiNestResultfrom starkit import assemble_model, operationsfrom starkit.fitkit import priorsfrom starkit.base.operations.spectrograph import (Interpolate, Normalize,                                                  NormalizeParts,InstrumentConvolveGrating)from starkit.base.operations.stellar import (RotationalBroadening, DopplerShift)from starkit.fix_spectrum1d import SKSpectrum1Dfrom specutils import read_fits_file,plotlinesimport numpy as npimport os,scipyfrom specutils import Spectrum1D,rvmeasureimport datetime,globimport model_tester_updated as mtfrom matplotlib.backends.backend_pdf import PdfPagesimport operatorimport sysfrom matplotlib.pyplot import cmimport multi_order_fitting_functions as mtffrom scipy.stats.stats import pearsonr, chisquarefrom scipy.optimize import curve_fitfrom scipy import ndimage as ndimport scipy.stats as statsclass Splitter3(Model):    # split a single spectrum into 3    inputs = ('w', 'f')    outputs = ('w', 'f', 'w', 'f', 'w', 'f')    def evaluate(self, w, f):        return w, f, w, f, w, fclass Combiner3(Model):    # combines the likelihood for four spectra    inputs = ('l1', 'l2', 'l3')    outputs = ('ltot',)    def evaluate(self, l1, l2, l3):        return l1 + l2 + l3class Splitter4(Model):    # split a single spectrum into 4    inputs = ('w', 'f')    outputs = ('w', 'f', 'w', 'f', 'w', 'f', 'w', 'f')    def evaluate(self, w, f):        return w, f, w, f, w, f, w, fclass Combiner4(Model):    # combines the likelihood for four spectra    inputs = ('l1', 'l2', 'l3', 'l4')    outputs = ('ltot',)    def evaluate(self, l1, l2, l3, l4):        return l1 + l2 + l3 + l4def getKey(item):    return item[0]def load_full_grid_phoenix():    g = load_grid('/u/ghezgroup/data/metallicity/nirspec/grids/phoenix_t2500_6000_w20000_24000_R40000.h5')    return gdef load_full_grid_bosz():    g = load_grid('/u/ghezgroup/data/metallicity/nirspec/grids/bosz_t3500_7000_w20000_24000_R50000.h5')    return gdef sl_response_plot_three(starname,g,specdir='/group/data/nirspec/spectra/',snr=30.,nnorm=2):    file1 = glob.glob(specdir+starname+'_order34*.dat')    file2 = glob.glob(specdir+starname+'_order35*.dat')    file3 = glob.glob(specdir+starname+'_order36*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1,desired_wavelength_units='Angstrom',wave_range=[2.245, 2.275])    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value))+1.0/np.float(snr))*starspectrum34.flux.unit        starspectrum35 = read_fits_file.read_nirspec_dat(file2,desired_wavelength_units='Angstrom',wave_range=[2.181, 2.2103])    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value))+1.0/np.float(snr))*starspectrum35.flux.unit    starspectrum36 = read_fits_file.read_nirspec_dat(file3,desired_wavelength_units='Angstrom',wave_range=[2.1168, 2.145])    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value))+1.0/np.float(snr))*starspectrum36.flux.unit        interp1 = Interpolate(starspectrum34)    convolve1 = InstrumentConvolveGrating.from_grid(g,R=24000)    rot1 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm1 = Normalize(starspectrum34,nnorm)    interp2 = Interpolate(starspectrum35)    convolve2 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot2 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm2 = Normalize(starspectrum35,nnorm)    interp3 = Interpolate(starspectrum36)    convolve3 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm3 = Normalize(starspectrum36,nnorm)    model = g | rot1 | Splitter3() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \         convolve1 & convolve2 & convolve3 | interp1 & interp2 & interp3 | \         norm1 & norm2 & norm3    h5_files_us = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/mh_masked*_bosz.h5')    cut_lis = []    for filename in h5_files_us:        print filename.split('_')        cut_lis += [(float(filename.split('_')[6]),filename)]    cut_lis = sorted(cut_lis,key = getKey)    h5_files = [i[1] for i in cut_lis]    sl_val = []    print h5_files    for filename in h5_files:        print filename.split('_')[6]        gc_result = MultiNestResult.from_hdf5(filename)        print gc_result        sl_mh1,sl_mh2,sl_mh3 = mtf.s_lambda_three_order(model,'mh',model.mh_0.value,0.1)        w1,f1,w2,f2,w3,f3 = model()        #combine all sl_mh,w,f, lists        sl_mh = np.concatenate((sl_mh1,sl_mh2,sl_mh3))        w = np.concatenate((w1,w2,w3))        f = np.concatenate((f1,f2,f3))        starfluxall = np.concatenate((starspectrum34.flux.value,starspectrum35.flux.value,starspectrum36.flux.value))        starwaveall = np.concatenate((starspectrum34.wavelength.value,starspectrum35.wavelength.value,starspectrum36.wavelength.value))        sigma_bounds = gc_result.calculate_sigmas(1)        sigmas = []        for a in sigma_bounds.keys():            print a            sigmas += [(sigma_bounds[a][1]-sigma_bounds[a][0])/2.]        print sigmas        abs_sl_mh = []                mask_sl_f = []        mask_sl_w = []            data_sl_f = []        for i in range(len(sl_mh)):            abs_sl_mh += [np.abs(sl_mh[i])]            if abs(sl_mh[i]) < float(filename.split('_')[6]):                mask_sl_f += [starfluxall[i]]                mask_sl_w += [starwaveall[i]]            else:                data_sl_f += [starfluxall[i]]        print sigmas        sl_val += [(float(filename.split('_')[6]),len(mask_sl_f),gc_result.median['vrad_3'],gc_result.median['vrad_4'],gc_result.median['vrad_5'],gc_result.median['logg_0'],gc_result.median['mh_0'],gc_result.median['alpha_0'],gc_result.median['teff_0'],sigmas)]    print len(starfluxall)    return sl_valdef plot_sl_response(sl_val,starname, plot_ref_vals=False,log_scale=False, invert_xaxes=False):    f= plt.figure(figsize=(12,11))    rvax  = f.add_subplot(6,1,1)    loggax  = f.add_subplot(6,1,2)    mhax  = f.add_subplot(6,1,3)    alphaax = f.add_subplot(6,1,4)    teffax = f.add_subplot(6,1,5)    lenax = f.add_subplot(6,1,6)        sl_val = sorted(sl_val)    #ax = plt.subplot()    print [i[1] for i in sl_val]    print [i[0] for i in sl_val]    print len(sl_val)        rvax.errorbar([i[0] for i in sl_val],[i[2] for i in sl_val],[i[10][5] for i in sl_val], color='red',fmt='o',linestyle='--',capsize=5,label='Order 34')    rvax.errorbar([i[0] for i in sl_val],[i[3] for i in sl_val],[i[10][6] for i in sl_val], color='green',fmt='o',linestyle='--',capsize=5,label='Order 35')    rvax.errorbar([i[0] for i in sl_val],[i[4] for i in sl_val],[i[10][7] for i in sl_val], color='blue',fmt='o',linestyle='--',capsize=5,label='Order 36')    rvax.errorbar([i[0] for i in sl_val],[i[5] for i in sl_val],[i[10][8] for i in sl_val], fmt='o',linestyle='--',capsize=5,label='Order 37')    rvax.set_ylabel('Radial Velocity (km/s)')    rvax.set_title(starname+' masked fit responses')    loggax.errorbar([i[0] for i in sl_val],[i[6] for i in sl_val],[i[10][1] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    loggax.set_ylabel('Log g')    mhax.errorbar([i[0] for i in sl_val],[i[7] for i in sl_val],[i[10][2] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    mhax.set_ylabel('[M/H]')    alphaax.errorbar([i[0] for i in sl_val],[i[8] for i in sl_val],[i[10][3] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    alphaax.set_ylabel('$alpha$')    teffax.errorbar([i[0] for i in sl_val],[i[9] for i in sl_val],[i[10][0] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    teffax.set_ylabel('$T_{eff}$ (K)')    lenax.plot([i[0] for i in sl_val],[i[1] for i in sl_val], color='black')    lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')    lenax.set_xlabel('$S_{\lambda}$ cutoff')    #lenax.set_xlabel('Residual cutoff')    lenax.set_ylabel('# points masked')    lenax.legend(bbox_to_anchor=(0.95,0.75), fontsize=13)    if log_scale:        rvax.set_xscale('log')        loggax.set_xscale('log')        mhax.set_xscale('log')        alphaax.set_xscale('log')        teffax.set_xscale('log')        lenax.set_xscale('log')    if invert_xaxes:        rvax.invert_xaxis()        loggax.invert_xaxis()        mhax.invert_xaxis()        alphaax.invert_xaxis()        teffax.invert_xaxis()        lenax.invert_xaxis()    if plot_ref_vals:        cal_star_info = scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1,dtype=None)        cal_star_info = map(list, zip(*cal_star_info))        if starname in cal_star_info[0]:            print starname+' is a calibrator star'            star_ind = cal_star_info[0].index(starname)            rvax.axhline(y=cal_star_info[5][star_ind], color='y',linestyle='--',label='APOGEE value')            mhax.axhline(y=cal_star_info[1][star_ind], color='y',linestyle='--')            teffax.axhline(y=cal_star_info[2][star_ind], color='y',linestyle='--')            alphaax.axhline(y=cal_star_info[4][star_ind], color='y',linestyle='--')            loggax.axhline(y=cal_star_info[3][star_ind], color='y',linestyle='--')            rvax.legend(bbox_to_anchor=(0.95,0.75), fontsize=13)    plt.show()def sl_masked_param_info(starname,g,specdir='/group/data/nirspec/spectra/',snr=30.,nnorm=2):    file1 = glob.glob(specdir+starname+'_order34*.dat')    file2 = glob.glob(specdir+starname+'_order35*.dat')    file3 = glob.glob(specdir+starname+'_order36*.dat')    file4 = glob.glob(specdir+starname+'_order37*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1,desired_wavelength_units='micron')    starspectrum35 = read_fits_file.read_nirspec_dat(file2,desired_wavelength_units='micron')    starspectrum36 = read_fits_file.read_nirspec_dat(file3,desired_wavelength_units='micron')    starspectrum37 = read_fits_file.read_nirspec_dat(file4,desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]    waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]    waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        waverange37 = [np.amin(starspectrum37.wavelength.value[:970]), np.amax(starspectrum37.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1,desired_wavelength_units='Angstrom',wave_range=waverange34)    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value))+1.0/np.float(snr))*starspectrum34.flux.unit        starspectrum35 = read_fits_file.read_nirspec_dat(file2,desired_wavelength_units='Angstrom',wave_range=waverange35)    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value))+1.0/np.float(snr))*starspectrum35.flux.unit    starspectrum36 = read_fits_file.read_nirspec_dat(file3,desired_wavelength_units='Angstrom',wave_range=waverange36)    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value))+1.0/np.float(snr))*starspectrum36.flux.unit        starspectrum37 = read_fits_file.read_nirspec_dat(file4,desired_wavelength_units='Angstrom',wave_range=waverange37)    starspectrum37.uncertainty = (np.zeros(len(starspectrum37.flux.value))+1.0/np.float(snr))*starspectrum37.flux.unit    interp1 = Interpolate(starspectrum34)    convolve1 = InstrumentConvolveGrating.from_grid(g,R=24000)    rot1 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm1 = Normalize(starspectrum34,nnorm)    interp2 = Interpolate(starspectrum35)    convolve2 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot2 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm2 = Normalize(starspectrum35,nnorm)    interp3 = Interpolate(starspectrum36)    convolve3 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm3 = Normalize(starspectrum36,nnorm)    interp4 = Interpolate(starspectrum37)    convolve4 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm4 = Normalize(starspectrum37,nnorm)    model = g | rot1 | Splitter4() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \         convolve1 & convolve2 & convolve3 & convolve4 | interp1 & interp2 & interp3 & interp4 | \         norm1 & norm2 & norm3 & norm4    h5_files_us = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/masked_sl*'+starname+'_order34-37_bosz.h5')    cut_lis = []    for filename in h5_files_us:        cut_lis += [(float(filename.split('_')[6]),filename)]    cut_lis = sorted(cut_lis,key = getKey)    h5_files = [i[1] for i in cut_lis]        sl_val = []    combined_data_mask_model = {}        for filename in h5_files:        gc_result = MultiNestResult.from_hdf5(filename)        print gc_result        for a in apogee_vals.keys():            setattr(model,a,apogee_vals[a])        w1,f1,w2,f2,w3,f3,w4,f4 = model()        sl_mh1,sl_mh2,sl_mh3,sl_mh4 = mtf.s_lambda_four_order(model,'mh',model.mh_0.value,0.1)        #combine all sl_mh,w,f, lists        sl_mh = np.concatenate((sl_mh1,sl_mh2,sl_mh3,sl_mh4))        #w = np.concatenate((w1/(gc_result.median['vrad_3']/3e5+1.0),w2/(gc_result.median['vrad_4']/3e5+1.0),w3/(gc_result.median['vrad_5']/3e5+1.0),w4/(gc_result.median['vrad_6']/3e5+1.0)))        w = np.concatenate((w1,w2,w3,w4))                f = np.concatenate((f1,f2,f3,f4))        starfluxall = np.concatenate((starspectrum34.flux.value,starspectrum35.flux.value,starspectrum36.flux.value,starspectrum37.flux.value))        starwaveall = np.concatenate((starspectrum34.wavelength.value/(gc_result.median['vrad_3']/3e5+1.0),starspectrum35.wavelength.value/(gc_result.median['vrad_4']/3e5+1.0),starspectrum36.wavelength.value/(gc_result.median['vrad_5']/3e5+1.0),starspectrum37.wavelength.value/(gc_result.median['vrad_6']/3e5+1.0)))        sigma_bounds = gc_result.calculate_sigmas(1)        sigmas = []        for a in sigma_bounds.keys():            #print a            sigmas += [(sigma_bounds[a][1]-sigma_bounds[a][0])/2.]        #print sigmas        abs_sl_mh = []                mask_sl_f = []        mask_sl_w = []            data_sl_f = []        for i in range(len(sl_mh)):            abs_sl_mh += [np.abs(sl_mh[i])]            if abs(sl_mh[i]) < float(filename.split('_')[6]):                mask_sl_f += [starfluxall[i]]                mask_sl_w += [starwaveall[i]]            else:                data_sl_f += [starfluxall[i]]        #combined_data_mask_model.update({filename.split('_')[6] : [(starwaveall,starfluxall),(w,f),(mask_sl_w,mask_sl_f)]})        combined_data_mask_model.update({filename.split('_')[6] : [(starspectrum34.wavelength.value/(gc_result.median['vrad_3']/3e5+1.0),starspectrum34.flux.value),\                                                                   (starspectrum35.wavelength.value/(gc_result.median['vrad_4']/3e5+1.0),starspectrum35.flux.value),\                                                                   (starspectrum36.wavelength.value/(gc_result.median['vrad_5']/3e5+1.0),starspectrum36.flux.value),\                                                                   (starspectrum37.wavelength.value/(gc_result.median['vrad_6']/3e5+1.0),starspectrum37.flux.value),\                                                                   (w1,f1),(w2,f2),(w3,f3),(w4,f4),(mask_sl_w,mask_sl_f)]})                sl_val += [(float(filename.split('_')[6]),len(mask_sl_f),gc_result.median['vrad_3'],gc_result.median['vrad_4'],gc_result.median['vrad_5'],gc_result.median['vrad_6'],gc_result.median['logg_0'],gc_result.median['mh_0'],gc_result.median['alpha_0'],gc_result.median['teff_0'],sigmas)]    return sl_val, combined_data_mask_modeldef sl_masked_param_info_three_order(starname, g, specdir='/group/data/nirspec/spectra/', snr=30., nnorm=2):    file1 = glob.glob(specdir + starname + '_order34*.dat')    file2 = glob.glob(specdir + starname + '_order35*.dat')    file3 = glob.glob(specdir + starname + '_order36*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')    waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]    waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]    waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom', wave_range=waverange34)    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(        snr)) * starspectrum34.flux.unit    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom', wave_range=waverange35)    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(        snr)) * starspectrum35.flux.unit    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom', wave_range=waverange36)    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(        snr)) * starspectrum36.flux.unit    interp1 = Interpolate(starspectrum34)    convolve1 = InstrumentConvolveGrating.from_grid(g, R=24000)    rot1 = RotationalBroadening.from_grid(g, vrot=np.array([10.0]))    norm1 = Normalize(starspectrum34, nnorm)    interp2 = Interpolate(starspectrum35)    convolve2 = InstrumentConvolveGrating.from_grid(g, R=24000)    # rot2 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm2 = Normalize(starspectrum35, nnorm)    interp3 = Interpolate(starspectrum36)    convolve3 = InstrumentConvolveGrating.from_grid(g, R=24000)    # rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm3 = Normalize(starspectrum36, nnorm)    model = g | rot1 | Splitter3() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \            convolve1 & convolve2 & convolve3 | interp1 & interp2 & interp3 | \            norm1 & norm2 & norm3    h5_files_us = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl*' + starname + '_order34-36_phoenix.h5')    cut_lis = []    for filename in h5_files_us:        cut_lis += [(float(filename.split('_')[7]), filename)]    cut_lis = sorted(cut_lis, key=getKey)    h5_files = [i[1] for i in cut_lis]    sl_val = []    combined_data_mask_model = {}    for filename in h5_files:        gc_result = MultiNestResult.from_hdf5(filename)        print gc_result        unmasked_result = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_0.0_' + starname + '_order34-36.h5')        for a in unmasked_result.median.keys():            setattr(model,a,unmasked_result.median[a])        model = mtf.correct_bounds(model)        w1, f1, w2, f2, w3, f3 = model()        print f1[0:30],f2[0:30],f3[0:30]        print model        sl_mh1, sl_mh2, sl_mh3 = mtf.s_lambda_three_order(model, 'mh', model.mh_0.value, 0.1)        # combine all sl_mh,w,f, lists        sl_mh = np.concatenate((sl_mh1, sl_mh2, sl_mh3))        # w = np.concatenate((w1/(gc_result.median['vrad_3']/3e5+1.0),w2/(gc_result.median['vrad_4']/3e5+1.0),w3/(gc_result.median['vrad_5']/3e5+1.0),w4/(gc_result.median['vrad_6']/3e5+1.0)))        w = np.concatenate((w1, w2, w3))        f = np.concatenate((f1, f2, f3))        starfluxall = np.concatenate((starspectrum34.flux.value, starspectrum35.flux.value, starspectrum36.flux.value))        starwaveall = np.concatenate((starspectrum34.wavelength.value / (gc_result.median['vrad_3'] / 3e5 + 1.0),                                      starspectrum35.wavelength.value / (gc_result.median['vrad_4'] / 3e5 + 1.0),                                      starspectrum36.wavelength.value / (gc_result.median['vrad_5'] / 3e5 + 1.0)))        sigma_bounds = gc_result.calculate_sigmas(1)        sigmas = []        for a in sigma_bounds.keys():            # print a            sigmas += [(sigma_bounds[a][1] - sigma_bounds[a][0]) / 2.]        # print sigmas        abs_sl_mh = []        mask_sl_f = []        mask_sl_w = []        data_sl_f = []        for i in range(len(sl_mh)):            abs_sl_mh += [np.abs(sl_mh[i])]            if abs(sl_mh[i]) < float(filename.split('_')[7]):                mask_sl_f += [starfluxall[i]]                mask_sl_w += [starwaveall[i]]            else:                data_sl_f += [starfluxall[i]]        # combined_data_mask_model.update({filename.split('_')[6] : [(starwaveall,starfluxall),(w,f),(mask_sl_w,mask_sl_f)]})        combined_data_mask_model.update({filename.split('_')[6]: [            (starspectrum34.wavelength.value / (gc_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value), \            (starspectrum35.wavelength.value / (gc_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value), \            (starspectrum36.wavelength.value / (gc_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value), \            (w1, f1), (w2, f2), (w3, f3), (mask_sl_w, mask_sl_f)]})        sl_val += [(float(filename.split('_')[7]), len(mask_sl_f), gc_result.median['vrad_3'],                    gc_result.median['vrad_4'], gc_result.median['vrad_5'],                    gc_result.median['logg_0'], gc_result.median['mh_0'], gc_result.median['alpha_0'],                    gc_result.median['teff_0'], sigmas)]    return sl_val, combined_data_mask_modeldef residual_masked_param_info_four_order(starname,g,specdir='/group/data/nirspec/spectra/',snr=30.,nnorm=2):    file1 = glob.glob(specdir+starname+'_order34*.dat')    file2 = glob.glob(specdir+starname+'_order35*.dat')    file3 = glob.glob(specdir+starname+'_order36*.dat')    file4 = glob.glob(specdir+starname+'_order37*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1,desired_wavelength_units='micron')    starspectrum35 = read_fits_file.read_nirspec_dat(file2,desired_wavelength_units='micron')    starspectrum36 = read_fits_file.read_nirspec_dat(file3,desired_wavelength_units='micron')    starspectrum37 = read_fits_file.read_nirspec_dat(file4,desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]    waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]    waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        waverange37 = [np.amin(starspectrum37.wavelength.value[:970]), np.amax(starspectrum37.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1,desired_wavelength_units='Angstrom',wave_range=waverange34)    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value))+1.0/np.float(snr))*starspectrum34.flux.unit        starspectrum35 = read_fits_file.read_nirspec_dat(file2,desired_wavelength_units='Angstrom',wave_range=waverange35)    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value))+1.0/np.float(snr))*starspectrum35.flux.unit    starspectrum36 = read_fits_file.read_nirspec_dat(file3,desired_wavelength_units='Angstrom',wave_range=waverange36)    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value))+1.0/np.float(snr))*starspectrum36.flux.unit        starspectrum37 = read_fits_file.read_nirspec_dat(file4,desired_wavelength_units='Angstrom',wave_range=waverange37)    starspectrum37.uncertainty = (np.zeros(len(starspectrum37.flux.value))+1.0/np.float(snr))*starspectrum37.flux.unit    interp1 = Interpolate(starspectrum34)    convolve1 = InstrumentConvolveGrating.from_grid(g,R=24000)    rot1 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm1 = Normalize(starspectrum34,nnorm)    interp2 = Interpolate(starspectrum35)    convolve2 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot2 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm2 = Normalize(starspectrum35,nnorm)    interp3 = Interpolate(starspectrum36)    convolve3 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm3 = Normalize(starspectrum36,nnorm)    interp4 = Interpolate(starspectrum37)    convolve4 = InstrumentConvolveGrating.from_grid(g,R=24000)    #rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm4 = Normalize(starspectrum37,nnorm)    model = g | rot1 | Splitter4() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \         convolve1 & convolve2 & convolve3 & convolve4 | interp1 & interp2 & interp3 & interp4 | \         norm1 & norm2 & norm3 & norm4    h5_files_us = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/masked_res*'+starname+'_order34-37.h5')    cut_lis = []    for filename in h5_files_us:        print filename.split('_')        cut_lis += [(float(filename.split('_')[6]),filename)]    cut_lis = sorted(cut_lis,key = getKey)    h5_files = [i[1] for i in cut_lis]        res_val = []    combined_data_mask_model = {}        for filename in h5_files:        gc_result = MultiNestResult.from_hdf5(filename)        for a in apogee_vals.keys():            setattr(model,a,apogee_vals[a])        w1,f1,w2,f2,w3,f3,w4,f4 = model()                w = np.concatenate((w1,w2,w3,w4))                f = np.concatenate((f1,f2,f3,f4))        starfluxall = np.concatenate((starspectrum34.flux.value,starspectrum35.flux.value,starspectrum36.flux.value,starspectrum37.flux.value))        starwaveall = np.concatenate((starspectrum34.wavelength.value/(gc_result.median['vrad_3']/3e5+1.0),starspectrum35.wavelength.value/(gc_result.median['vrad_4']/3e5+1.0),starspectrum36.wavelength.value/(gc_result.median['vrad_5']/3e5+1.0),starspectrum37.wavelength.value/(gc_result.median['vrad_6']/3e5+1.0)))        residual_flux34 = mt.calc_residuals(f1,starspectrum34.flux.value)        residual_flux35 = mt.calc_residuals(f2,starspectrum35.flux.value)        residual_flux36 = mt.calc_residuals(f3,starspectrum36.flux.value)        residual_flux37 = mt.calc_residuals(f4,starspectrum37.flux.value)        residual_flux_all = np.concatenate((residual_flux34,residual_flux35,residual_flux36,residual_flux37))        residual_masked_flux = []        residual_masked_wavelength = []        for i in range(len(residual_flux_all)):            if residual_flux_all[i] > float(filename.split('_')[6]):                residual_masked_flux += [starfluxall[i]]                residual_masked_wavelength += [starwaveall[i]]                                                    sigma_bounds = gc_result.calculate_sigmas(1)        sigmas = []        for a in sigma_bounds.keys():            #print a            sigmas += [(sigma_bounds[a][1]-sigma_bounds[a][0])/2.]        #print sigmas        #combined_data_mask_model.update({filename.split('_')[6] : [(starwaveall,starfluxall),(w,f),(mask_sl_w,mask_sl_f)]})        combined_data_mask_model.update({filename.split('_')[6] : [(starspectrum34.wavelength.value/(gc_result.median['vrad_3']/3e5+1.0),starspectrum34.flux.value),\                                                                   (starspectrum35.wavelength.value/(gc_result.median['vrad_4']/3e5+1.0),starspectrum35.flux.value),\                                                                   (starspectrum36.wavelength.value/(gc_result.median['vrad_5']/3e5+1.0),starspectrum36.flux.value),\                                                                   (starspectrum37.wavelength.value/(gc_result.median['vrad_6']/3e5+1.0),starspectrum37.flux.value),\                                                                   (w1,f1),(w2,f2),(w3,f3),(w4,f4),(residual_masked_wavelength,residual_masked_flux)]})                res_val += [(float(filename.split('_')[6]),len(residual_masked_flux),gc_result.median['vrad_3'],gc_result.median['vrad_4'],gc_result.median['vrad_5'],gc_result.median['vrad_6'],gc_result.median['logg_0'],gc_result.median['mh_0'],gc_result.median['alpha_0'],gc_result.median['teff_0'],sigmas)]             print len(starfluxall)    return res_val, combined_data_mask_modeldef residual_masked_param_info_three_order(starname, g, specdir='/group/data/nirspec/spectra/', snr=30., nnorm=2):    file1 = glob.glob(specdir + starname + '_order34*.dat')    file2 = glob.glob(specdir + starname + '_order35*.dat')    file3 = glob.glob(specdir + starname + '_order36*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')    waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]    waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]    waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom', wave_range=waverange34)    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(        snr)) * starspectrum34.flux.unit    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom', wave_range=waverange35)    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(        snr)) * starspectrum35.flux.unit    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom', wave_range=waverange36)    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(        snr)) * starspectrum36.flux.unit    interp1 = Interpolate(starspectrum34)    convolve1 = InstrumentConvolveGrating.from_grid(g, R=24000)    rot1 = RotationalBroadening.from_grid(g, vrot=np.array([10.0]))    norm1 = Normalize(starspectrum34, nnorm)    interp2 = Interpolate(starspectrum35)    convolve2 = InstrumentConvolveGrating.from_grid(g, R=24000)    # rot2 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm2 = Normalize(starspectrum35, nnorm)    interp3 = Interpolate(starspectrum36)    convolve3 = InstrumentConvolveGrating.from_grid(g, R=24000)    # rot3 = RotationalBroadening.from_grid(g,vrot=np.array([10.0]))    norm3 = Normalize(starspectrum36, nnorm)    model = g | rot1 | Splitter3() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \            convolve1 & convolve2 & convolve3 | interp1 & interp2 & interp3 | \            norm1 & norm2 & norm3    h5_files_us = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/masked_res*' + starname + '_order34-36_phoenix.h5')    cut_lis = []    for filename in h5_files_us:        print filename.split('_')        cut_lis += [(float(filename.split('_')[6]), filename)]    cut_lis = sorted(cut_lis, key=getKey)    h5_files = [i[1] for i in cut_lis]    res_val = []    combined_data_mask_model = {}    for filename in h5_files:        gc_result = MultiNestResult.from_hdf5(filename)        unmasked_result = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_0.0_' + starname + '_order34-36.h5')        for a in unmasked_result.median.keys():            setattr(model,a,unmasked_result.median[a])        model = mtf.correct_bounds(model)        w1, f1, w2, f2, w3, f3 = model()        w = np.concatenate((w1, w2, w3))        f = np.concatenate((f1, f2, f3))        starfluxall = np.concatenate((starspectrum34.flux.value, starspectrum35.flux.value, starspectrum36.flux.value))        starwaveall = np.concatenate((starspectrum34.wavelength.value / (gc_result.median['vrad_3'] / 3e5 + 1.0),                                      starspectrum35.wavelength.value / (gc_result.median['vrad_4'] / 3e5 + 1.0),                                      starspectrum36.wavelength.value / (gc_result.median['vrad_5'] / 3e5 + 1.0)))        residual_flux34 = mt.calc_residuals(f1, starspectrum34.flux.value)        residual_flux35 = mt.calc_residuals(f2, starspectrum35.flux.value)        residual_flux36 = mt.calc_residuals(f3, starspectrum36.flux.value)        residual_flux_all = np.concatenate((residual_flux34, residual_flux35, residual_flux36))        residual_masked_flux = []        residual_masked_wavelength = []        for i in range(len(residual_flux_all)):            if residual_flux_all[i] > float(filename.split('_')[6]):                residual_masked_flux += [starfluxall[i]]                residual_masked_wavelength += [starwaveall[i]]        sigma_bounds = gc_result.calculate_sigmas(1)        sigmas = []        for a in sigma_bounds.keys():            # print a            sigmas += [(sigma_bounds[a][1] - sigma_bounds[a][0]) / 2.]        # print sigmas        # combined_data_mask_model.update({filename.split('_')[6] : [(starwaveall,starfluxall),(w,f),(mask_sl_w,mask_sl_f)]})        combined_data_mask_model.update({filename.split('_')[6]: [            (starspectrum34.wavelength.value / (gc_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value), \            (starspectrum35.wavelength.value / (gc_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value), \            (starspectrum36.wavelength.value / (gc_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value), \            (w1, f1), (w2, f2), (w3, f3), (residual_masked_wavelength, residual_masked_flux)]})        res_val += [(float(filename.split('_')[6]), len(residual_masked_flux), gc_result.median['vrad_3'],                     gc_result.median['vrad_4'], gc_result.median['vrad_5'],                     gc_result.median['logg_0'], gc_result.median['mh_0'], gc_result.median['alpha_0'],                     gc_result.median['teff_0'], sigmas)]    print len(starfluxall)    return res_val, combined_data_mask_modeldef plot_sl_res_response_four_order(sl_val,res_val,starname, savefig=False):    f= plt.figure(figsize=(24,12))        sl_rvax  = f.add_subplot(6,2,1)    sl_loggax  = f.add_subplot(6,2,3)    sl_mhax  = f.add_subplot(6,2,5)    sl_alphaax = f.add_subplot(6,2,7)    sl_teffax = f.add_subplot(6,2,9)    sl_lenax = f.add_subplot(6,2,11)    res_rvax  = f.add_subplot(6,2,2)    res_loggax  = f.add_subplot(6,2,4)    res_mhax  = f.add_subplot(6,2,6)    res_alphaax = f.add_subplot(6,2,8)    res_teffax = f.add_subplot(6,2,10)    res_lenax = f.add_subplot(6,2,12)    allax = f.get_axes()        sl_val = sorted(sl_val)    res_val = sorted(res_val)        cal_star_info = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1,dtype=None))    print [x[0] for x in cal_star_info]    if starname in [x[0] for x in cal_star_info]:        print starname+' is a calibrator star'        star_ind = [x[0] for x in cal_star_info].index(starname)        cal_star_info = cal_star_info[star_ind]    order_info = scipy.genfromtxt('/u/rbentley/metallicity/reduced_orders.dat', delimiter='\t', skip_header=1,dtype=None)    print sl_val[0][0]        unmasked_rv = None    if sl_val[0][0] == 0.0:        unmasked_rv = (sl_val[0][2],sl_val[0][3],sl_val[0][4],sl_val[0][5])    else:        unmasked_results = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/masked_sl_cutoff_0.0_'+starname+'order34-37.h5')        unmasked_rv = (unmasked_results.median['vrad_3'],unmasked_results.median['vrad_4'],unmasked_results.median['vrad_5'],unmasked_results.median['vrad_6'])        sl_rvax.errorbar([i[0] for i in sl_val],[i[2]-unmasked_rv[0] for i in sl_val],[i[10][5] for i in sl_val], color='red', fmt='o',linestyle='--',capsize=5,label='Order 34')    sl_rvax.errorbar([i[0] for i in sl_val],[i[3]-unmasked_rv[1] for i in sl_val],[i[10][6] for i in sl_val], color='green', fmt='o',linestyle='--',capsize=5,label='Order 35')    sl_rvax.errorbar([i[0] for i in sl_val],[i[4]-unmasked_rv[2] for i in sl_val],[i[10][7] for i in sl_val], color='blue', fmt='o',linestyle='--',capsize=5,label='Order 36')    sl_rvax.errorbar([i[0] for i in sl_val],[i[5]-unmasked_rv[3] for i in sl_val],[i[10][8] for i in sl_val], fmt='o',linestyle='--',capsize=5,label='Order 37')    sl_rvax.set_ylabel('Radial Velocity difference (km/s)',fontsize=8)    sl_rvax.set_title(starname+' $S_{\lambda}$ masked fit responses',fontsize=12)    sl_loggax.errorbar([i[0] for i in sl_val],[i[6]-float(cal_star_info[3]) for i in sl_val],[i[10][1] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    sl_loggax.set_ylabel('Log g difference',fontsize=8)    sl_mhax.errorbar([i[0] for i in sl_val],[i[7]-float(cal_star_info[1]) for i in sl_val],[i[10][2] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    sl_mhax.set_ylabel('[M/H] difference',fontsize=8)    sl_alphaax.errorbar([i[0] for i in sl_val],[i[8]-float(cal_star_info[4]) for i in sl_val],[i[10][3] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    sl_alphaax.set_ylabel('$alpha$ difference',fontsize=8)    sl_teffax.errorbar([i[0] for i in sl_val],[i[9]-float(cal_star_info[2]) for i in sl_val],[i[10][0] for i in sl_val], color='black',fmt='o',linestyle='--',capsize=5)    sl_teffax.set_ylabel('$T_{eff}$ (K) difference',fontsize=8)    sl_lenax.plot([i[0] for i in sl_val],[i[1] for i in sl_val], color='black')    sl_lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')    sl_lenax.set_xlabel('$S_{\lambda}$ cutoff',fontsize=8)    sl_lenax.set_ylabel('# points masked',fontsize=8)    #sl_lenax.legend(loc='center right', fontsize=13)    sl_rvax.set_xscale('log')    sl_loggax.set_xscale('log')    sl_mhax.set_xscale('log')    sl_alphaax.set_xscale('log')    sl_teffax.set_xscale('log')    sl_lenax.set_xscale('log')    res_rvax.errorbar([i[0] for i in res_val],[i[2]-unmasked_rv[0] for i in res_val],[i[10][5] for i in res_val], color='red', fmt='o',linestyle='--',capsize=5,label='Order 34')    res_rvax.errorbar([i[0] for i in res_val],[i[3]-unmasked_rv[1] for i in res_val],[i[10][6] for i in res_val], color='green', fmt='o',linestyle='--',capsize=5,label='Order 35')    res_rvax.errorbar([i[0] for i in res_val],[i[4]-unmasked_rv[2] for i in res_val],[i[10][7] for i in res_val], color='blue', fmt='o',linestyle='--',capsize=5,label='Order 36')    res_rvax.errorbar([i[0] for i in res_val],[i[5]-unmasked_rv[3] for i in res_val],[i[10][8] for i in res_val], fmt='o',linestyle='--',capsize=5,label='Order 37')        res_rvax.set_ylabel('Radial Velocity difference (km/s)',fontsize=8)    res_rvax.set_title(starname+' residual masked fit responses',fontsize=12)    res_loggax.errorbar([i[0] for i in res_val],[i[6]-float(cal_star_info[3]) for i in res_val],[i[10][1] for i in res_val], color='black',fmt='o',linestyle='--',capsize=5)    res_loggax.set_ylabel('Log g difference',fontsize=8)    res_mhax.errorbar([i[0] for i in res_val],[i[7]-float(cal_star_info[1]) for i in res_val],[i[10][2] for i in res_val], color='black',fmt='o',linestyle='--',capsize=5)    res_mhax.set_ylabel('[M/H] difference',fontsize=8)    res_alphaax.errorbar([i[0] for i in res_val],[i[8]-float(cal_star_info[4]) for i in res_val],[i[10][3] for i in res_val], color='black',fmt='o',linestyle='--',capsize=5)    res_alphaax.set_ylabel('$alpha$ difference',fontsize=8)    res_teffax.errorbar([i[0] for i in res_val],[i[9]-float(cal_star_info[2]) for i in res_val],[i[10][0] for i in res_val], color='black',fmt='o',linestyle='--',capsize=5)    res_teffax.set_ylabel('$T_{eff}$ difference(K)',fontsize=8)    res_lenax.plot([i[0] for i in res_val],[i[1] for i in res_val], color='black')    res_lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')    res_lenax.set_xlabel('Residual cutoff',fontsize=12)    res_lenax.set_ylabel('# points masked',fontsize=12)    res_lenax.legend(loc='center right', fontsize=13)        res_rvax.invert_xaxis()    res_loggax.invert_xaxis()    res_mhax.invert_xaxis()    res_alphaax.invert_xaxis()    res_teffax.invert_xaxis()    res_lenax.invert_xaxis()    for ax in allax:        ax.axhline(y=0.0, color='y',linestyle='--',label='APOGEE value')            res_rvax.legend(bbox_to_anchor=(0.95,0.75), fontsize=10)    plt.rc('xtick',labelsize=10)    plt.rc('ytick',labelsize=10)    plt.rc('axes',labelsize=12)    if savefig:        plt.savefig('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/sl-res_response_plot_'+starname+'.png')    plt.show()def plot_sl_res_response_three_order(sl_val, res_val, starname, savefig=False):    f = plt.figure(figsize=(24, 12))    sl_rvax = f.add_subplot(6, 2, 1)    sl_loggax = f.add_subplot(6, 2, 3)    sl_mhax = f.add_subplot(6, 2, 5)    sl_alphaax = f.add_subplot(6, 2, 7)    sl_teffax = f.add_subplot(6, 2, 9)    sl_lenax = f.add_subplot(6, 2, 11)    res_rvax = f.add_subplot(6, 2, 2)    res_loggax = f.add_subplot(6, 2, 4)    res_mhax = f.add_subplot(6, 2, 6)    res_alphaax = f.add_subplot(6, 2, 8)    res_teffax = f.add_subplot(6, 2, 10)    res_lenax = f.add_subplot(6, 2, 12)    allax = f.get_axes()    sl_val = sorted(sl_val)    res_val = sorted(res_val)    cal_star_info = list(        scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    print [x[0] for x in cal_star_info]    if starname in [x[0] for x in cal_star_info]:        print starname + ' is a calibrator star'        star_ind = [x[0] for x in cal_star_info].index(starname)        cal_star_info = cal_star_info[star_ind]    order_info = scipy.genfromtxt('/u/rbentley/metallicity/reduced_orders.dat', delimiter='\t', skip_header=1,                                  dtype=None)    print sl_val[0][0]    unmasked_rv = None    if sl_val[0][0] == 0.0:        unmasked_rv = (sl_val[0][2], sl_val[0][3], sl_val[0][4])    else:        unmasked_results = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_0.0_' + starname + '_order34-36.h5')        unmasked_rv = (        unmasked_results.median['vrad_3'], unmasked_results.median['vrad_4'], unmasked_results.median['vrad_5'])    sl_rvax.errorbar([i[0] for i in sl_val], [i[2] - unmasked_rv[0] for i in sl_val], [i[9][5] for i in sl_val],                     color='red', fmt='o', linestyle='--', capsize=5, label='Order 34')    sl_rvax.errorbar([i[0] for i in sl_val], [i[3] - unmasked_rv[1] for i in sl_val], [i[9][6] for i in sl_val],                     color='green', fmt='o', linestyle='--', capsize=5, label='Order 35')    sl_rvax.errorbar([i[0] for i in sl_val], [i[4] - unmasked_rv[2] for i in sl_val], [i[9][7] for i in sl_val],                     color='blue', fmt='o', linestyle='--', capsize=5, label='Order 36')    sl_rvax.set_ylabel('Radial Velocity difference (km/s)', fontsize=8)    sl_rvax.set_title(starname + ' $S_{\lambda}$ masked fit responses', fontsize=12)    sl_loggax.errorbar([i[0] for i in sl_val], [i[5] - float(cal_star_info[3]) for i in sl_val],                       [i[9][1] for i in sl_val], color='black', fmt='o', linestyle='--', capsize=5)    sl_loggax.set_ylabel('Log g difference', fontsize=8)    sl_mhax.errorbar([i[0] for i in sl_val], [i[6] - float(cal_star_info[1]) for i in sl_val],                     [i[9][2] for i in sl_val], color='black', fmt='o', linestyle='--', capsize=5)    sl_mhax.set_ylabel('[M/H] difference', fontsize=8)    sl_alphaax.errorbar([i[0] for i in sl_val], [i[7] - float(cal_star_info[4]) for i in sl_val],                        [i[9][3] for i in sl_val], color='black', fmt='o', linestyle='--', capsize=5)    sl_alphaax.set_ylabel('$alpha$ difference', fontsize=8)    sl_teffax.errorbar([i[0] for i in sl_val], [i[8] - float(cal_star_info[2]) for i in sl_val],                       [i[9][0] for i in sl_val], color='black', fmt='o', linestyle='--', capsize=5)    sl_teffax.set_ylabel('$T_{eff}$ (K) difference', fontsize=8)    sl_lenax.plot([i[0] for i in sl_val], [i[1] for i in sl_val], color='black')    sl_lenax.axhline(y=970 * 4, color='k', linestyle='--', label='Total number of data points')    sl_lenax.set_xlabel('$S_{\lambda}$ cutoff', fontsize=8)    sl_lenax.set_ylabel('# points masked', fontsize=8)    # sl_lenax.legend(loc='center right', fontsize=13)    sl_rvax.set_xscale('log')    sl_loggax.set_xscale('log')    sl_mhax.set_xscale('log')    sl_alphaax.set_xscale('log')    sl_teffax.set_xscale('log')    sl_lenax.set_xscale('log')    res_rvax.errorbar([i[0] for i in res_val], [i[2] - unmasked_rv[0] for i in res_val], [i[9][5] for i in res_val],                      color='red', fmt='o', linestyle='--', capsize=5, label='Order 34')    res_rvax.errorbar([i[0] for i in res_val], [i[3] - unmasked_rv[1] for i in res_val], [i[9][6] for i in res_val],                      color='green', fmt='o', linestyle='--', capsize=5, label='Order 35')    res_rvax.errorbar([i[0] for i in res_val], [i[4] - unmasked_rv[2] for i in res_val], [i[9][7] for i in res_val],                      color='blue', fmt='o', linestyle='--', capsize=5, label='Order 36')    res_rvax.set_ylabel('Radial Velocity difference (km/s)', fontsize=8)    res_rvax.set_title(starname + ' residual masked fit responses', fontsize=12)    res_loggax.errorbar([i[0] for i in res_val], [i[5] - float(cal_star_info[3]) for i in res_val],                        [i[9][1] for i in res_val], color='black', fmt='o', linestyle='--', capsize=5)    res_loggax.set_ylabel('Log g difference', fontsize=8)    res_mhax.errorbar([i[0] for i in res_val], [i[6] - float(cal_star_info[1]) for i in res_val],                      [i[9][2] for i in res_val], color='black', fmt='o', linestyle='--', capsize=5)    res_mhax.set_ylabel('[M/H] difference', fontsize=8)    res_alphaax.errorbar([i[0] for i in res_val], [i[7] - float(cal_star_info[4]) for i in res_val],                         [i[9][3] for i in res_val], color='black', fmt='o', linestyle='--', capsize=5)    res_alphaax.set_ylabel('$alpha$ difference', fontsize=8)    res_teffax.errorbar([i[0] for i in res_val], [i[8] - float(cal_star_info[2]) for i in res_val],                        [i[9][0] for i in res_val], color='black', fmt='o', linestyle='--', capsize=5)    res_teffax.set_ylabel('$T_{eff}$ difference(K)', fontsize=8)    res_lenax.plot([i[0] for i in res_val], [i[1] for i in res_val], color='black')    res_lenax.axhline(y=970 * 4, color='k', linestyle='--', label='Total number of data points')    res_lenax.set_xlabel('Residual cutoff', fontsize=12)    res_lenax.set_ylabel('# points masked', fontsize=12)    res_lenax.legend(loc='center right', fontsize=13)    res_rvax.invert_xaxis()    res_loggax.invert_xaxis()    res_mhax.invert_xaxis()    res_alphaax.invert_xaxis()    res_teffax.invert_xaxis()    res_lenax.invert_xaxis()    for ax in allax:        ax.axhline(y=0.0, color='y', linestyle='--', label='APOGEE value')    res_rvax.legend(bbox_to_anchor=(0.95, 0.75), fontsize=10)    plt.rc('xtick', labelsize=10)    plt.rc('ytick', labelsize=10)    plt.rc('axes', labelsize=12)    if savefig:        plt.savefig(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/sl-res_response_plot_' + starname + '.png')    plt.show()def plot_sl_res_response_allstar_three_order(sl_val_list, res_val_list, starname_list, savefig=False):    f = plt.figure(figsize=(24, 12))    # sl_rvax  = f.add_subplot(6,2,1)    sl_loggax = f.add_subplot(4, 2, 1)    sl_mhax = f.add_subplot(4, 2, 3)    sl_alphaax = f.add_subplot(4, 2, 5)    sl_teffax = f.add_subplot(4, 2, 7)    # sl_lenax = f.add_subplot(6,2,11)    # res_rvax  = f.add_subplot(6,2,2)    res_loggax = f.add_subplot(4, 2, 2)    res_mhax = f.add_subplot(4, 2, 4)    res_alphaax = f.add_subplot(4, 2, 6)    res_teffax = f.add_subplot(4, 2, 8)    # res_lenax = f.add_subplot(6,2,12)    allax = f.get_axes()    color = iter(cm.rainbow(np.linspace(0, 1, len(sl_val_list))))    for j in range(len(sl_val_list)):        c = next(color)        sl_val = sl_val_list[j]        res_val = res_val_list[j]        sl_val = sorted(sl_val)        res_val = sorted(res_val)        starname = starname_list[j]        cal_star_info = list(            scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))        print [x[0] for x in cal_star_info]        if starname in [x[0] for x in cal_star_info]:            print starname + ' is a calibrator star'            star_ind = [x[0] for x in cal_star_info].index(starname)            cal_star_info = cal_star_info[star_ind]        order_info = scipy.genfromtxt('/u/rbentley/metallicity/reduced_orders.dat', delimiter='\t', skip_header=1,                                      dtype=None)        unmasked_rv = None        if sl_val[0][0] == 0.0:            unmasked_rv = (sl_val[0][2], sl_val[0][3], sl_val[0][4])        else:            unmasked_results = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_0.0_' + starname + '_order34-36.h5')            unmasked_rv = (unmasked_results.median['vrad_3'], unmasked_results.median['vrad_4'], unmasked_results.median['vrad_5'])        # sl_rvax.errorbar([i[0] for i in sl_val],[i[2]-unmasked_rv[0] for i in sl_val],[i[10][5] for i in sl_val], color='red', fmt='o',linestyle='--',capsize=5,label='Order 34')        # sl_rvax.errorbar([i[0] for i in sl_val],[i[3]-unmasked_rv[1] for i in sl_val],[i[10][6] for i in sl_val], color='green', fmt='o',linestyle='--',capsize=5,label='Order 35')        # sl_rvax.errorbar([i[0] for i in sl_val],[i[4]-unmasked_rv[2] for i in sl_val],[i[10][7] for i in sl_val], color='blue', fmt='o',linestyle='--',capsize=5,label='Order 36')        # sl_rvax.errorbar([i[0] for i in sl_val],[i[5]-unmasked_rv[3] for i in sl_val],[i[10][8] for i in sl_val], fmt='o',linestyle='--',capsize=5,label='Order 37')        # sl_rvax.set_ylabel('Radial Velocity difference (km/s)',fontsize=8)        sl_loggax.set_title('$S_{\lambda}$ masked fit responses for all stars', fontsize=12)        sl_loggax.errorbar([i[0] for i in sl_val], [i[5] - float(cal_star_info[3]) for i in sl_val],                           [i[9][1] for i in sl_val], c=c, fmt='o', linestyle='--', capsize=5)        sl_loggax.set_ylabel('Log g difference', fontsize=12)        sl_mhax.errorbar([i[0] for i in sl_val], [i[6] - float(cal_star_info[1]) for i in sl_val],                         [i[9][2] for i in sl_val], c=c, fmt='o', linestyle='--', capsize=5)        sl_mhax.set_ylabel('[M/H] difference', fontsize=12)        sl_alphaax.errorbar([i[0] for i in sl_val], [i[7] - float(cal_star_info[4]) for i in sl_val],                            [i[9][3] for i in sl_val], c=c, fmt='o', linestyle='--', capsize=5)        sl_alphaax.set_ylabel('$alpha$ difference', fontsize=12)        sl_teffax.errorbar([i[0] for i in sl_val], [i[8] - float(cal_star_info[2]) for i in sl_val],                           [i[9][0] for i in sl_val], c=c, fmt='o', linestyle='--', capsize=5)        sl_teffax.set_ylabel('$T_{eff}$ (K) difference', fontsize=12)        # sl_lenax.plot([i[0] for i in sl_val],[i[1] for i in sl_val], color='black')        # sl_lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')        # sl_lenax.set_xlabel('$S_{\lambda}$ cutoff',fontsize=8)        # sl_lenax.set_ylabel('# points masked',fontsize=8)        # sl_lenax.legend(loc='center right', fontsize=13)        # sl_rvax.set_xscale('log')        sl_loggax.set_xscale('log')        sl_loggax.set_xlim(0, 10)        sl_loggax.set_ylim(-2, 3.5)        sl_mhax.set_xscale('log')        sl_mhax.set_xlim(0, 10)        sl_mhax.set_ylim(-1.5, 0.7)        sl_alphaax.set_xscale('log')        sl_alphaax.set_xlim(0, 10)        sl_alphaax.set_ylim(-0.5, 1.)        sl_teffax.set_xscale('log')        sl_teffax.set_xlim(0, 10)        sl_teffax.set_ylim(-700, 700)        # sl_lenax.set_xscale('log')        # res_rvax.errorbar([i[0] for i in res_val],[i[2]-unmasked_rv[0] for i in res_val],[i[10][5] for i in res_val], color='red', fmt='o',linestyle='--',capsize=5,label='Order 34')        # res_rvax.errorbar([i[0] for i in res_val],[i[3]-unmasked_rv[1] for i in res_val],[i[10][6] for i in res_val], color='green', fmt='o',linestyle='--',capsize=5,label='Order 35')        # res_rvax.errorbar([i[0] for i in res_val],[i[4]-unmasked_rv[2] for i in res_val],[i[10][7] for i in res_val], color='blue', fmt='o',linestyle='--',capsize=5,label='Order 36')        # res_rvax.errorbar([i[0] for i in res_val],[i[5]-unmasked_rv[3] for i in res_val],[i[10][8] for i in res_val], fmt='o',linestyle='--',capsize=5,label='Order 37')        # res_rvax.set_ylabel('Radial Velocity difference (km/s)',fontsize=8)        res_loggax.set_title('Residual masked fit responses for all stars (PHOENIX grid, orders 34-36)', fontsize=12)        res_loggax.errorbar([i[0] for i in res_val], [i[5] - float(cal_star_info[3]) for i in res_val],                            [i[9][1] for i in res_val], c=c, fmt='o', linestyle='--', capsize=5, label=starname)        # res_loggax.set_ylabel('Log g difference',fontsize=10)        res_mhax.errorbar([i[0] for i in res_val], [i[6] - float(cal_star_info[1]) for i in res_val],                          [i[9][2] for i in res_val], c=c, fmt='o', linestyle='--', capsize=5)        # res_mhax.set_ylabel('[M/H] difference',fontsize=10)        res_alphaax.errorbar([i[0] for i in res_val], [i[7] - float(cal_star_info[4]) for i in res_val],                             [i[9][3] for i in res_val], c=c, fmt='o', linestyle='--', capsize=5)        # res_alphaax.set_ylabel('$\alpha$ difference',fontsize=10)        res_teffax.errorbar([i[0] for i in res_val], [i[8] - float(cal_star_info[2]) for i in res_val],                            [i[9][0] for i in res_val], c=c, fmt='o', linestyle='--', capsize=5)        # res_teffax.set_ylabel('$T_{eff}$ difference(K)',fontsize=10)        # res_lenax.plot([i[0] for i in res_val],[i[1] for i in res_val], color='black')        # res_lenax.set_xlabel('Residual cutoff',fontsize=12)        # res_lenax.set_ylabel('# points masked',fontsize=12)        # res_rvax.invert_xaxis()        res_loggax.invert_xaxis()        res_loggax.set_ylim(-2, 3.5)        res_mhax.invert_xaxis()        res_mhax.set_ylim(-1.5, 0.7)        res_alphaax.invert_xaxis()        res_alphaax.set_ylim(-0.5, 1.)        res_teffax.invert_xaxis()        res_teffax.set_ylim(-2000, 500)        print "see s_l cuts here:", [i[0] for i in sl_val]        # res_lenax.invert_xaxis()        # if j ==0:        # res_lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')    for ax in allax:        ax.axhline(y=0.0, color='y', linestyle='--', label='APOGEE value')    # res_rvax.legend(bbox_to_anchor=(0.95,0.75), fontsize=10)    plt.rc('xtick', labelsize=10)    plt.rc('ytick', labelsize=10)    plt.rc('axes', labelsize=12)    sl_avg_fit, sl_avg = get_averages_sl(starname_list)    sl_teffax.plot(sl_avg, [i[0] for i in sl_avg_fit], color = 'black')    sl_loggax.plot(sl_avg, [i[1] for i in sl_avg_fit], color = 'black')    sl_mhax.plot(sl_avg, [i[2] for i in sl_avg_fit], color = 'black')    sl_alphaax.plot(sl_avg, [i[3] for i in sl_avg_fit], color = 'black')    res_avg_fit, res_avg = get_averages_res(starname_list)    res_teffax.plot(res_avg, [i[0] for i in res_avg_fit], color = 'black')    res_loggax.plot(res_avg, [i[1] for i in res_avg_fit], color = 'black', label='Average')    res_mhax.plot(res_avg, [i[2] for i in res_avg_fit], color = 'black')    res_alphaax.plot(res_avg, [i[3] for i in res_avg_fit], color = 'black')    res_loggax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=11)    sl_teffax.set_xlabel('$S_{\lambda}$ lower bound')    res_teffax.set_xlabel('Residual cutoff')    if savefig:        plt.savefig(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/sl-res_response_plot_all_082819.png')    plt.show()def plot_sl_res_response_allstar_four_order(sl_val_list,res_val_list,starname_list, savefig=False):    f= plt.figure(figsize=(24,12))        #sl_rvax  = f.add_subplot(6,2,1)    sl_loggax  = f.add_subplot(4,2,1)    sl_mhax  = f.add_subplot(4,2,3)    sl_alphaax = f.add_subplot(4,2,5)    sl_teffax = f.add_subplot(4,2,7)    #sl_lenax = f.add_subplot(6,2,11)    #res_rvax  = f.add_subplot(6,2,2)    res_loggax  = f.add_subplot(4,2,2)    res_mhax  = f.add_subplot(4,2,4)    res_alphaax = f.add_subplot(4,2,6)    res_teffax = f.add_subplot(4,2,8)    #res_lenax = f.add_subplot(6,2,12)        allax = f.get_axes()    color=iter(cm.rainbow(np.linspace(0,1,len(sl_val_list))))    for j in range(len(sl_val_list)):        c=next(color)        sl_val = sl_val_list[j]        res_val = res_val_list[j]                sl_val = sorted(sl_val)        res_val = sorted(res_val)                starname = starname_list[j]        cal_star_info = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1,dtype=None))        print [x[0] for x in cal_star_info]        if starname in [x[0] for x in cal_star_info]:            print starname+' is a calibrator star'            star_ind = [x[0] for x in cal_star_info].index(starname)            cal_star_info = cal_star_info[star_ind]        order_info = scipy.genfromtxt('/u/rbentley/metallicity/reduced_orders.dat', delimiter='\t', skip_header=1,dtype=None)            unmasked_rv = None        if sl_val[0][0] == 0.0:            unmasked_rv = (sl_val[0][2],sl_val[0][3],sl_val[0][4],sl_val[0][5])        else:            unmasked_results = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/masked_sl_cutoff_0.0_'+starname+'order34-37.h5')            unmasked_rv = (unmasked_results.median['vrad_3'],unmasked_results.median['vrad_4'],unmasked_results.median['vrad_5'],unmasked_results.median['vrad_6'])                #sl_rvax.errorbar([i[0] for i in sl_val],[i[2]-unmasked_rv[0] for i in sl_val],[i[10][5] for i in sl_val], color='red', fmt='o',linestyle='--',capsize=5,label='Order 34')        #sl_rvax.errorbar([i[0] for i in sl_val],[i[3]-unmasked_rv[1] for i in sl_val],[i[10][6] for i in sl_val], color='green', fmt='o',linestyle='--',capsize=5,label='Order 35')        #sl_rvax.errorbar([i[0] for i in sl_val],[i[4]-unmasked_rv[2] for i in sl_val],[i[10][7] for i in sl_val], color='blue', fmt='o',linestyle='--',capsize=5,label='Order 36')        #sl_rvax.errorbar([i[0] for i in sl_val],[i[5]-unmasked_rv[3] for i in sl_val],[i[10][8] for i in sl_val], fmt='o',linestyle='--',capsize=5,label='Order 37')        #sl_rvax.set_ylabel('Radial Velocity difference (km/s)',fontsize=8)        sl_loggax.set_title('$S_{\lambda}$ masked fit responses for all stars',fontsize=12)        sl_loggax.errorbar([i[0] for i in sl_val],[i[6]-float(cal_star_info[3]) for i in sl_val],[i[10][1] for i in sl_val], c=c,fmt='o',linestyle='--',capsize=5)        sl_loggax.set_ylabel('Log g difference',fontsize=12)        sl_mhax.errorbar([i[0] for i in sl_val],[i[7]-float(cal_star_info[1]) for i in sl_val],[i[10][2] for i in sl_val], c=c,fmt='o',linestyle='--',capsize=5)        sl_mhax.set_ylabel('[M/H] difference',fontsize=12)        sl_alphaax.errorbar([i[0] for i in sl_val],[i[8]-float(cal_star_info[4]) for i in sl_val],[i[10][3] for i in sl_val], c=c,fmt='o',linestyle='--',capsize=5)        sl_alphaax.set_ylabel('$alpha$ difference',fontsize=12)        sl_teffax.errorbar([i[0] for i in sl_val],[i[9]-float(cal_star_info[2]) for i in sl_val],[i[10][0] for i in sl_val], c=c,fmt='o',linestyle='--',capsize=5)        sl_teffax.set_ylabel('$T_{eff}$ (K) difference',fontsize=12)        #sl_lenax.plot([i[0] for i in sl_val],[i[1] for i in sl_val], color='black')        #sl_lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')        #sl_lenax.set_xlabel('$S_{\lambda}$ cutoff',fontsize=8)        #sl_lenax.set_ylabel('# points masked',fontsize=8)        #sl_lenax.legend(loc='center right', fontsize=13)        #sl_rvax.set_xscale('log')        sl_loggax.set_xscale('log')        sl_loggax.set_xlim(0,10)        sl_loggax.set_ylim(-2,3.5)                sl_mhax.set_xscale('log')        sl_mhax.set_xlim(0,10)        sl_mhax.set_ylim(-1.5,0.7)                sl_alphaax.set_xscale('log')        sl_alphaax.set_xlim(0,10)        sl_alphaax.set_ylim(-0.5,1.)                sl_teffax.set_xscale('log')        sl_teffax.set_xlim(0,10)        sl_teffax.set_ylim(-2000,2000)        #sl_lenax.set_xscale('log')        #res_rvax.errorbar([i[0] for i in res_val],[i[2]-unmasked_rv[0] for i in res_val],[i[10][5] for i in res_val], color='red', fmt='o',linestyle='--',capsize=5,label='Order 34')        #res_rvax.errorbar([i[0] for i in res_val],[i[3]-unmasked_rv[1] for i in res_val],[i[10][6] for i in res_val], color='green', fmt='o',linestyle='--',capsize=5,label='Order 35')        #res_rvax.errorbar([i[0] for i in res_val],[i[4]-unmasked_rv[2] for i in res_val],[i[10][7] for i in res_val], color='blue', fmt='o',linestyle='--',capsize=5,label='Order 36')        #res_rvax.errorbar([i[0] for i in res_val],[i[5]-unmasked_rv[3] for i in res_val],[i[10][8] for i in res_val], fmt='o',linestyle='--',capsize=5,label='Order 37')            #res_rvax.set_ylabel('Radial Velocity difference (km/s)',fontsize=8)        res_loggax.set_title('Residual masked fit responses for all stars',fontsize=12)            res_loggax.errorbar([i[0] for i in res_val],[i[6]-float(cal_star_info[3]) for i in res_val],[i[10][1] for i in res_val], c=c,fmt='o',linestyle='--',capsize=5,label=starname)        #res_loggax.set_ylabel('Log g difference',fontsize=10)            res_mhax.errorbar([i[0] for i in res_val],[i[7]-float(cal_star_info[1]) for i in res_val],[i[10][2] for i in res_val], c=c,fmt='o',linestyle='--',capsize=5)        #res_mhax.set_ylabel('[M/H] difference',fontsize=10)        res_alphaax.errorbar([i[0] for i in res_val],[i[8]-float(cal_star_info[4]) for i in res_val],[i[10][3] for i in res_val], c=c,fmt='o',linestyle='--',capsize=5)        #res_alphaax.set_ylabel('$\alpha$ difference',fontsize=10)        res_teffax.errorbar([i[0] for i in res_val],[i[9]-float(cal_star_info[2]) for i in res_val],[i[10][0] for i in res_val], c=c,fmt='o',linestyle='--',capsize=5)        #res_teffax.set_ylabel('$T_{eff}$ difference(K)',fontsize=10)        #res_lenax.plot([i[0] for i in res_val],[i[1] for i in res_val], color='black')        #res_lenax.set_xlabel('Residual cutoff',fontsize=12)        #res_lenax.set_ylabel('# points masked',fontsize=12)            #res_rvax.invert_xaxis()        res_loggax.invert_xaxis()        res_loggax.set_ylim(-2,3.5)                res_mhax.invert_xaxis()        res_mhax.set_ylim(-1.5,0.7)                res_alphaax.invert_xaxis()        res_alphaax.set_ylim(-0.5,1.)                res_teffax.invert_xaxis()        res_teffax.set_ylim(-2000,500)                print "see s_l cuts here:", [i[0] for i in sl_val]        #res_lenax.invert_xaxis()        #if j ==0:            #res_lenax.axhline(y=970*4, color='k',linestyle='--', label='Total number of data points')    for ax in allax:        ax.axhline(y=0.0, color='y',linestyle='--',label='APOGEE value')    #res_rvax.legend(bbox_to_anchor=(0.95,0.75), fontsize=10)    plt.rc('xtick',labelsize=10)    plt.rc('ytick',labelsize=10)    plt.rc('axes',labelsize=12)    avg_fit,sl_avg = get_averages_sl(starname_list)    sl_teffax.plot(sl_avg,[i[0] for i in avg_fit],label = 'Average')    sl_loggax.plot(sl_avg,[i[1] for i in avg_fit])    sl_mhax.plot(sl_avg,[i[2] for i in avg_fit])    sl_alphaax.plot(sl_avg,[i[3] for i in avg_fit])    res_loggax.plot([],[],label = 'Average')    res_loggax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=11)    sl_teffax.set_xlabel('$S_{\lambda}$ lower bound')    res_teffax.set_xlabel('Residual cutoff')    if savefig:        plt.savefig('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36-37/sl-res_response_plot_all_082819.png')    plt.show()def master_sl_plot():    cal_stars = ['NGC6791_J19205+3748282', 'NGC6791_J19213390+3750202', \                 'NGC6819_J19413439+4017482','M71_J19534827+1848021', \                 'M5 J15190+0208','TYC 3544','NGC6819_J19411+4010517']    spec='/u/ghezgroup/data/metallicity/nirspec/spectra/'    g = load_full_grid()    res_param_info = []    sl_param_info = []        for star in cal_stars:        res_val, combined_data_mask_model = residual_masked_param_info(star,g,specdir=spec,snr=30.,nnorm=2)        res_param_info += [res_val]        sl_val, combined_data_mask_model = sl_masked_param_info(star,g,specdir=spec,snr=30.,nnorm=2)        sl_param_info += [sl_val]    plot_sl_res_response_allstar(sl_param_info,res_param_info,cal_stars, savefig=True)def get_averages_sl(starname_list):        avgs = []        sl_vals = []        cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1,dtype=None))        for sl in range(10):        teff = []        logg = []        mh = []        alpha = []        h5_files = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_'+str(float(sl))+'_*_order34-36_phoenix.h5')                        for filename in h5_files:            for starname in starname_list:                if starname in filename:                    star_ind = [x[0] for x in cal_star_info_all].index(starname)                    cal_star_info = cal_star_info_all[star_ind]                    gc_result = MultiNestResult.from_hdf5(filename)            teff += [gc_result.median['teff_0']-float(cal_star_info[2])]            logg += [gc_result.median['logg_0']-float(cal_star_info[3])]            mh += [gc_result.median['mh_0']-float(cal_star_info[1])]            alpha += [gc_result.median['alpha_0']-float(cal_star_info[4])]            avgs += [[np.mean(teff),np.mean(logg),np.mean(mh),np.mean(alpha)]]    return avgs, range(10)def get_averages_res(starname_list):    avgs = []    sl_vals = []    cal_star_info_all = list(        scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    for sl in np.arange(0.025, 0.2, 0.025):        teff = []        logg = []        mh = []        alpha = []        h5_files = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/masked_res_cutoff_' + str(float(sl)) + '_*_order34-36_phoenix.h5')        for filename in h5_files:            for starname in starname_list:                if starname in filename:                    star_ind = [x[0] for x in cal_star_info_all].index(starname)                    cal_star_info = cal_star_info_all[star_ind]            gc_result = MultiNestResult.from_hdf5(filename)            teff += [gc_result.median['teff_0'] - float(cal_star_info[2])]            logg += [gc_result.median['logg_0'] - float(cal_star_info[3])]            mh += [gc_result.median['mh_0'] - float(cal_star_info[1])]            alpha += [gc_result.median['alpha_0'] - float(cal_star_info[4])]        avgs += [[np.mean(teff), np.mean(logg), np.mean(mh), np.mean(alpha)]]    return avgs, np.arange(0.025, 0.2, 0.025)def get_apogee_deltas(starname):    cal_star_info = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    print [x[0] for x in cal_star_info]    if starname in [x[0] for x in cal_star_info]:        print starname + ' is a calibrator star'        star_ind = [x[0] for x in cal_star_info].index(starname)        cal_star_info = cal_star_info[star_ind]    pho_3_order_fitpath = '/u/ghezgroup/data/metallicity/nirspec/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_0.0_'+starname+'_order34-36.h5'    pho_4_order_fitpath = '/u/ghezgroup/data/metallicity/nirspec/spectra_fits/masked_fit_results/orders34-35-36-37/masked_sl_cutoff_0.0_'+starname+'_order34-37.h5'    bosz_3_order_fitpath = '/u/ghezgroup/data/metallicity/nirspec/spectra_fits/masked_fit_results/orders34-35-36/mh_masked_sl_cutoff_0.0_'+starname+'_order34-36_bosz.h5'    bosz_4_order_fitpath = '/u/ghezgroup/data/metallicity/nirspec/spectra_fits/masked_fit_results/orders34-35-36-37/mh_masked_sl_cutoff_0.0_'+starname+'_order34-37_bosz_order37trimmed.h5'    pho_3_order_fit = MultiNestResult.from_hdf5(pho_3_order_fitpath)    pho_4_order_fit = MultiNestResult.from_hdf5(pho_4_order_fitpath)    bosz_3_order_fit = MultiNestResult.from_hdf5(bosz_3_order_fitpath)    bosz_4_order_fit = MultiNestResult.from_hdf5(bosz_4_order_fitpath)    print pho_3_order_fit, pho_3_order_fitpath    print pho_4_order_fit, pho_4_order_fitpath    print bosz_3_order_fit, bosz_3_order_fitpath    print bosz_4_order_fit, bosz_4_order_fitpath    f = open('/u/ghezgroup/data/metallicity/nirspec/calibrator_param_offsets.tsv','a+')    f.write(starname+'\t'+str(pho_3_order_fit.median['teff_0']-cal_star_info[2])+'\t'+str(pho_3_order_fit.median['logg_0']-cal_star_info[3])+'\t'+str(pho_3_order_fit.median['mh_0']-cal_star_info[1])\            +'\t' + str(pho_3_order_fit.median['alpha_0'] - cal_star_info[4]))    f.write('\t'+str(pho_4_order_fit.median['teff_0']-cal_star_info[2])+'\t'+str(pho_4_order_fit.median['logg_0']-cal_star_info[3])+'\t'+str(pho_4_order_fit.median['mh_0']-cal_star_info[1])\            +'\t' + str(pho_4_order_fit.median['alpha_0'] - cal_star_info[4]))    f.write('\t'+str(bosz_3_order_fit.median['teff_0']-cal_star_info[2])+'\t'+str(bosz_3_order_fit.median['logg_0']-cal_star_info[3])+'\t'+str(bosz_3_order_fit.median['mh_0']-cal_star_info[1])\            +'\t' + str(bosz_3_order_fit.median['alpha_0'] - cal_star_info[4]))    f.write('\t'+str(bosz_4_order_fit.median['teff_0']-cal_star_info[2])+'\t'+str(bosz_4_order_fit.median['logg_0']-cal_star_info[3])+'\t'+str(bosz_4_order_fit.median['mh_0']-cal_star_info[1])\            +'\t' + str(bosz_4_order_fit.median['alpha_0'] - cal_star_info[4])+'\n')    f.close()def get_apogee_deltas_masked(starname):    cal_star_info = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    print [x[0] for x in cal_star_info]    if starname in [x[0] for x in cal_star_info]:        print starname + ' is a calibrator star'        star_ind = [x[0] for x in cal_star_info].index(starname)        cal_star_info = cal_star_info[star_ind]    sl_fitpath = '/u/ghezgroup/data/metallicity/nirspec/spectra_fits/masked_fit_results/orders34-35-36-37/masked_sl_cutoff_6.0_'+starname+'_order34-37.h5'    res_fitpath = '/u/ghezgroup/data/metallicity/nirspec/spectra_fits/masked_fit_results/orders34-35-36-37/masked_res_cutoff_0.15_'+starname+'_order34-37.h5'    sl_fit = MultiNestResult.from_hdf5(sl_fitpath)    res_fit = MultiNestResult.from_hdf5(res_fitpath)    f = open('/u/ghezgroup/data/metallicity/nirspec/calibrator_param_offsets_masking.tsv','a+')    f.write(starname+'\t'+str(sl_fit.median['teff_0']-cal_star_info[2])+'\t'+str(sl_fit.median['logg_0']-cal_star_info[3])+'\t'+str(sl_fit.median['mh_0']-cal_star_info[1])\            +'\t' + str(sl_fit.median['alpha_0'] - cal_star_info[4]))    f.write('\t'+str(res_fit.median['teff_0']-cal_star_info[2])+'\t'+str(res_fit.median['logg_0']-cal_star_info[3])+'\t'+str(res_fit.median['mh_0']-cal_star_info[1])\            +'\t' + str(res_fit.median['alpha_0'] - cal_star_info[4])+'\n')    f.close()def plot_apogee_deltas(xparam, yparam):    cal_star_offsets = list(scipy.genfromtxt('/u/rbentley/metallicity/calibrator_param_offsets.tsv', delimiter='\t', skip_header=2,\                         dtype=None))    if yparam is 'mh':        yind = [3,7,11,15,19,23]        xind = 27        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = '[M/H]'    elif yparam is 'teff':        yind = [1,5,9,13,17,21]        xind = 25        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = '$T_{eff}$'    elif yparam is 'logg':        yind = [2,6,10,14,18,22]        xind = 26        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = 'log g'    elif yparam is 'alpha':        yind = [4,8,12,16,20,24]        xind = 28        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = '[$\\alpha$/Fe]'    if xparam is 'mh':        xind = 27        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = '[M/H]'    elif xparam is 'teff':        xind = 25        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = '$T_{eff}$'    elif xparam is 'logg':        xind = 26        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = 'log g'    elif xparam is 'alpha':        xind = 28        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = '[$\\alpha$/Fe]'    plt.plot(xvals,yvals[0], color='#FF0303',label="PHOENIX grid, using 3 orders",marker='o')    plt.plot(xvals,yvals[1], color='#F5A182',label="PHOENIX grid, using 4 orders",marker='o')    plt.plot(xvals, yvals[2], color='#0394FF',label="BOSZ grid, using 3 orders",marker='o')    plt.plot(xvals, yvals[3], color='#52D1DE',label="BOSZ grid, using 4 orders",marker='o')    #plt.axhline(y=np.mean(yvals[0]), color='#FF0303',label="PHOENIX 3 order offset average", linestyle='--')    #plt.axhline(y=np.mean(yvals[1]), color='#F5A182',label="PHOENIX 4 order offset average", linestyle='--')    #plt.axhline(y=np.mean(yvals[2]), color='#0394FF',label="BOSZ 3 order offset average", linestyle='--')    #plt.axhline(y=np.mean(yvals[3]), color='#52D1DE',label="BOSZ 4 order offset average", linestyle='--')    plt.axhline(y=0., color='k', linestyle='--')    plt.xlabel("APOGEE "+xlabel)    plt.ylabel("Best fit "+ylabel+" - APOGEE "+ylabel)    plt.title("Best fit offset "+ylabel+" vs APOGEE "+xlabel+' (varying grids, fitted orders)')    plt.legend()    plt.show()def plot_apogee_deltas_masked(xparam, yparam):    cal_star_offsets = list(scipy.genfromtxt('/u/rbentley/metallicity/calibrator_param_offsets.tsv', delimiter='\t', skip_header=2,\                         dtype=None))    if yparam is 'mh':        yind = [3,7,11,15,19,23]        xind = 27        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = '[M/H]'    elif yparam is 'teff':        yind = [1,5,9,13,17,21]        xind = 25        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = '$T_{eff}$'    elif yparam is 'logg':        yind = [2,6,10,14,18,22]        xind = 26        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = 'log g'    elif yparam is 'alpha':        yind = [4,8,12,16,20,24]        xind = 28        yvals = []        cal_star_offsets.sort(key= lambda x: x[xind])        for p in yind: yvals += [[x[p] for x in cal_star_offsets]]        xvals = [x[xind] for x in cal_star_offsets]        ylabel = '[$\\alpha$/Fe]'    if xparam is 'mh':        xind = 27        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = '[M/H]'    elif xparam is 'teff':        xind = 25        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = '$T_{eff}$'    elif xparam is 'logg':        xind = 26        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = 'log g'    elif xparam is 'alpha':        xind = 28        cal_star_offsets.sort(key= lambda x: x[xind])        xvals = [x[xind] for x in cal_star_offsets]        xlabel = '[$\\alpha$/Fe]'    plt.plot(xvals,yvals[1], color='#F5A182',label="Unmasked PHOENIX grid",marker='o')    plt.plot(xvals, yvals[4], color='#FD297E',label="Least sensitive regions masked",marker='o')    plt.plot(xvals, yvals[5], color='#E6F11C',label="Highest residual regions masked",marker='o')    #plt.axhline(y=np.mean(yvals[0]), color='#FF0303',label="PHOENIX 3 order offset average", linestyle='--')    #plt.axhline(y=np.mean(yvals[1]), color='#F5A182',label="PHOENIX 4 order offset average", linestyle='--')    #plt.axhline(y=np.mean(yvals[2]), color='#0394FF',label="BOSZ 3 order offset average", linestyle='--')    #plt.axhline(y=np.mean(yvals[3]), color='#52D1DE',label="BOSZ 4 order offset average", linestyle='--')    plt.axhline(y=0., color='k', linestyle='--')    plt.xlabel("APOGEE "+xlabel)    plt.ylabel("Best fit "+ylabel+" - APOGEE "+ylabel)    plt.title("Best fit offset "+ylabel+" vs APOGEE "+xlabel+' (varying masks)')    plt.legend()    plt.show()def make_offset_plot_k_band_unmasked(grids=None):    snr = 30.    outputpath = 'umasked_only'    result_title = 'BOSZ-PHOENIX'    if not os.path.exists('/u/rbentley/localcompute/fitting_plots/'+outputpath):        os.mkdir('/u/rbentley/localcompute/fitting_plots/'+outputpath)    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[0:-1]]    bosz_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    ap_values = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    chi2_vals = []    if grids is not None:        phoenix = grids[0]        bosz = grids[1]    else:        phoenix = load_full_grid_phoenix()        bosz = load_full_grid_bosz()    for name in cal_star_names:        star_ind = cal_star_names.index(name)        cal_star_info = cal_star_info_all[star_ind]        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/sl_masked/mh_masked_sl_cutoff_0.0_' + name + '_order34-36_bosz_adderr.h5')        phoenix_result = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/PHOENIX_fits/sl_masked/mh_masked_sl_cutoff_0.0_' + name + '_order34-36_phoenix_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        bosz_sigmas['teff'] += [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2)]        bosz_sigmas['logg'] += [np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2)]        bosz_sigmas['mh'] += [np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2)]        bosz_sigmas['alpha'] += [np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        bosz_sigmas_one = [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\                           np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\                           np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\                           np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        bosz_sigmas_one = np.around(bosz_sigmas_one, decimals=2)        print bosz_sigmas_one, cal_star_info        phoenix_bounds = phoenix_result.calculate_sigmas(1)        phoenix_sigmas['teff'] += [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2)]        phoenix_sigmas['logg'] += [np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2)]        phoenix_sigmas['mh'] += [np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2)]        phoenix_sigmas['alpha'] += [np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        phoenix_sigmas_one = [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\                           np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\                           np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\                           np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        bosz_offsets['teff'] += [bosz_result.median['teff_0']-cal_star_info[2]]        bosz_offsets['logg'] += [bosz_result.median['logg_0']-cal_star_info[3]]        bosz_offsets['mh'] += [bosz_result.median['mh_0']-cal_star_info[1]]        bosz_offsets['alpha'] += [bosz_result.median['alpha_0']-cal_star_info[4]]        phoenix_offsets['teff'] += [phoenix_result.median['teff_0']-cal_star_info[2]]        phoenix_offsets['logg'] += [phoenix_result.median['logg_0']-cal_star_info[3]]        phoenix_offsets['mh'] += [phoenix_result.median['mh_0']-cal_star_info[1]]        phoenix_offsets['alpha'] += [phoenix_result.median['alpha_0']-cal_star_info[4]]        file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*.dat')        file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*.dat')        file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*.dat')        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]        waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]        waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)        starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit        starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit        starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, bosz)        pmodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, phoenix)        amodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, bosz)        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        bw1, bf1, bw2, bf2, bw3, bf3 = bmodel()        bosz_res1 = starspectrum34.flux.value - bf1        bosz_res2 = starspectrum35.flux.value - bf2        bosz_res3 = starspectrum36.flux.value - bf3        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1)+len(bosz_res2)+len(bosz_res3))        for a in phoenix_result.median.keys():            setattr(pmodel, a, phoenix_result.median[a])        pw1, pf1, pw2, pf2, pw3, pf3 = pmodel()        phoenix_res1 = starspectrum34.flux.value - pf1        phoenix_res2 = starspectrum35.flux.value - pf2        phoenix_res3 = starspectrum36.flux.value - pf3        phoenix_chi2 = np.sum((phoenix_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        phoenix_chi2 = phoenix_chi2 + np.sum((phoenix_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        phoenix_chi2 = phoenix_chi2 + np.sum((phoenix_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        phoenix_chi2 = phoenix_chi2 / (len(phoenix_res1) + len(phoenix_res2) + len(phoenix_res3))        setattr(amodel, 'teff_0', cal_star_info[2])        setattr(amodel, 'logg_0', cal_star_info[3])        setattr(amodel, 'mh_0', cal_star_info[1])        setattr(amodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = amodel()        apogee_res1 = starspectrum34.flux.value - af1        apogee_res2 = starspectrum35.flux.value - af2        apogee_res3 = starspectrum36.flux.value - af3        apogee_chi2 = np.sum((apogee_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 / (len(apogee_res1) + len(apogee_res2) + len(apogee_res3))        chi2_vals += [(np.round_(bosz_chi2,decimals=2),np.round_(phoenix_chi2,decimals=2),np.round_(apogee_chi2,decimals=2))]        ap_values['teff'] += [cal_star_info[2]]        ap_values['logg'] += [cal_star_info[3]]        ap_values['mh'] += [cal_star_info[1]]        ap_values['alpha'] += [cal_star_info[4]]    for a in phoenix_offsets.keys():        phoenix_offsets[a] = np.array(phoenix_offsets[a])        phoenix_sigmas[a] = np.array(phoenix_sigmas[a])        bosz_offsets[a] = np.array(bosz_offsets[a])        bosz_sigmas[a] = np.array(bosz_sigmas[a])        ap_values[a] = np.array(ap_values[a])    fig, ax = plt.subplots(nrows=len(bosz_offsets.keys())+1, ncols=1,figsize=(16, 12))    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    x_axis_b = bosz_offsets['teff']    x_axis_p = phoenix_offsets['teff']    x_axis_b = np.array([float(i) for i in x_axis_b])    x_axis_p = np.array([float(i) for i in x_axis_p])    for i in range(len(ax)-1):        ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)        ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        ppopt_c, ppcov_c = curve_fit(constant_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        #ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=bosz_sigmas[phoenix_offsets.keys()[i]], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)        bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        bpopt_c, bpcov_c = curve_fit(constant_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        xmin, xmax = ax[i].get_xlim()        ymin, ymax = ax[i].get_ylim()        ax[i].plot(np.sort(x_axis_p),linear_fit(np.sort(x_axis_p), ppopt[0], ppopt[1]),color='#FF0000',ls='--',alpha=0.6, label = 'Linear fit')        #ax[i].plot(np.sort(x_axis_b),linear_fit(np.sort(x_axis_b), bpopt[0], bpopt[1]),color='#3349FF',ls='--',alpha=0.6)        ax[i].plot(np.sort(x_axis_p),np.ones(len(x_axis_p))*ppopt_c[0],color='#FF0000',ls=':',alpha=0.6, label = 'Constant fit')        #ax[i].plot(np.sort(x_axis_b),np.ones(len(x_axis_b))*bpopt2[0],color='#3349FF',ls=':',alpha=0.6)        fit_res_p = np.array(phoenix_offsets[phoenix_offsets.keys()[i]] - linear_fit(x_axis_p, ppopt[0], ppopt[1]))        chi2_p_fit = np.sum((fit_res_p)**2 / (phoenix_sigmas[phoenix_offsets.keys()[i]]**2))        chi2_p_fit_red = chi2_p_fit/(len(fit_res_p) - len(ppopt))        fit_res_b = np.array(bosz_offsets[bosz_offsets.keys()[i]] - linear_fit(x_axis_b, bpopt[0], bpopt[1]))        chi2_b_fit = np.sum((fit_res_b)**2 / bosz_sigmas[bosz_offsets.keys()[i]]**2)        chi2_b_fit_red = chi2_b_fit/(len(fit_res_b) - len(bpopt))        fit_res_p_c = np.array(phoenix_offsets[phoenix_offsets.keys()[i]] - constant_fit(x_axis_p, ppopt_c[0]))        chi2_p_fit_c = np.sum((fit_res_p_c)**2 / (phoenix_sigmas[phoenix_offsets.keys()[i]]**2))        chi2_p_fit_c_red = chi2_p_fit_c/(len(fit_res_p_c) - len(ppopt_c))        #fit_res_b2 = np.array(bosz_offsets[bosz_offsets.keys()[i]] - quad_fit(x_axis_b, bpopt2[0]))        #chi2_b_fit2 = np.sum((fit_res_b2)**2 / bosz_sigmas[bosz_offsets.keys()[i]]**2)        #chi2_b_fit2_red = chi2_b_fit2/(len(fit_res_b2) - len(bpopt2))        f_p = (chi2_p_fit_c - chi2_p_fit)        f_p = f_p/(len(ppopt) - len(ppopt_c))        f_p = f_p*(len(fit_res_p)-len(bpopt))/chi2_p_fit        print "PHOENIX linear chi2:", chi2_p_fit        print "PHOENIX linear reduced chi2:", chi2_p_fit_red        print "PHOENIX constant chi2:", chi2_p_fit_c        print "PHOENIX constant reduced chi2:", chi2_p_fit_c_red        print "PHOENIX F-test:", f_p        #f_b = ((chi2_b_fit2 - chi2_b_fit)/(len(bpopt) - len(bpopt2)))/(chi2_b_fit/(len(fit_res_b)-len(bpopt)))        '''        ax[i].text(xmax/1.2, ymin/1.,str(bosz_offsets.keys()[i])+' PHOENIX R-value: '+str(np.round_(pearsonr(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]])[0],decimals=3))+\                   '\nLinear reduced $\chi^2$: '+str(np.round_(chi2_p_fit,decimals=3))+'\nQuadratic reduced $\chi^2$: '+str(np.round_(chi2_p_fit2,decimals=3))+\                   '\nf-test ratio:'+str(np.round_(f_p,decimals=3))+'\nBOSZ R-value: '+\                   str(np.round_(pearsonr(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]])[0],decimals=3))+\                   '\nLinear reduced $\chi^2$: '+str(np.round_(chi2_b_fit,decimals=3))+'\nQuadratic reduced $\chi^2$: '+\                   str(np.round_(chi2_b_fit2,decimals=3))+'\nf-test ratio:'+str(np.round_(f_b,decimals=3)),fontsize=11, bbox=props)        '''        ax[i].text(xmax/1.4, ymin/1.,'PHOENIX Linear reduced $\chi^2$: '+str(np.round_(chi2_p_fit_red,decimals=3))+'\nConstant reduced $\chi^2$: '+str(np.round_(chi2_p_fit_c_red,decimals=3))+\                   '\nf-test ratio:'+str(np.round_(f_p,decimals=3)),fontsize=11, bbox=props)        #ax[i].errorbar(ap_values['mh'], two_offsets[two_offsets.keys()[i]], yerr=two_sigmas[two_offsets.keys()[i]], color='#33AFFF',marker='d',label='BOSZ grid, masked at S_l = 6.0',ls='none')        #connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])        ax[i].axhline(y=0., color='k', linestyle='--')    #ax[-1].plot(x_axis_b,[x[0] for x in chi2_vals], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)    ax[-1].plot(x_axis_p,[x[1] for x in chi2_vals],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    #connect_points(ax[-1], x_axis_b, x_axis_p, [x[0] for x in chi2_vals],    #               [x[1] for x in chi2_vals])    ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[len(ax)-1].set_xlabel('$T_{eff}$ offset ', fontsize=16)    ax[0].set_ylabel('log g offset', fontsize=16)    ax[1].set_ylabel(r'$\alpha$'+' offset', fontsize=16)    ax[2].set_ylabel('$T_{eff}$ offset', fontsize=16)    ax[3].set_ylabel('[M/H] offset', fontsize=16)    ax[0].legend(fontsize=12)    ax[0].set_title('Unmasked offsets for all stars vs $T_{eff}$ offset')    plt.show()    #plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offsets_delta_teff.png')    plt.cla()    fig, ax = plt.subplots(nrows=len(bosz_offsets.keys())+1, ncols=1,figsize=(16, 12))    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    x_axis_b = bosz_['teff']    x_axis_p = phoenix_offsets['teff']    x_axis_b = np.array([float(i) for i in x_axis_b])    x_axis_p = np.array([float(i) for i in x_axis_p])    for i in range(len(ax)-1):        ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=bosz_sigmas[phoenix_offsets.keys()[i]], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)        bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        bpopt_c, bpcov_c = curve_fit(constant_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        xmin, xmax = ax[i].get_xlim()        ymin, ymax = ax[i].get_ylim()        ax[i].plot(np.sort(x_axis_b),linear_fit(np.sort(x_axis_b), bpopt[0], bpopt[1]),color='#3349FF',ls='--',alpha=0.6, label = 'Linear fit')        ax[i].plot(np.sort(x_axis_b),np.ones(len(x_axis_b))*bpopt_c[0],color='#3349FF',ls=':',alpha=0.6, label = 'Constant fit')        fit_res_b = np.array(bosz_offsets[bosz_offsets.keys()[i]] - linear_fit(x_axis_b, bpopt[0], bpopt[1]))        chi2_b_fit = np.sum((fit_res_b)**2 / bosz_sigmas[bosz_offsets.keys()[i]]**2)        chi2_b_fit_red = chi2_b_fit/(len(fit_res_b) - len(bpopt))        fit_res_b_c = np.array(bosz_offsets[bosz_offsets.keys()[i]] - quad_fit(x_axis_b, bpopt_c[0]))        chi2_b_fit_c = np.sum((fit_res_b_c)**2 / bosz_sigmas[bosz_offsets.keys()[i]]**2)        chi2_b_fit_c_red = chi2_b_fit_c/(len(fit_res_b_c) - len(bpopt_c))        f_b = (chi2_b_fit_c - chi2_b_fit)        f_b = f_b/(len(bpopt) - len(bpopt_c))        f_b = f_b*(len(fit_res_b)-len(bpopt))/chi2_b_fit        print "BOSZ linear chi2:", chi2_b_fit        print "BOSZ linear reduced chi2:", chi2_b_fit_red        print "BOSZ constant chi2:", chi2_b_fit_c        print "BOSZ constant reduced chi2:", chi2_b_fit_c_red        print "BOSZ F-test:", f_b        ax[i].text(xmax/1.4, ymin/1.,'BOSZ Linear reduced $\chi^2$: '+str(np.round_(chi2_b_fit_red,decimals=3))+'\nConstant reduced $\chi^2$: '+str(np.round_(chi2_b_fit_c_red,decimals=3))+\                   '\nf-test ratio:'+str(np.round_(f_b,decimals=3)),fontsize=11, bbox=props)        ax[i].axhline(y=0., color='k', linestyle='--')    ax[-1].plot(x_axis_b,[x[0] for x in chi2_vals], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)    #ax[-1].plot(x_axis_p,[x[1] for x in chi2_vals],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    #connect_points(ax[-1], x_axis_b, x_axis_p, [x[0] for x in chi2_vals],    #               [x[1] for x in chi2_vals])    ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[len(ax)-1].set_xlabel('$T_{eff}$ offset ', fontsize=16)    ax[0].set_ylabel('log g offset', fontsize=16)    ax[1].set_ylabel(r'$\alpha$'+' offset', fontsize=16)    ax[2].set_ylabel('$T_{eff}$ offset', fontsize=16)    ax[3].set_ylabel('[M/H] offset', fontsize=16)    ax[0].legend(fontsize=12)    ax[0].set_title('Unmasked offsets for all stars vs $T_{eff}$ offset')    plt.show()def linear_fit(x,m,b):    return m*x + bdef constant_fit(x,c):    return cdef connect_points(ax,x1,x2,y1,y2):    for i in range(len(x1)):        ax.plot([x1[i],x2[i]],[y1[i],y2[i]], color='k', alpha=0.4,linestyle='--')def make_fit_result_plots_k_band_three_order(fitpath, new_r=None, added_noise=None):    snr = 30.    if 'bosz' in fitpath:        g = load_full_grid_bosz()    else:        g = load_full_grid_phoenix()    outputpath = fitpath.split('/')[-1]    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[0:-1]]    files = []    for name in cal_star_names:        files += [fitpath.replace('*',name)]    if not os.path.exists('/u/rbentley/localcompute/fitting_plots/'+outputpath):        os.mkdir('/u/rbentley/localcompute/fitting_plots/'+outputpath)    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[0:-1]]    offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    ap_values = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    chi2_vals = []    for filepath in files:        if '2MJ18113-30441' in filepath:            continue        result_title = filepath.split('/')[-1]        result_title.replace('.h5', '')        print filepath        for name in cal_star_names:            if name in filepath:                starname = name                star_ind = cal_star_names.index(starname)                cal_star_info = cal_star_info_all[star_ind]                print starname, cal_star_info        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + starname + '_order34-36_bosz_adderr.h5')        phoenix_result = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/PHOENIX_fits/sl_masked/mh_masked_sl_cutoff_0.0_' + starname + '_order34-36_phoenix_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        bosz_sigmas['teff'] += [(bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2]        bosz_sigmas['logg'] += [(bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2]        bosz_sigmas['mh'] += [(bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2]        bosz_sigmas['alpha'] += [(bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2]        phoenix_bounds = phoenix_result.calculate_sigmas(1)        phoenix_sigmas['teff'] += [(phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2]        phoenix_sigmas['logg'] += [(phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2]        phoenix_sigmas['mh'] += [(phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2]        phoenix_sigmas['alpha'] += [(phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2]        bosz_offsets['teff'] += [bosz_result.median['teff_0']-cal_star_info[2]]        bosz_offsets['logg'] += [bosz_result.median['logg_0']-cal_star_info[3]]        bosz_offsets['mh'] += [bosz_result.median['mh_0']-cal_star_info[1]]        bosz_offsets['alpha'] += [bosz_result.median['alpha_0']-cal_star_info[4]]        phoenix_offsets['teff'] += [phoenix_result.median['teff_0']-cal_star_info[2]]        phoenix_offsets['logg'] += [phoenix_result.median['logg_0']-cal_star_info[3]]        phoenix_offsets['mh'] += [phoenix_result.median['mh_0']-cal_star_info[1]]        phoenix_offsets['alpha'] += [phoenix_result.median['alpha_0']-cal_star_info[4]]        result = MultiNestResult.from_hdf5(filepath)        bounds = result.calculate_sigmas(1)        file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order34*.dat')        file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order35*.dat')        file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order36*.dat')        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]        waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]        waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)        starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit        starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit        starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit        if added_noise is not None:            noise1 = np.random.normal(0., added_noise, len(starspectrum34.wavelength.value))            starspectrum34_flux_noise = starspectrum34.flux.value + noise1            starspectrum34 = Spectrum1D.from_array(dispersion=starspectrum34.wavelength.value,                                                   flux=starspectrum34_flux_noise, dispersion_unit=u.angstrom,                                                   uncertainty=starspectrum34.uncertainty.value)            noise2 = np.random.normal(0., added_noise, len(starspectrum35.wavelength.value))            starspectrum35_flux_noise = starspectrum35.flux.value + noise2            starspectrum35 = Spectrum1D.from_array(dispersion=starspectrum35.wavelength.value,                                                   flux=starspectrum35_flux_noise, dispersion_unit=u.angstrom,                                                   uncertainty=starspectrum35.uncertainty.value)            noise3 = np.random.normal(0., added_noise, len(starspectrum36.wavelength.value))            starspectrum36_flux_noise = starspectrum36.flux.value + noise3            starspectrum36 = Spectrum1D.from_array(dispersion=starspectrum36.wavelength.value,                                                   flux=starspectrum36_flux_noise, dispersion_unit=u.angstrom,                                                   uncertainty=starspectrum36.uncertainty.value)        if new_r is not None:            del_w1 = starspectrum34.wavelength.value[0] / (                        starspectrum34.wavelength.value[1] - starspectrum34.wavelength.value[0])            sigma1 = del_w1 / new_r / (2 * np.sqrt(2 * np.log(2)))            conv_f1 = nd.gaussian_filter1d(starspectrum34.flux.value, sigma1)            starspectrum34 = Spectrum1D.from_array(dispersion=starspectrum34.wavelength.value, flux=conv_f1,                                                dispersion_unit=u.angstrom,                                                uncertainty=starspectrum34.uncertainty.value)            del_w2 = starspectrum35.wavelength.value[0] / (                        starspectrum35.wavelength.value[1] - starspectrum35.wavelength.value[0])            sigma2 = del_w2 / new_r / (2 * np.sqrt(2 * np.log(2)))            conv_f2 = nd.gaussian_filter1d(starspectrum35.flux.value, sigma2)            starspectrum35 = Spectrum1D.from_array(dispersion=starspectrum35.wavelength.value, flux=conv_f2,                                                dispersion_unit=u.angstrom,                                                uncertainty=starspectrum35.uncertainty.value)            del_w3 = starspectrum36.wavelength.value[0] / (                        starspectrum36.wavelength.value[1] - starspectrum36.wavelength.value[0])            sigma3 = del_w3 / new_r / (2 * np.sqrt(2 * np.log(2)))            conv_f3 = nd.gaussian_filter1d(starspectrum36.flux.value, sigma3)            starspectrum36 = Spectrum1D.from_array(dispersion=starspectrum36.wavelength.value, flux=conv_f3,                                                dispersion_unit=u.angstrom,                                                uncertainty=starspectrum36.uncertainty.value)            model = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g, convolve=new_r)        else:            #model = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, g)            interp1 = Interpolate(starspectrum34)            #convolve1 = InstrumentConvolveGrating.from_grid(g, R=result.median['R_6'])#R=24000            convolve1 = starkit.base.operations.spectrograph.InstrumentDeltaLambdaConstant.from_grid(g, delta_lambda=0.961)            rot1 = RotationalBroadening.from_grid(g, vrot=np.array([10.0]))            norm1 = Normalize(starspectrum34, 2)            interp2 = Interpolate(starspectrum35)            #convolve2 = InstrumentConvolveGrating.from_grid(g, R=result.median['R_7'])            convolve2 = starkit.base.operations.spectrograph.InstrumentDeltaLambdaConstant.from_grid(g, delta_lambda=0.961)            norm2 = Normalize(starspectrum35, 2)            interp3 = Interpolate(starspectrum36)            #convolve3 = InstrumentConvolveGrating.from_grid(g, R=result.median['R_8'])            convolve3 = starkit.base.operations.spectrograph.InstrumentDeltaLambdaConstant.from_grid(g, delta_lambda=0.961)            norm3 = Normalize(starspectrum36, 2)            model = g | rot1 | Splitter3() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \                    convolve1 & convolve2 & convolve3 | interp1 & interp2 & interp3 | \                    norm1 & norm2 & norm3        for a in result.median.keys():            setattr(model, a, result.median[a])        bmodel = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g)        pmodel = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g)        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        print bosz_result        print result        bw1, bf1, bw2, bf2, bw3, bf3 = bmodel()        bosz_res1 = starspectrum34.flux.value - bf1        bosz_res2 = starspectrum35.flux.value - bf2        bosz_res3 = starspectrum36.flux.value - bf3        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 + np.sum((bosz_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 + np.sum((bosz_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1) + len(bosz_res2) + len(bosz_res3))        setattr(pmodel, 'teff_0', phoenix_result.median['teff_0'])        setattr(pmodel, 'logg_0', phoenix_result.median['logg_0'])        setattr(pmodel, 'mh_0', phoenix_result.median['mh_0'])        setattr(pmodel, 'alpha_0', phoenix_result.median['alpha_0'])        pw1, pf1, pw2, pf2, pw3, pf3 = pmodel()        phoenix_res1 = starspectrum34.flux.value - pf1        phoenix_res2 = starspectrum35.flux.value - pf2        phoenix_res3 = starspectrum36.flux.value - pf3        phoenix_chi2 = np.sum((phoenix_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        phoenix_chi2 = phoenix_chi2 + np.sum((phoenix_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        phoenix_chi2 = phoenix_chi2 + np.sum((phoenix_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        phoenix_chi2 = phoenix_chi2 / (len(phoenix_res1) + len(phoenix_res2) + len(phoenix_res3))        deltas = [result.median['teff_0'] - cal_star_info[2], result.median['logg_0'] - cal_star_info[3],                  result.median['mh_0'] - cal_star_info[1], result.median['alpha_0'] - cal_star_info[4]]        deltas = np.around(deltas,decimals=2)        offsets['teff'] += [deltas[0]]        offsets['logg'] += [deltas[1]]        offsets['mh'] += [deltas[2]]        offsets['alpha'] += [deltas[3]]        sigmas['teff'] += [(bounds['teff_0'][1]-bounds['teff_0'][0])/2]        sigmas['logg'] += [(bounds['logg_0'][1]-bounds['logg_0'][0])/2]        sigmas['mh'] += [(bounds['mh_0'][1]-bounds['mh_0'][0])/2]        sigmas['alpha'] += [(bounds['alpha_0'][1]-bounds['alpha_0'][0])/2]        sigmas_one = [np.sqrt(((bounds['teff_0'][1]-bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\                           np.sqrt(((bounds['logg_0'][1]-bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\                           np.sqrt(((bounds['mh_0'][1]-bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\                           np.sqrt(((bounds['alpha_0'][1]-bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        sigmas_one = np.around(sigmas_one, decimals=2)        w1, f1, w2, f2, w3, f3 = model()        res1 = starspectrum34.flux.value - f1        res2 = starspectrum35.flux.value - f2        res3 = starspectrum36.flux.value - f3        chi2 = np.sum((res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        chi2 = chi2 + np.sum((res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        chi2 = chi2 + np.sum((res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        chi2 = chi2 / (len(res1) + len(res2) + len(res3))        setattr(bmodel, 'teff_0', cal_star_info[2])        setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', cal_star_info[1])        setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        apogee_res1 = starspectrum34.flux.value - af1        apogee_res2 = starspectrum35.flux.value - af2        apogee_res3 = starspectrum36.flux.value - af3        apogee_chi2 = np.sum((apogee_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 / (len(apogee_res1) + len(apogee_res2) + len(apogee_res3))        chi2_vals += [(chi2,bosz_chi2,phoenix_chi2,apogee_chi2)]        #result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+result_title+'_corner.png')        plt.clf()        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        plt.text(22090, 0.7,                 'APOGEE fitted parameters:\n$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$\alpha$:' + str(cal_star_info[4]) +'$\pm$'+ str(cal_star_info[9]) + '\n$\chi^2$ at APOGEE values:' + str(np.round_(apogee_chi2,decimals=2)),                 fontsize=12, bbox=props)        plt.text(22090, 0.45,                 'Fit offsets:\n$\Delta T_{eff}:$' + str(deltas[0]) +'$\pm$'+ str(sigmas_one[0]) + '\n$\Delta log g:$' + str(deltas[1]) +'$\pm$'+ str(sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(deltas[2]) +'$\pm$'+ str(sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(deltas[3]) +'$\pm$'+ str(sigmas_one[3]) + '\n$\chi^2$:' + str(np.round_(chi2,decimals=2)),                 fontsize=12, bbox=props)        plt.plot(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(bw2 / (bosz_result.median['vrad_4'] / 3e5 + 1.0), bf2, color='#33AFFF', label='Reference BOSZ Model/Residuals',linewidth=5.0)        plt.plot(bw2 / (bosz_result.median['vrad_4'] / 3e5 + 1.0), bosz_res2, color='#33AFFF',linewidth=5.0)        plt.plot(w2 / (result.median['vrad_4'] / 3e5 + 1.0), f2, color='#f09c37', label='Model/Residuals',linewidth=5.0)        plt.plot(w2 / (result.median['vrad_4'] / 3e5 + 1.0), res2, color='#f09c37',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21900,22100)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title('Constant d_lambda, rotational broadening fits and residuals for '+starname)        plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+result_title+'_spectrum.png')        plt.clf()        ap_values['teff'] += [cal_star_info[2]]        ap_values['logg'] += [cal_star_info[3]]        ap_values['mh'] += [cal_star_info[1]]        ap_values['alpha'] += [cal_star_info[4]]    fig, ax = plt.subplots(nrows=len(bosz_offsets.keys())+1, ncols=1,figsize=(16, 12))    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    x_axis_n = ap_values['mh']    x_axis_b = ap_values['mh']    x_axis_p = ap_values['mh']    x_axis_n = np.array([float(i) for i in x_axis_n])    x_axis_b = np.array([float(i) for i in x_axis_b])    x_axis_p = np.array([float(i) for i in x_axis_p])    for i in range(len(ax)-1):        b_stdev = np.std(bosz_offsets[bosz_offsets.keys()[i]])        b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in bosz_sigmas[bosz_offsets.keys()[i]]])        b_offset_mean = np.average(bosz_offsets[bosz_offsets.keys()[i]], weights=b_sigmas_stdev ** -2)        stdev = np.std(offsets[offsets.keys()[i]])        sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in sigmas[offsets.keys()[i]]])        offset_mean = np.average(offsets[offsets.keys()[i]], weights=sigmas_stdev ** -2)        #ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)        #ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        #ppopt2, ppcov2 = curve_fit(quad_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=bosz_sigmas[phoenix_offsets.keys()[i]], color='#3349FF',marker='.',label='Reference BOSZ grid',ls='none', markersize=24)        #bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        #bpopt2, bpcov2 = curve_fit(quad_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        ax[i].errorbar(x_axis_n, offsets[offsets.keys()[i]], yerr=sigmas[offsets.keys()[i]],color='#f09c37',marker='d',label='BOSZ grid, constant d_lambda',ls='none', markersize=18, alpha=0.5)        ax[i].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Reference mean offset')        ax[i].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                      color='#3349FF', alpha=0.2)        ax[i].axhline(y=offset_mean, color='#f09c37', linestyle='--', label='Constant d_lambda, mean offset')        ax[i].axhspan(offset_mean - stdev, offset_mean + stdev,                      color='#f09c37', alpha=0.2)        xmin, xmax = ax[i].get_xlim()        ymin, ymax = ax[i].get_ylim()        ax[i].text(0.45, ymin, 'Stdev:' + str(np.round_(b_stdev,decimals=2)) + '\nMasked stdev:' + str(np.round_(stdev,decimals=2))+ '\nMasked mean:' + str(np.round_(offset_mean,decimals=2)),fontsize=12, bbox=props)        '''        #ax[i].plot(np.sort(x_axis_p),linear_fit(np.sort(x_axis_p), ppopt[0], ppopt[1]),color='#FF0000',ls='--',alpha=0.8)        #ax[i].plot(np.sort(x_axis_b),linear_fit(np.sort(x_axis_b), bpopt[0], bpopt[1]),color='#3349FF',ls='--',alpha=0.8)        #ax[i].plot(np.sort(x_axis_p),quad_fit(np.sort(x_axis_p), ppopt2[0], ppopt2[1], ppopt2[2]),color='#FF0000',ls=':',alpha=0.8)        #ax[i].plot(np.sort(x_axis_b),quad_fit(np.sort(x_axis_b), bpopt2[0], bpopt2[1], ppopt2[2]),color='#3349FF',ls=':',alpha=0.8)        #chi2_p_fit = np.sum((phoenix_offsets[phoenix_offsets.keys()[i]] - linear_fit(x_axis_p, ppopt[0], ppopt[1]) /                             phoenix_sigmas[phoenix_offsets.keys()[i]]) ** 2) / (len(x_axis_p) - len(ppopt))        #chi2_b_fit = np.sum((bosz_offsets[bosz_offsets.keys()[i]] - linear_fit(x_axis_b, bpopt[0], bpopt[1]) /                             bosz_sigmas[bosz_offsets.keys()[i]]) ** 2) / (len(x_axis_b) - len(bpopt))        #chi2_p_fit2 = np.sum((phoenix_offsets[phoenix_offsets.keys()[i]] - quad_fit(x_axis_p, ppopt2[0], ppopt2[1], ppopt2[2]) /                             phoenix_sigmas[phoenix_offsets.keys()[i]]) ** 2) / (len(x_axis_p) - len(ppopt2))        #chi2_b_fit2 = np.sum((bosz_offsets[bosz_offsets.keys()[i]] - quad_fit(x_axis_b, bpopt2[0], bpopt2[1], bpopt2[2]) /                             bosz_sigmas[bosz_offsets.keys()[i]]) ** 2) / (len(x_axis_b) - len(bpopt2))        #ax[i].text(xmax/1.2, ymin/1.3,'PHOENIX R-value: '+str(np.round_(pearsonr(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]])[0],decimals=3))+\                   '\nLinear reduced $\chi^2$: '+str(chi2_p_fit)+'\nQuadratic reduced $\chi^2$: '+str(chi2_p_fit2)+'\nL/Q $\chi^2$ ratio:'+str(chi2_p_fit/chi2_p_fit2)+'\nBOSZ R-value: '+\                   str(np.round_(pearsonr(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]])[0],decimals=3))+\                   '\nLinear reduced $\chi^2$: '+str(chi2_b_fit)+'\nQuadratic reduced $\chi^2$: '+str(chi2_b_fit2)+'\nL/Q $\chi^2$ ratio:'+str(chi2_b_fit/chi2_b_fit2),fontsize=12, bbox=props)        #ax[i].errorbar(ap_values['mh'], two_offsets[two_offsets.keys()[i]], yerr=two_sigmas[two_offsets.keys()[i]], color='#33AFFF',marker='d',label='BOSZ grid, masked at S_l = 6.0',ls='none')        '''        #connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])        connect_points(ax[i],x_axis_b,x_axis_n, bosz_offsets[phoenix_offsets.keys()[i]],offsets[offsets.keys()[i]])        ax[i].axhline(y=0., color='k', linestyle='--')    #ax[-1].plot(x_axis_n,[x[0] for x in chi2_vals],color='#5cd85e',marker='d',label=outputpath,ls='none', markersize=10)    #ax[-1].plot(x_axis_b,[x[1] for x in chi2_vals], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)    #ax[-1].plot(x_axis_p,[x[2] for x in chi2_vals],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    ax[-1].plot(x_axis_p, [x[0] for x in chi2_vals],color='#f09c37',marker='d',ls='none', markersize=18)    ax[-1].plot(x_axis_b, [x[1] for x in chi2_vals], color='#3349FF',marker='.',ls='none', markersize=24)    ax[-1].plot(x_axis_b, [x[3] for x in chi2_vals], color='r',marker='.',label='Reference BOSZ grid at APOGEE values',ls='none', markersize=18)    #ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[len(ax)-1].set_xlabel('APOGEE [M/H]', fontsize=16)    ax[0].set_ylabel('log g offset', fontsize=16)    ax[1].set_ylabel(r'$\alpha$'+' offset', fontsize=16)    ax[2].set_ylabel('$T_{eff}$ offset', fontsize=16)    ax[3].set_ylabel('[M/H] offset', fontsize=16)    ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[0].legend(fontsize=10)    ax[-1].legend(fontsize=10)    ax[0].set_title('Offsets when constant d_lambda')    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offsets.png')    f_chi = plt.figure(1,figsize=(10, 7))    plt.axhline(y=0., color='k', linestyle='--')    plt.ylabel('Reduced $\chi^2$', fontsize=16)    plt.xlabel('APOGEE [M/H]', fontsize=16)    plt.legend(fontsize=12,loc='upper left')    plt.title('Reduced $\chi^2$ for constant d_lambda', fontsize=18)    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_chi2.png')def make_fit_result_plots_k_band_three_order_unmasked_only(grids=None, include_phoenix=False):    snr = 30.    outputpath = 'umasked_only'    result_title = 'BOSZ'    if not os.path.exists('/u/rbentley/localcompute/fitting_plots/'+outputpath):        os.mkdir('/u/rbentley/localcompute/fitting_plots/'+outputpath)    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    koa_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info_koa.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[:-1]]    koa_star_names = [x[0] for x in koa_star_info_all]    #fire_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info_fire.dat', delimiter='\t', skip_header=1, dtype=None))    #fire_star_info_all.sort(key=lambda x: x[1])    bosz_vals = {'teff': [], \                    'logg': [], \                    'mh': [], \                    'alpha': []}    bosz_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_vals = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    ap_values = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    koa_vals = {'teff': [], \                    'logg': [], \                    'mh': [], \                    'alpha': []}    koa_offsets = {'teff': [], \                   'logg': [], \                   'mh': [], \                   'alpha': []}    koa_sigmas = {'teff': [], \                  'logg': [], \                  'mh': [], \                  'alpha': []}    koa_ap_values = {'teff': [], \                     'logg': [], \                     'mh': [], \                     'alpha': []}    chi2_vals = []    koa_chi2_vals = []    if grids is not None:        #phoenix = grids[1]        bosz = grids[0]    else:        #phoenix = load_full_grid_phoenix()        bosz = load_full_grid_bosz()        #bosz = load_grid('/u/rbentley/metallicity/grids/bosz_t3500_7000_w15000_17000_R25000.h5')    print cal_star_names    for name in cal_star_names:        star_ind = cal_star_names.index(name)        cal_star_info = cal_star_info_all[star_ind]        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + name + '_order34-36_bosz_adderr.h5')        print bosz_result        bosz_bounds = bosz_result.calculate_sigmas(1)        bosz_result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_corner.png')        plt.clf()        bosz_sigmas['teff'] += [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2 + 25.**2)]        bosz_sigmas['logg'] += [np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2 + 0.1**2)]        bosz_sigmas['mh'] += [np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2 + 0.03**2)]        bosz_sigmas['alpha'] += [np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2 + 0.03**2)]        bosz_sigmas_one = [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2 + 25.**2), +\                           np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2 + 0.1**2), +\                           np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2 + 0.03**2),+\                           np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2 + 0.03**2)]        bosz_sigmas_one = np.around(bosz_sigmas_one, decimals=2)        if include_phoenix:            phoenix_result = MultiNestResult.from_hdf5(                '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/PHOENIX_fits/unmasked/' + name + '_order34-36_phoenix_R24000.0_adderr.h5')            phoenix_bounds = phoenix_result.calculate_sigmas(1)            phoenix_result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])            plt.savefig(                '/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + name + '_' + result_title + '_corner_phoenix.png')            plt.clf()            phoenix_sigmas['teff'] += [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2  + cal_star_info[7]**2 + 91.5**2)] #cal_star_info[7]            phoenix_sigmas['logg'] += [np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2 + 0.11**2)] #cal_star_info[8]            phoenix_sigmas['mh'] += [np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2 + 0.05**2)] #cal_star_info[6]            phoenix_sigmas['alpha'] += [np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2 + 0.05**2)] #cal_star_info[9]            phoenix_sigmas_one = [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2 + 91.5**2), +\                           np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2 + 0.1**2), +\                           np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2 + 0.03**2),+\                           np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2 + 0.03**2)]            phoenix_sigmas_one = np.around(phoenix_sigmas_one, decimals=2)            phoenix_vals['teff'] += [phoenix_result.median['teff_0']]            phoenix_vals['logg'] += [phoenix_result.median['logg_0']]            phoenix_vals['mh'] += [phoenix_result.median['mh_0']]            phoenix_vals['alpha'] += [phoenix_result.median['alpha_0']]            phoenix_offsets['teff'] += [phoenix_result.median['teff_0']-cal_star_info[2]]            phoenix_offsets['logg'] += [phoenix_result.median['logg_0']-cal_star_info[3]]            phoenix_offsets['mh'] += [phoenix_result.median['mh_0']-cal_star_info[1]]            phoenix_offsets['alpha'] += [phoenix_result.median['alpha_0']-cal_star_info[4]]        bosz_vals['teff'] += [bosz_result.median['teff_0']]        bosz_vals['logg'] += [bosz_result.median['logg_0']]        bosz_vals['mh'] += [bosz_result.median['mh_0']]        bosz_vals['alpha'] += [bosz_result.median['alpha_0']]        bosz_offsets['teff'] += [bosz_result.median['teff_0']-cal_star_info[2]]        bosz_offsets['logg'] += [bosz_result.median['logg_0']-cal_star_info[3]]        bosz_offsets['mh'] += [bosz_result.median['mh_0']-cal_star_info[1]]        bosz_offsets['alpha'] += [bosz_result.median['alpha_0']-cal_star_info[4]]        if name == '2MJ18113-30441':            file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*_nod2.dat')            file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*_nod2.dat')            file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*_nod2.dat')            starspectrum34 = mtf.read_nsdrp_txt(file1, desired_wavelength_units='Angstrom')            starspectrum35 = mtf.read_nsdrp_txt(file2, desired_wavelength_units='Angstrom')            starspectrum36 = mtf.read_nsdrp_txt(file3, desired_wavelength_units='Angstrom')            waverange34 = [np.amin(starspectrum34.wavelength.value[20:2000]),                           np.amax(starspectrum34.wavelength.value[:2000])]            waverange35 = [np.amin(starspectrum35.wavelength.value[20:2000]),                           np.amax(starspectrum35.wavelength.value[:2000])]            waverange36 = [np.amin(starspectrum36.wavelength.value[20:2000]),                           np.amax(starspectrum36.wavelength.value[:2000])]            starspectrum34 = mtf.read_nsdrp_txt(file1, desired_wavelength_units='Angstrom', wave_range=waverange34)            starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(                snr)) * starspectrum34.flux.unit            starspectrum35 = mtf.read_nsdrp_txt(file2, desired_wavelength_units='Angstrom', wave_range=waverange35)            starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(                snr)) * starspectrum35.flux.unit            starspectrum36 = mtf.read_nsdrp_txt(file3, desired_wavelength_units='Angstrom', wave_range=waverange36)            starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(                snr)) * starspectrum36.flux.unit        else:            file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*.dat')            file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*.dat')            file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*.dat')            starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')            starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')            starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')            waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]            waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]            waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]            starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)            starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)            starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)            starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(                snr)) * starspectrum34.flux.unit            starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(                snr)) * starspectrum35.flux.unit            starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(                snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, bosz)        if include_phoenix:            pmodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, phoenix)            for a in phoenix_result.median.keys():                setattr(pmodel, a, phoenix_result.median[a])            pw1, pf1, pw2, pf2, pw3, pf3 = pmodel()            phoenix_res1 = starspectrum34.flux.value - pf1            phoenix_res2 = starspectrum35.flux.value - pf2            phoenix_res3 = starspectrum36.flux.value - pf3            phoenix_chi2 = np.sum((phoenix_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)            phoenix_chi2 = phoenix_chi2 + np.sum((phoenix_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)            phoenix_chi2 = phoenix_chi2 + np.sum((phoenix_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)            phoenix_chi2 = phoenix_chi2 / (len(phoenix_res1) + len(phoenix_res2) + len(phoenix_res3))            phoenix_deltas = np.around([phoenix_result.median['teff_0'] - cal_star_info[2], phoenix_result.median['logg_0'] - cal_star_info[3],                      phoenix_result.median['mh_0'] - cal_star_info[1], phoenix_result.median['alpha_0'] - cal_star_info[4]],decimals=2)        else:            phoenix_chi2 = 0.0        amodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, bosz)        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        bw1, bf1, bw2, bf2, bw3, bf3 = bmodel()        bosz_res1 = starspectrum34.flux.value - bf1        bosz_res2 = starspectrum35.flux.value - bf2        bosz_res3 = starspectrum36.flux.value - bf3        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1)+len(bosz_res2)+len(bosz_res3))        bosz_deltas = np.around([bosz_result.median['teff_0'] - cal_star_info[2], bosz_result.median['logg_0'] - cal_star_info[3],                  bosz_result.median['mh_0'] - cal_star_info[1], bosz_result.median['alpha_0'] - cal_star_info[4]],decimals=2)        setattr(amodel, 'teff_0', cal_star_info[2])        setattr(amodel, 'logg_0', cal_star_info[3])        setattr(amodel, 'mh_0', cal_star_info[1])        setattr(amodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = amodel()        apogee_res1 = starspectrum34.flux.value - af1        apogee_res2 = starspectrum35.flux.value - af2        apogee_res3 = starspectrum36.flux.value - af3        apogee_chi2 = np.sum((apogee_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 / (len(apogee_res1) + len(apogee_res2) + len(apogee_res3))        chi2_vals += [(np.round_(bosz_chi2,decimals=2),np.round_(phoenix_chi2,decimals=2),np.round_(apogee_chi2,decimals=2))]        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        plt.text(21400, 0.65,'$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$\alpha$:' + str(cal_star_info[4]) +'$\pm$'+ str(cal_star_info[9]),fontsize=12, bbox=props)        plt.text(21400, 0.4,'BOSZ fit offsets:\n$\Delta T_{eff}:$' + str(bosz_deltas[0]) +'$\pm$'+ str(bosz_sigmas_one[0]) + '\n$\Delta log g:$' + str(bosz_deltas[1]) +'$\pm$'+ str(bosz_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(bosz_deltas[2]) +'$\pm$'+ str(bosz_sigmas_one[2]) + '\n'+r'$\Delta$ [$\alpha$/Fe]:' + str(bosz_deltas[3]) +'$\pm$'+ str(bosz_sigmas_one[3]), fontsize=12, bbox=props)        if include_phoenix:            plt.text(22090, 0.1,'PHOENIX fit offsets:\n$\Delta T_{eff}:$' + str(phoenix_deltas[0]) +'$\pm$'+ str(phoenix_sigmas_one[0]) + '\n$\Delta log g:$' + str(phoenix_deltas[1]) +'$\pm$'+ str(phoenix_sigmas_one[1]) + \                    '\n$\Delta [M/H]:$' + str(phoenix_deltas[2]) +'$\pm$'+ str(phoenix_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(phoenix_deltas[3]) +'$\pm$'+ str(phoenix_sigmas_one[3]),fontsize=12, bbox=props)        plt.plot(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(bw3 / (bosz_result.median['vrad_5'] / 3e5 + 1.0), bf3, color='#33AFFF', label='BOSZ Model/Residuals',linewidth=5.0)        plt.plot(bw3 / (bosz_result.median['vrad_5'] / 3e5 + 1.0), bosz_res3, color='#33AFFF',linewidth=5.0)        if include_phoenix:            plt.plot(pw2 / (phoenix_result.median['vrad_4'] / 3e5 + 1.0), pf2, color='#FEBE4E', label='PHOENIX Model/Residuals',linewidth=5.0)            plt.plot(pw2 / (phoenix_result.median['vrad_4'] / 3e5 + 1.0), phoenix_res2, color='#FEBE4E',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21150,21500)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title(result_title+' fits and residuals for '+name)        plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_spectrum_o36_phoenix.png')        #plt.show()        plt.clf()        ap_values['teff'] += [cal_star_info[2]]        ap_values['logg'] += [cal_star_info[3]]        ap_values['mh'] += [cal_star_info[1]]        ap_values['alpha'] += [cal_star_info[4]]    for starname in koa_star_names:        star_ind = koa_star_names.index(starname)        cal_star_info = koa_star_info_all[star_ind]        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + starname + '_order34-36_bosz_fit_R_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        koa_vals['teff'] += [bosz_result.median['teff_0']]        koa_vals['logg'] += [bosz_result.median['logg_0']]        koa_vals['mh'] += [bosz_result.median['mh_0']]        koa_vals['alpha'] += [bosz_result.median['alpha_0']]        if include_phoenix:            phoenix_result = MultiNestResult.from_hdf5(                '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/PHOENIX_fits/unmasked/' + name + '_order34-36_phoenix_fit_R_adderr.h5')            phoenix_bounds = phoenix_result.calculate_sigmas(1)            phoenix_result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])            plt.savefig(                '/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + name + '_' + result_title + '_corner_phoenix.png')            plt.clf()            phoenix_sigmas['teff'] += [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2  + cal_star_info[7]**2 + 91.5**2)] #cal_star_info[7]            phoenix_sigmas['logg'] += [np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2 + 0.11**2)] #cal_star_info[8]            phoenix_sigmas['mh'] += [np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2 + 0.05**2)] #cal_star_info[6]            phoenix_sigmas['alpha'] += [np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2 + 0.05**2)] #cal_star_info[9]            phoenix_sigmas_one = [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2 + 91.5**2), +\                           np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2 + 0.1**2), +\                           np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2 + 0.03**2),+\                           np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2 + 0.03**2)]            phoenix_sigmas_one = np.around(phoenix_sigmas_one, decimals=2)            koa_phoenix_vals['teff'] += [phoenix_result.median['teff_0']]            koa_phoenix_vals['logg'] += [phoenix_result.median['logg_0']]            koa_phoenix_vals['mh'] += [phoenix_result.median['mh_0']]            koa_phoenix_vals['alpha'] += [phoenix_result.median['alpha_0']]            koa_phoenix_offsets['teff'] += [phoenix_result.median['teff_0']-cal_star_info[2]]            koa_phoenix_offsets['logg'] += [phoenix_result.median['logg_0']-cal_star_info[3]]            koa_phoenix_offsets['mh'] += [phoenix_result.median['mh_0']-cal_star_info[1]]            koa_phoenix_offsets['alpha'] += [phoenix_result.median['alpha_0']-cal_star_info[4]]        file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/koa_specs/' + starname + '_order34*.dat')        file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/koa_specs/' + starname + '_order35*.dat')        file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/koa_specs/' + starname + '_order36*.dat')        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]        waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]        waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)        starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit        starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit        starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit        #model = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, g)        interp1 = Interpolate(starspectrum34)        convolve1 = InstrumentConvolveGrating.from_grid(bosz, R=bosz_result.median['R_6'])#R=24000        #convolve1 = starkit.base.operations.spectrograph.InstrumentDeltaLambdaConstant.from_grid(g, delta_lambda=0.961)        rot1 = RotationalBroadening.from_grid(bosz, vrot=np.array([10.0]))        norm1 = Normalize(starspectrum34, 2)        interp2 = Interpolate(starspectrum35)        convolve2 = InstrumentConvolveGrating.from_grid(bosz, R=bosz_result.median['R_7'])        #convolve2 = starkit.base.operations.spectrograph.InstrumentDeltaLambdaConstant.from_grid(g, delta_lambda=0.961)        norm2 = Normalize(starspectrum35, 2)        interp3 = Interpolate(starspectrum36)        convolve3 = InstrumentConvolveGrating.from_grid(bosz, R=bosz_result.median['R_8'])        #convolve3 = starkit.base.operations.spectrograph.InstrumentDeltaLambdaConstant.from_grid(g, delta_lambda=0.961)        norm3 = Normalize(starspectrum36, 2)        model = bosz | rot1 | Splitter3() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \                    convolve1 & convolve2 & convolve3 | interp1 & interp2 & interp3 | \                    norm1 & norm2 & norm3        for a in bosz_result.median.keys():            setattr(model, a, bosz_result.median[a])        print bosz_result        bw1, bf1, bw2, bf2, bw3, bf3 = model()        bosz_res1 = starspectrum34.flux.value - bf1        bosz_res2 = starspectrum35.flux.value - bf2        bosz_res3 = starspectrum36.flux.value - bf3        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 + np.sum((bosz_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 + np.sum((bosz_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1) + len(bosz_res2) + len(bosz_res3))        deltas = [bosz_result.median['teff_0'] - cal_star_info[2], bosz_result.median['logg_0'] - cal_star_info[3],                  bosz_result.median['mh_0'] - cal_star_info[1], bosz_result.median['alpha_0'] - cal_star_info[4]]        deltas = np.around(deltas,decimals=2)        koa_offsets['teff'] += [deltas[0]]        koa_offsets['logg'] += [deltas[1]]        koa_offsets['mh'] += [deltas[2]]        koa_offsets['alpha'] += [deltas[3]]        koa_sigmas['teff'] += [(bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2]        koa_sigmas['logg'] += [(bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2]        koa_sigmas['mh'] += [(bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2]        koa_sigmas['alpha'] += [(bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2]        sigmas_one = [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\                           np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\                           np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\                           np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        sigmas_one = np.around(sigmas_one, decimals=2)        w1, f1, w2, f2, w3, f3 = model()        res1 = starspectrum34.flux.value - f1        res2 = starspectrum35.flux.value - f2        res3 = starspectrum36.flux.value - f3        chi2 = np.sum((res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        chi2 = chi2 + np.sum((res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        chi2 = chi2 + np.sum((res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        chi2 = chi2 / (len(res1) + len(res2) + len(res3))        setattr(bmodel, 'teff_0', cal_star_info[2])        setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', cal_star_info[1])        setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        apogee_res1 = starspectrum34.flux.value - af1        apogee_res2 = starspectrum35.flux.value - af2        apogee_res3 = starspectrum36.flux.value - af3        apogee_chi2 = np.sum((apogee_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 + np.sum((apogee_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 / (len(apogee_res1) + len(apogee_res2) + len(apogee_res3))        koa_chi2_vals += [(chi2,bosz_chi2,apogee_chi2)]        bosz_result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+starname+'_'+result_title+'_corner.png')        plt.clf()        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        plt.text(21400, 0.7,                 'APOGEE fitted parameters:\n$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$\alpha$:' + str(cal_star_info[4]) +'$\pm$'+ str(cal_star_info[9]) + '\n$\chi^2$ at APOGEE values:' + str(np.round_(apogee_chi2,decimals=2)),                 fontsize=12, bbox=props)        plt.text(21400, 0.45,                 'Fit offsets:\n$\Delta T_{eff}:$' + str(deltas[0]) +'$\pm$'+ str(sigmas_one[0]) + '\n$\Delta log g:$' + str(deltas[1]) +'$\pm$'+ str(sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(deltas[2]) +'$\pm$'+ str(sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(deltas[3]) +'$\pm$'+ str(sigmas_one[3]) + '\n$\chi^2$:' + str(np.round_(chi2,decimals=2)),                 fontsize=12, bbox=props)        plt.plot(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(bw3 / (bosz_result.median['vrad_5'] / 3e5 + 1.0), bf3, color='#33AFFF', label='BOSZ Model/Residuals',linewidth=5.0)        plt.plot(bw3 / (bosz_result.median['vrad_5'] / 3e5 + 1.0), bosz_res3, color='#33AFFF',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21150,21500)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title('Fits and order 36 residuals for '+starname)        plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+starname+'_'+result_title+'_koa_spectrum_o36.png')        plt.clf()        koa_ap_values['teff'] += [cal_star_info[2]]        koa_ap_values['logg'] += [cal_star_info[3]]        koa_ap_values['mh'] += [cal_star_info[1]]        koa_ap_values['alpha'] += [cal_star_info[4]]    '''    for name in fire_star_names:        print name        star_ind = fire_star_names.index(name)        cal_star_info = fire_star_info_all[star_ind]        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + name + '_bosz_fit_R_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        bosz_sigmas['teff'] += [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2)]        bosz_sigmas['logg'] += [np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2)]        bosz_sigmas['mh'] += [np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2)]        bosz_sigmas['alpha'] += [np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        bosz_sigmas_one = [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\                           np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\                           np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\                           np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2+((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2)]        bosz_sigmas_one = np.around(bosz_sigmas_one, decimals=2)        bosz_vals['teff'] += [bosz_result.median['teff_0']]        bosz_vals['logg'] += [bosz_result.median['logg_0']]        bosz_vals['mh'] += [bosz_result.median['mh_0']]        bosz_vals['alpha'] += [bosz_result.median['alpha_0']-bosz_result.median['mh_0']]        bosz_offsets['teff'] += [bosz_result.median['teff_0']-cal_star_info[2]]        bosz_offsets['logg'] += [bosz_result.median['logg_0']-cal_star_info[3]]        bosz_offsets['mh'] += [bosz_result.median['mh_0']-cal_star_info[1]]        bosz_offsets['alpha'] += [bosz_result.median['alpha_0']-bosz_result.median['mh_0']-cal_star_info[4]+cal_star_info[1]]        file1 = '/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_F.fits'        starspectrum = mtf.load_fire_spectra(file1, waverange=[21000, 23000], normalize=True)        interp1 = Interpolate(starspectrum)        convolve1 = InstrumentConvolveGrating.from_grid(bosz)        rot1 = RotationalBroadening.from_grid(bosz, vrot=np.array([10.0]))        norm1 = Normalize(starspectrum, 2)        bmodel = bosz | rot1 | DopplerShift(vrad=0) | convolve1 | interp1 | norm1        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        bw1, bf1 = bmodel()        bosz_res1 = starspectrum.flux.value - bf1        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1))        bosz_deltas = np.around([bosz_result.median['teff_0'] - cal_star_info[2], bosz_result.median['logg_0'] - cal_star_info[3],                  bosz_result.median['mh_0'] - cal_star_info[1], bosz_result.median['alpha_0'] - bosz_result.median['mh_0'] - cal_star_info[4] + cal_star_info[1]],decimals=2)        interp1 = Interpolate(starspectrum)        convolve1 = InstrumentConvolveGrating.from_grid(bosz)        rot1 = RotationalBroadening.from_grid(bosz, vrot=np.array([10.0]))        norm1 = Normalize(starspectrum, 2)        amodel = bosz | rot1 | DopplerShift(vrad=0) | convolve1 | interp1 | norm1        setattr(amodel, 'teff_0', cal_star_info[2])        setattr(amodel, 'logg_0', cal_star_info[3])        setattr(amodel, 'mh_0', cal_star_info[1])        setattr(amodel, 'alpha_0', cal_star_info[4])        aw1, af1 = amodel()        apogee_res1 = starspectrum.flux.value - af1        apogee_chi2 = np.sum((apogee_res1) ** 2 / (starspectrum.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 / (len(apogee_res1))        chi2_vals += [(np.round_(bosz_chi2,decimals=2),np.round_(0.0,decimals=2),np.round_(apogee_chi2,decimals=2))]        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        plt.text(21990, 0.65,'$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$[\alpha$/H]:' + str(cal_star_info[4]-cal_star_info[1]) +'$\pm$'+ str(np.sqrt(cal_star_info[9]**2+cal_star_info[6]**2)),fontsize=12, bbox=props)        plt.text(21990, 0.4,'BOSZ fit offsets:\n$\Delta T_{eff}:$' + str(bosz_deltas[0]) +'$\pm$'+ str(bosz_sigmas_one[0]) + '\n$\Delta log g:$' + str(bosz_deltas[1]) +'$\pm$'+ str(bosz_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(bosz_deltas[2]) +'$\pm$'+ str(bosz_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha/H$:' + str(bosz_deltas[3]) +'$\pm$'+ str(bosz_sigmas_one[3]), fontsize=12, bbox=props)        #22035        #plt.text(22090, 0.1,'PHOENIX fit offsets:\n$\Delta T_{eff}:$' + str(phoenix_deltas[0]) +'$\pm$'+ str(phoenix_sigmas_one[0]) + '\n$\Delta log g:$' + str(phoenix_deltas[1]) +'$\pm$'+ str(phoenix_sigmas_one[1]) + \        #         '\n$\Delta [M/H]:$' + str(phoenix_deltas[2]) +'$\pm$'+ str(phoenix_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(phoenix_deltas[3]) +'$\pm$'+ str(phoenix_sigmas_one[3]),fontsize=12, bbox=props)        plt.plot(starspectrum.wavelength.value / (bosz_result.median['vrad_2'] / 3e5 + 1.0), starspectrum.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(bw1 / (bosz_result.median['vrad_2'] / 3e5 + 1.0), bf1, color='#33AFFF', label='BOSZ Model/Residuals',linewidth=5.0)        #plt.plot(pw2 / (phoenix_result.median['vrad_4'] / 3e5 + 1.0), pf2, color='#FEBE4E', label='PHOENIX Model/Residuals',linewidth=5.0)        plt.plot(bw1 / (bosz_result.median['vrad_2'] / 3e5 + 1.0), bosz_res1, color='#33AFFF',linewidth=5.0)        #plt.plot(pw2 / (phoenix_result.median['vrad_4'] / 3e5 + 1.0), phoenix_res2, color='#FEBE4E',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21700,22100)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title(result_title+' fits and residuals for '+name)        plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_spectrum_fire_ah.png')        #plt.show()        plt.clf()        ap_values['teff'] += [cal_star_info[2]]        ap_values['logg'] += [cal_star_info[3]]        ap_values['mh'] += [cal_star_info[1]]        ap_values['alpha'] += [cal_star_info[4]]    '''    fig, ax = plt.subplots(nrows=len(bosz_offsets.keys())+1, ncols=1,figsize=(10, 10))    fig.subplots_adjust(hspace=0.025, wspace=0.0)    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    x_axis_b = ap_values['mh']    x_axis_p = ap_values['mh']    koa_x_axis_b = koa_ap_values['mh']    x_axis_b = np.array([float(i) for i in x_axis_b])    x_axis_p = np.array([float(i) for i in x_axis_p])    koa_x_axis_b = np.array([float(i) for i in koa_x_axis_b])    for i in range(len(ax)-1):        combined_offsets = np.array(bosz_offsets[bosz_offsets.keys()[i]] + koa_offsets[koa_offsets.keys()[i]])        combined_sigmas = np.array(bosz_sigmas[phoenix_offsets.keys()[i]] + koa_sigmas[koa_offsets.keys()[i]])        all_x_axis_b = np.concatenate((x_axis_b, koa_x_axis_b))        b_stdev = np.std(combined_offsets)        b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in combined_sigmas])        b_offset_mean = np.average(combined_offsets, weights=b_sigmas_stdev ** -2)        #ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)        #ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        #ppopt2, ppcov2 = curve_fit(quad_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=bosz_sigmas[phoenix_offsets.keys()[i]], color='#3349FF',marker='.',label='Calibrator star offset',ls='none', markersize=16)        ax[i].errorbar(koa_x_axis_b, koa_offsets[koa_offsets.keys()[i]], yerr=koa_sigmas[koa_offsets.keys()[i]], color='#3349FF',marker='d',label='Calibrator star offset (KOA spectrum)',ls='none', markersize=8)        bpopt, bpcov = curve_fit(linear_fit, all_x_axis_b, combined_offsets, sigma = combined_sigmas)        bpopt_c, bpcov_c = curve_fit(constant_fit, all_x_axis_b, combined_offsets, sigma = combined_sigmas)        fit_res_b = np.array(combined_offsets - linear_fit(all_x_axis_b, bpopt[0], bpopt[1]))        chi2_b_fit = np.sum((fit_res_b)**2 / combined_sigmas**2)        chi2_b_fit_red = chi2_b_fit/(len(fit_res_b) - len(bpopt))        fit_res_b_c = np.array(combined_offsets - constant_fit(all_x_axis_b, bpopt_c[0]))        chi2_b_fit_c = np.sum((fit_res_b_c)**2 / combined_sigmas**2)        chi2_b_fit_c_red = chi2_b_fit_c/(len(fit_res_b_c) - len(bpopt_c))        f_b = (chi2_b_fit_c - chi2_b_fit)        f_b = f_b/(len(bpopt) - len(bpopt_c))        f_b = f_b*(len(fit_res_b)-len(bpopt))/chi2_b_fit        pval = stats.f.sf(f_b, 2, 1)        ax[i].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Mean offset')        ax[i].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                      color='#3349FF', alpha=0.2)        xmin, xmax = ax[i].get_xlim()        ymin, ymax = ax[i].get_ylim()        ytext = ymax/2.        ax[i].text(0.0, ytext, '$\sigma$:' + str(np.round_(b_stdev,decimals=2))+'\nMean:' + str(np.round_(b_offset_mean,decimals=2)),fontsize=10, bbox=props) #+'\np-value: '+str(np.round_(pval,decimals=2), +'\nF-statistic: '+str(np.round_(f_b,decimals=2))+'\n5% crit val: '+str(np.round_(18.513,decimals=2))        #connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])        #connect_points(ax[i],x_axis_b,x_axis_n, bosz_offsets[phoenix_offsets.keys()[i]],offsets[offsets.keys()[i]])        ax[i].axhline(y=0., color='k', linestyle='--')        ax[i].tick_params(axis='y', which='major', labelsize=10)        ax[i].tick_params(axis='x', which='major', labelsize=1)    #ax[-1].plot(x_axis_n,[x[0] for x in chi2_vals],color='#5cd85e',marker='d',label=outputpath,ls='none', markersize=10)    #ax[-1].plot(x_axis_b,[x[1] for x in chi2_vals], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)    #ax[-1].plot(x_axis_p,[x[2] for x in chi2_vals],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    ax[i].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Reference mean offset')    ax[-1].tick_params(axis='both', which='major', labelsize=10)    ah_bosz, ah_koa = np.array(bosz_offsets['alpha'])-np.array(bosz_offsets['mh']), np.array(koa_offsets['alpha'])-np.array(koa_offsets['mh'])    combined_offsets = np.concatenate((ah_bosz,ah_koa))    print combined_offsets    combined_sigmas = np.concatenate((np.array(bosz_offsets['alpha'])-np.array(bosz_offsets['mh']), np.array(koa_offsets['alpha'])-np.array(koa_offsets['mh'])))    b_stdev = np.std(combined_offsets)    b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in combined_sigmas])    b_offset_mean = np.average(combined_offsets, weights=b_sigmas_stdev ** -2)    # ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    # ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])    # ppopt2, ppcov2 = curve_fit(quad_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])    #ax[-2].errorbar(x_axis_b, np.array(bosz_offsets['alpha'])-np.array(bosz_offsets['mh']), yerr=np.array(bosz_sigmas['alpha'])**2 + np.array(bosz_sigmas['mh'])**2,    #               color='#3349FF', marker='.', label='Reference BOSZ grid', ls='none', markersize=24)    #ax[-2].errorbar(koa_x_axis_b, np.array(koa_offsets['alpha'])-np.array(koa_offsets['mh']), yerr=np.array(koa_sigmas['alpha'])**2 + np.array(koa_sigmas['mh'])**2,    #               color='#3349FF', marker='d', label='Reference BOSZ grid (KOA spectrum)', ls='none', markersize=12)    # bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])    # bpopt2, bpcov2 = curve_fit(quad_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])    #ax[-2].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Reference mean offset')    #ax[-2].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,    #              color='#3349FF', alpha=0.2)    '''    ax[0].errorbar(koa_x_axis_b[3], koa_offsets['logg'][3], yerr=koa_sigmas['logg'][3],                   color='#33AFFF', marker='d', label='KOA spectrum of star we observed', ls='none', markersize=14)    ax[1].errorbar(koa_x_axis_b[3], koa_offsets['alpha'][3], yerr=koa_sigmas['alpha'][3],                   color='#33AFFF', marker='d', ls='none', markersize=14)    ax[2].errorbar(koa_x_axis_b[3], koa_offsets['teff'][3], yerr=koa_sigmas['teff'][3],                   color='#33AFFF', marker='d', ls='none', markersize=14)    ax[3].errorbar(koa_x_axis_b[3], koa_offsets['mh'][3], yerr=koa_sigmas['mh'][3],                   color='#33AFFF', marker='d', ls='none', markersize=14)    '''    #ax[-2].errorbar(koa_x_axis_b[3], np.array(koa_offsets['alpha'][3])-np.array(koa_offsets['mh'][3]), yerr=np.array(koa_sigmas['alpha'][3])**2 + np.array(koa_sigmas['mh'][3])**2,    #               color='#33AFFF', marker='d', ls='none', markersize=14)    #ax[-2].text(0.0, 0.0,    #           'Stdev:' + str(np.round_(b_stdev, decimals=2)) + '\nMean:' + str(np.round_(b_offset_mean, decimals=2)),    #           fontsize=12, bbox=props)    # connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])    # connect_points(ax[i],x_axis_b,x_axis_n, bosz_offsets[phoenix_offsets.keys()[i]],offsets[offsets.keys()[i]])    #ax[-2].axhline(y=0., color='k', linestyle='--')    #ax[-1].plot(x_axis_p, [x[0] for x in chi2_vals],color='#3349FF',marker='.',ls='none', markersize=18)    ax[-1].plot(x_axis_b, [x[1] for x in chi2_vals], color='#3349FF',marker='.',ls='none', markersize=16)    ax[-1].plot(koa_x_axis_b, [x[1] for x in koa_chi2_vals], color='#3349FF',marker='d',ls='none', markersize=9)    ax[-1].plot(x_axis_b, [x[2] for x in chi2_vals], color='r',marker='.',label='BOSZ grid at APOGEE values',ls='none', markersize=16)    ax[-1].plot(koa_x_axis_b, [x[2] for x in koa_chi2_vals], color='r',marker='d',ls='none', markersize=9)    #ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[len(ax)-1].set_xlabel('APOGEE [M/H]', fontsize=11)    ax[0].set_ylabel('log g offset', fontsize=11)    ax[0].set_ylim(-1.5,1.5)    ax[1].set_ylabel(r'[$\alpha$/Fe]'+' offset', fontsize=11)    ax[1].set_ylim(-0.5,0.5)    ax[2].set_ylabel('$T_{eff}$ offset (K)', fontsize=11)    ax[2].set_ylim(-400,400)    ax[3].set_ylabel('[M/H] offset', fontsize=11)    ax[3].set_ylim(-0.5,0.5)    #ax[4].set_ylabel(r'[$\alpha$/H]'+' offset', fontsize=16)    #ax[4].set_ylim(-0.7,0.7)    ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=11)    ax[0].legend(fontsize=10,loc='lower left')    ax[-1].legend(fontsize=10,loc='upper left')    ax[0].set_title('StarKit-APOGEE fit offsets with KOA spectra (BOSZ grid)')    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offsets_031020_ap_mh_paper.png',bbox_inches='tight')    '''    x_axis_b = np.array([float(i) for i in x_axis_b])    x_axis_p = np.array([float(i) for i in x_axis_p])    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    #fig, ax = plt.subplots(nrows=len(bosz_offsets.keys())+1, ncols=1,figsize=(16, 12))    f_teff = plt.figure(1,figsize=(13, 9))    #p_stdev = np.std(phoenix_offsets['teff'])    b_stdev = np.std(bosz_offsets['teff'])    #p_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + p_stdev ** 2) for x in phoenix_sigmas['teff']])    b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in bosz_sigmas['teff']])    #p_offset_mean = np.average(phoenix_offsets['teff'], weights=p_sigmas_stdev**-2)    b_offset_mean = np.average(bosz_offsets['teff'], weights=b_sigmas_stdev**-2)    #plt.errorbar(x_axis_p, phoenix_offsets['teff'], yerr=p_sigmas_stdev,    #               color='#FF0000', marker='s', label='PHOENIX grid', ls='none', markersize=16)    plt.errorbar(x_axis_b, bosz_offsets['teff'], yerr=b_sigmas_stdev,                   color='#3349FF', marker='.', label='BOSZ grid', ls='none', markersize=24)    #connect_points(plt.gca(), x_axis_b, x_axis_p, bosz_offsets['teff'],    #               phoenix_offsets['teff'])    #plt.axhline(y=p_offset_mean, color='#FF0000', linestyle='--', label='PHOENIX mean offset')    plt.axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='BOSZ mean offset')    #plt.axhspan(p_offset_mean - p_stdev, p_offset_mean + p_stdev,    #                   color='#FF0000', alpha=0.2)    plt.axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                       color='#3349FF', alpha=0.2)    plt.axhline(y=0., color='k', linestyle='--')    plt.ylabel('$T_{eff}$ offset', fontsize=16)    plt.xlabel('literature [M/H]', fontsize=16)    plt.legend(fontsize=12,loc='lower left')    #plt.text(-0.5, -800, 'PHOENIX stdev: ' + str(np.round_(p_stdev, decimals=3)) + '\nBOSZ stdev: ' + str(    #    np.round_(b_stdev, decimals=3)), fontsize=11, bbox=props)    plt.text(-0.5, -400, 'BOSZ stdev: ' + str(np.round_(b_stdev, decimals=3)), fontsize=11, bbox=props)    plt.title('$T_{eff}$ offsets for all stars vs literature [M/H]', fontsize=18)    plt.xlim(-1.3,0.55)    plt.ylim(-500,500)    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offset_teff_fire.png')    plt.cla()    fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 12))    #p_stdev = np.std(phoenix_offsets['mh'])    b_stdev = np.std(bosz_offsets['mh'])    #p_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + p_stdev ** 2) for x in phoenix_sigmas['mh']])    b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in bosz_sigmas['mh']])    #ax[0].errorbar(x_axis_p, phoenix_offsets['mh'], yerr=p_sigmas_stdev,    #               color='#FF0000', marker='s', label='PHOENIX grid', ls='none', markersize=16)    ax[0].errorbar(x_axis_b, bosz_offsets['mh'], yerr=b_sigmas_stdev,                   color='#3349FF', marker='.', label='BOSZ grid', ls='none', markersize=24)    #p_offset_mean = np.average(phoenix_offsets['mh'], weights=p_sigmas_stdev**-2)    b_offset_mean = np.average(bosz_offsets['mh'], weights=b_sigmas_stdev**-2)    #ax[0].axhline(y=p_offset_mean, color='#FF0000', linestyle='--', label='PHOENIX mean offset')    ax[0].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='BOSZ mean offset')    #ax[0].axhspan(p_offset_mean - p_stdev, p_offset_mean + p_stdev,    #                   color='#FF0000', alpha=0.2)    ax[0].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                       color='#3349FF', alpha=0.2)    #connect_points(ax[0], x_axis_b, x_axis_p, bosz_offsets['mh'],    #               phoenix_offsets['mh'])    ax[0].axhline(y=0., color='k', linestyle='--')    ax[0].set_ylabel('[M/H] offset', fontsize=16)    ax[0].legend(fontsize=12,loc='lower left')    ax[0].set_xlim(-1.3,0.55)    ax[0].set_ylim(-0.5,0.5)    #ax[0].text(-0.5, -0.55, 'BOSZ stdev: ' + str(np.round_(b_stdev, decimals=3))+'\n'+'BOSZ mean: ' + str(np.round_(b_offset_mean, decimals=3))+'\n'+\    #           'PHOENIX stdev: ' + str(np.round_(p_stdev, decimals=3))+'\n'+'PHOENIX mean: ' + str(np.round_(p_offset_mean, decimals=3)), fontsize=11, bbox=props)    ax[0].text(-0.5, -0.55, 'BOSZ stdev: ' + str(np.round_(b_stdev, decimals=3))+'\n'+'BOSZ mean: ' + str(np.round_(b_offset_mean, decimals=3)), fontsize=11, bbox=props)    ax[0].set_title('[M/H] and ['+r'$\alpha$'+'/Fe] offsets for all stars vs literature [M/H]', fontsize=18)    #p_ah = [float(phoenix_offsets['alpha'][i]-phoenix_offsets['mh'][i]) for i in range(len(phoenix_offsets['mh']))]    #b_ah = [float(bosz_offsets['alpha'][i]-bosz_offsets['mh'][i]) for i in range(len(bosz_offsets['mh']))]    #p_stdev = np.std(phoenix_offsets['alpha'])    b_stdev = np.std(bosz_offsets['alpha'])    #p_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + p_stdev ** 2) for x in phoenix_sigmas['alpha']])    b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in bosz_sigmas['alpha']])    #ax[1].errorbar(x_axis_p, phoenix_offsets['alpha'], yerr=p_sigmas_stdev,    #               color='#FF0000', marker='s', label='PHOENIX grid', ls='none', markersize=16)    ax[1].errorbar(x_axis_b, bosz_offsets['alpha'], yerr=b_sigmas_stdev,                   color='#3349FF', marker='.', label='BOSZ grid', ls='none', markersize=24)    #connect_points(ax[1], x_axis_b, x_axis_p, b_ah,    #               p_ah)    #p_offset_mean = np.average(phoenix_offsets['alpha'], weights=p_sigmas_stdev**-2)    b_offset_mean = np.average(bosz_offsets['alpha'], weights=b_sigmas_stdev**-2)    #ax[1].axhline(y=p_offset_mean, color='#FF0000', linestyle='--', label='PHOENIX mean offset')    ax[1].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='BOSZ mean offset')    #ax[1].axhspan(p_offset_mean - p_stdev, p_offset_mean + p_stdev,    #                   color='#FF0000', alpha=0.2)    ax[1].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                       color='#3349FF', alpha=0.2)    ax[1].axhline(y=0., color='k', linestyle='--')    ax[1].set_ylabel('['+r'$\alpha$'+'/Fe] offset', fontsize=16)    ax[1].set_xlabel('literature [M/H]', fontsize=16)    ax[1].set_xlim(-1.3,0.55)    ax[1].set_ylim(-0.5,0.5)    ax[1].text(-0.5, -0.55, 'BOSZ stdev: ' + str(np.round_(b_stdev, decimals=3))+'\n'+'BOSZ mean: ' + str(np.round_(b_offset_mean, decimals=3)), fontsize=11, bbox=props)    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offset_mh_a_fire.png')    plt.cla()        f_logg = plt.figure(1,figsize=(13, 9))    #p_stdev = np.std(phoenix_offsets['logg'])    b_stdev = np.std(bosz_offsets['logg'])    #p_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + p_stdev ** 2) for x in phoenix_sigmas['logg']])    b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in bosz_sigmas['logg']])    #plt.errorbar(x_axis_p, phoenix_offsets['logg'], yerr=p_sigmas_stdev,    #               color='#FF0000', marker='s', label='PHOENIX grid', ls='none', markersize=16)    plt.errorbar(x_axis_b, bosz_offsets['logg'], yerr=b_sigmas_stdev,                   color='#3349FF', marker='.', label='BOSZ grid', ls='none', markersize=24)    #connect_points(plt.gca(), x_axis_b, x_axis_p, bosz_offsets['logg'],    #               phoenix_offsets['logg'])    #p_offset_mean = np.average(phoenix_offsets['logg'], weights=p_sigmas_stdev**-2)    b_offset_mean = np.average(bosz_offsets['logg'], weights=b_sigmas_stdev**-2)    #plt.axhline(y=p_offset_mean, color='#FF0000', linestyle='--', label='PHOENIX mean offset')    #plt.axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='BOSZ mean offset')    #plt.axhspan(p_offset_mean - p_stdev, p_offset_mean + p_stdev,    #                   color='#FF0000', alpha=0.2)    plt.axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                       color='#3349FF', alpha=0.2)    plt.axhline(y=0., color='k', linestyle='--')    plt.ylabel('log g offset', fontsize=16)    plt.xlabel('literature [M/H]', fontsize=16)    plt.legend(fontsize=12,loc='lower left')    plt.xlim(-1.3,0.55)    plt.ylim(-2.5,2.5)    plt.text(-0.5, -1., 'BOSZ stdev: ' + str(np.round_(b_stdev, decimals=3)), fontsize=11, bbox=props)    plt.title('log g offsets for all stars vs literature [M/H]', fontsize=18)    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offset_logg_fire.png')    plt.cla()    f_chi = plt.figure(1,figsize=(13, 9))    #plt.errorbar(x_axis_p, [x[1] for x in chi2_vals],color='#FF0000', marker='s', label='PHOENIX grid', ls='none', markersize=16)    plt.errorbar(x_axis_b, [x[0] for x in chi2_vals],color='#3349FF', marker='.', label='BOSZ grid', ls='none', markersize=24)    plt.axhline(y=0., color='k', linestyle='--')    plt.ylabel('Reduced $\chi^2$', fontsize=16)    plt.xlabel('APOGEE [M/H]', fontsize=16)    plt.legend(fontsize=12,loc='upper left')    plt.title('Reduced $\chi^2$ for all stars vs APOGEE [M/H]', fontsize=18)    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_chi2_fire.png')    plt.cla()        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    for i in range(len(ax)-1):        p_stdev = np.std(phoenix_offsets[phoenix_offsets.keys()[i]])        b_stdev = np.std(bosz_offsets[bosz_offsets.keys()[i]])        p_stdev = 0.        b_stdev = 0.        p_sigmas_stdev = np.array([np.sqrt(float(x)**2 + p_stdev**2) for x in phoenix_sigmas[phoenix_offsets.keys()[i]]])        b_sigmas_stdev = np.array([np.sqrt(float(x)**2 + b_stdev**2) for x in bosz_sigmas[bosz_offsets.keys()[i]]])        p_stdev = np.std(phoenix_offsets[phoenix_offsets.keys()[i]])        b_stdev = np.std(bosz_offsets[bosz_offsets.keys()[i]])        ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=p_sigmas_stdev,color='#FF0000',marker='s',label='PHOENIX grid',ls='none', markersize=13)        ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=b_sigmas_stdev, color='#3349FF',marker='.',label='BOSZ grid',ls='none', markersize=21)        #ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='PHOENIX grid',ls='none', markersize=10)        #ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=bosz_sigmas[phoenix_offsets.keys()[i]], color='#3349FF',marker='.',label='BOSZ grid',ls='none', markersize=18)        connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])        ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = p_sigmas_stdev)        ppopt_c, ppcov_c = curve_fit(constant_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = p_sigmas_stdev)        bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = b_sigmas_stdev)        bpopt_c, bpcov_c = curve_fit(constant_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = b_sigmas_stdev)        print phoenix_offsets.keys()[i]        print phoenix_offsets[phoenix_offsets.keys()[i]]        print linear_fit(x_axis_p, ppopt[0], ppopt[1])        print phoenix_sigmas[phoenix_offsets.keys()[i]]        fit_res_p = np.array(phoenix_offsets[phoenix_offsets.keys()[i]] - linear_fit(x_axis_p, ppopt[0], ppopt[1]))        chi2_p_fit = np.sum((fit_res_p)**2 / (np.array(p_sigmas_stdev)**2))        chi2_p_fit_red = chi2_p_fit/(len(fit_res_p) - 3.)        fit_res_b = np.array(bosz_offsets[bosz_offsets.keys()[i]] - linear_fit(x_axis_b, bpopt[0], bpopt[1]))        chi2_b_fit = np.sum((fit_res_b)**2 / np.array(b_sigmas_stdev)**2)        chi2_b_fit_red = chi2_b_fit/(len(fit_res_b) - 3.)        fit_res_p_c = np.array(phoenix_offsets[phoenix_offsets.keys()[i]] - constant_fit(x_axis_p, ppopt_c[0]))        chi2_p_fit_c = np.sum((fit_res_p_c) ** 2 / (np.array(p_sigmas_stdev) ** 2))        chi2_p_fit_c_red = chi2_p_fit_c / (len(fit_res_p_c) - 2.)        fit_res_b_c = np.array(bosz_offsets[bosz_offsets.keys()[i]] - constant_fit(x_axis_b, bpopt_c[0]))        chi2_b_fit_c = np.sum((fit_res_b_c)**2 / (np.array(b_sigmas_stdev)**2))        chi2_b_fit_c_red = chi2_b_fit_c/(len(fit_res_b_c) - 2.)        f_p = (chi2_p_fit_c - chi2_p_fit)        f_p = f_p/(len(ppopt) - len(ppopt_c))        f_p = f_p*(len(x_axis_p)-len(ppopt))/chi2_p_fit        f_b = (chi2_b_fit_c - chi2_b_fit)        f_b = f_b/(len(bpopt) - len(bpopt_c))        f_b = f_b*(len(x_axis_b)-len(bpopt))/chi2_b_fit        xmin, xmax = ax[i].get_xlim()        ymin, ymax = ax[i].get_ylim()        #ax[i].text(xmax/2.2, ymin/2.,'P. linear reduced chi2: '+str(np.round_(chi2_p_fit_red,decimals=3))+'\nB. linear reduced chi2: '+str(np.round_(chi2_b_fit_red,decimals=3)),fontsize=11, bbox=props)        #ax[i].text(xmax/2.2, ymin/1.,'P. constant reduced chi2: '+str(np.round_(chi2_p_fit_c_red,decimals=3))+'\nB. constant reduced chi2: '+str(np.round_(chi2_b_fit_c_red,decimals=3)),fontsize=11, bbox=props)        ax[i].text(xmax/1.2, ymin/1.,'BOSZ stdev: '+str(np.round_(b_stdev,decimals=3))+\            '\nPHOENIX stdev: '+str(np.round_(p_stdev,decimals=3))+\            '\nBOSZ f-test: '+str(np.round_(f_b,decimals=3))+'\nPHOENIX f-test: '+str(np.round_(f_p,decimals=3))+'\n0.05$\%$ probability value: '+str(np.round_(scipy.stats.f.ppf(q=1-0.05, dfn=1, dfd=2),decimals=3)),fontsize=11, bbox=props)        #ax[i].text(xmax/1.2, ymin/-0.3.,'PHOENIX f-test: '+str(np.round_(f_p,decimals=3))+'\nBOSZ f-test: '+str(np.round_(f_b,decimals=3)),fontsize=11, bbox=props)        ax[i].axhline(y=0., color='k', linestyle='--')        ax[i].axhline(ppopt_c[0], color='#FF0000', linestyle='--')        ax[i].axhline(bpopt_c[0], color='#3349FF', linestyle='--')        ax[i].fill_between([xmin,xmax], ppopt_c[0]-np.sqrt(ppcov_c[0][0]), ppopt_c[0]+np.sqrt(ppcov_c[0][0]), color='#FF0000', alpha=0.2)        ax[i].fill_between([xmin,xmax], bpopt_c[0]-np.sqrt(bpcov_c[0][0]), bpopt_c[0]+np.sqrt(bpcov_c[0][0]), color='#3349FF', alpha=0.2)        #ax[i].set_xlim(2500,4500)    ax[-1].plot(x_axis_b,[x[0] for x in chi2_vals], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=21)    ax[-1].plot(x_axis_p,[x[1] for x in chi2_vals],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=13)    connect_points(ax[-1], x_axis_b, x_axis_p, [x[0] for x in chi2_vals],[x[1] for x in chi2_vals])    ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[len(ax)-1].set_xlabel('Best-fit log g', fontsize=16)    ax[0].set_ylabel('log g offset', fontsize=16)    ax[1].set_ylabel(r'$\alpha$'+' offset', fontsize=16)    ax[2].set_ylabel('$T_{eff}$ offset', fontsize=16)    ax[3].set_ylabel('[M/H] offset', fontsize=16)    ax[0].legend(fontsize=12,loc='lower left')    ax[0].set_title('BOSZ and PHOENIX grid K-band offsets for all stars vs best-fit log g', fontsize=18)    #ax[-1].set_xlim(2500, 4500)    #plt.show()    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_fit_logg_ftest.png')    '''def make_model_three_order(spectrum1,spectrum2,spectrum3,grid, convolve=None):    if convolve is not None:        r_val = convolve    else:        r_val = 24000    interp1 = Interpolate(spectrum1)    convolve1 = InstrumentConvolveGrating.from_grid(grid, R=r_val)    rot1 = RotationalBroadening.from_grid(grid, vrot=np.array([10.0]))    norm1 = Normalize(spectrum1, 2)    interp2 = Interpolate(spectrum2)    convolve2 = InstrumentConvolveGrating.from_grid(grid, R=r_val)    norm2 = Normalize(spectrum2, 2)    interp3 = Interpolate(spectrum3)    convolve3 = InstrumentConvolveGrating.from_grid(grid, R=r_val)    norm3 = Normalize(spectrum3, 2)    model = grid | rot1 | Splitter3() | DopplerShift(vrad=0) & DopplerShift(vrad=0) & DopplerShift(vrad=0) | \                 convolve1 & convolve2 & convolve3 | interp1 & interp2 & interp3 | \                 norm1 & norm2 & norm3    return modeldef find_line_residuals(fitdir, fitname, g):    snr = 30.    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[0:-1]]    for name in cal_star_names:        if name in fitname:            starname = name            star_ind = cal_star_names.index(starname)            cal_star_info = cal_star_info_all[star_ind]            print starname, cal_star_info    result = MultiNestResult.from_hdf5(fitdir+fitname)    file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order34*.dat')    file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order35*.dat')    file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order36*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')    waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]    waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]    waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit    model = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, g)    for a in result.median.keys():        setattr(model, a, result.median[a])    w1, f1, w2, f2, w3, f3 = model()    res1 = starspectrum34.flux.value - f1    res2 = starspectrum35.flux.value - f2    res3 = starspectrum36.flux.value - f3    data_contin_coeffs34 = np.polyfit(starspectrum34.wavelength.value,starspectrum34.flux.value, 2)    data_contin_flux34 = data_contin_coeffs34[0]*starspectrum34.wavelength.value**2+data_contin_coeffs34[1]*starspectrum34.wavelength.value+data_contin_coeffs34[2]    data_contin34 = Spectrum1D.from_array(dispersion=starspectrum34.wavelength.value, flux=data_contin_flux34, dispersion_unit=u.angstrom, uncertainty=starspectrum34.uncertainty.value)    data_contin_coeffs35 = np.polyfit(starspectrum35.wavelength.value,starspectrum35.flux.value, 2)    data_contin_flux35 = data_contin_coeffs35[0]*starspectrum35.wavelength.value**2+data_contin_coeffs35[1]*starspectrum35.wavelength.value+data_contin_coeffs35[2]    data_contin35 = Spectrum1D.from_array(dispersion=starspectrum35.wavelength.value, flux=data_contin_flux35, dispersion_unit=u.angstrom, uncertainty=starspectrum35.uncertainty.value)    data_contin_coeffs36 = np.polyfit(starspectrum36.wavelength.value,starspectrum36.flux.value, 2)    data_contin_flux36 = data_contin_coeffs36[0]*starspectrum36.wavelength.value**2+data_contin_coeffs36[1]*starspectrum36.wavelength.value+data_contin_coeffs36[2]    data_contin36 = Spectrum1D.from_array(dispersion=starspectrum36.wavelength.value, flux=data_contin_flux36, dispersion_unit=u.angstrom, uncertainty=starspectrum36.uncertainty.value)    line_flux34 = data_contin34.flux.value - f1    line_flux35 = data_contin35.flux.value - f2    line_flux36 = data_contin36.flux.value - f3    w1 = w1 / (result.median['vrad_3'] / 3e5 + 1.0)    w2 = w2 / (result.median['vrad_4'] / 3e5 + 1.0)    w3 = w3 / (result.median['vrad_5'] / 3e5 + 1.0)    plt.plot(w1, data_contin34.flux.value, color = 'b')    plt.plot(w2, data_contin35.flux.value, color = 'b')    plt.plot(w3, data_contin36.flux.value, color = 'b')    plt.plot(w1, f1, color = 'b')    plt.plot(w2, f2, color = 'b')    plt.plot(w3, f3, color = 'b')    plt.plot(w1, line_flux34, color = 'r')    plt.plot(w2, line_flux35, color = 'r')    plt.plot(w3, line_flux36, color = 'r')    plt.show()    line_w1, line_names1 = plotlines.extract_lines(arcturus=True, wave_range=[np.amin(w1),np.amax(w1)])    line_res1 = []    for value in line_w1:        lname = line_names1[np.where(line_w1==value)]        idx = np.searchsorted(w1, value, side="left")        if idx > 0 and (idx == len(w1) or math.fabs(value - w1[idx - 1]) < math.fabs(value - w1[idx])):            lres = res1[idx-1]            lw = w1[idx-1]            line_res1 += [(lname[0].replace('$',''),lres,lw)]        else:            lres = res1[idx]            lw = w1[idx]            line_res1 += [(lname[0].replace('$',''),lres,lw)]    ew_bounds1 = [(22492,22498,'Fe'),(22671,22673.5,'Si')]    eqw_vals1 = []    for line in ew_bounds1:        sample_points = np.where((w1 >= line[0]) & (w1 <= line[1]))        print sample_points, w1[sample_points]        eqw = np.trapz(line_flux34[sample_points], w1[sample_points])        eqw = eqw/np.median(data_contin34.flux.value[sample_points])        eqw_vals1 += [(eqw, line[2], np.mean(line[0:2]))]    print eqw_vals1    line_w2, line_names2 = plotlines.extract_lines(arcturus=True, wave_range=[np.amin(w2),np.amax(w2),])    line_res2 = []    for value in line_w2:        lname = line_names2[np.where(line_w2==value)]        idx = np.searchsorted(w2, value, side="left")        if idx > 0 and (idx == len(w2) or math.fabs(value - w2[idx - 1]) < math.fabs(value - w2[idx])):            lres = res2[idx-1]            lw = w2[idx-1]            line_res2 += [(lname[0].replace('$',''),lres,lw)]        else:            lres = res2[idx]            lw = w2[idx]            line_res2 += [(lname[0].replace('$',''),lres,lw)]    ew_bounds2 = [(22088,22091.5,'Na'),(21921,21924,'Fe'),(21862.5,21866,'Fe')]    eqw_vals2 = []    for line in ew_bounds2:        sample_points = np.where((w2 >= line[0]) & (w2 <= line[1]))        eqw = np.trapz(line_flux35[sample_points], w2[sample_points])        eqw = eqw/np.median(data_contin35.flux.value[sample_points])        eqw_vals2 += [(eqw, line[2], np.mean(line[0:2]))]    print eqw_vals2    line_w3, line_names3 = plotlines.extract_lines(arcturus=True, wave_range=[np.amin(w3),np.amax(w3)])    line_res3 = []    for value in line_w3:        lname = line_names3[np.where(line_w3==value)]        idx = np.searchsorted(w3, value, side="left")        if idx > 0 and (idx == len(w3) or math.fabs(value - w3[idx - 1]) < math.fabs(value - w3[idx])):            lres = res3[idx-1]            lw = w3[idx-1]            line_res3 += [(lname[0].replace('$',''),lres,lw)]        else:            lres = res3[idx]            lw = w3[idx]            line_res3 += [(lname[0].replace('$',''),lres,lw)]    ew_bounds3 = [(21464,21467,'Mg'),(21457,21460,'Na'),(21377,21380,'Si'),(21288,21291,'Fe'),(21218,21221.5,'Mg')]    eqw_vals3 = []    for line in ew_bounds3:        sample_points = np.where((w3 >= line[0]) & (w3 <= line[1]))        eqw = np.trapz(line_flux36[sample_points], w3[sample_points])        eqw = eqw/np.median(data_contin36.flux.value[sample_points])        eqw_vals3 += [(eqw, line[2], np.mean(line[0:2]))]    line_res_total = np.concatenate((line_res1,line_res2,line_res3))    line_res_total = sorted(line_res_total, key=lambda x: x[0])    writestr = 'element\tresidual\twavelength\n'    for line in line_res_total:        writestr+=str(line[0])+'\t'+str(line[1])+'\t'+str(line[2])+'\n'    writestr += '\nelement\tequivalent width\twavelength\n'    for line in eqw_vals1:        writestr+=str(line[1])+'\t'+str(line[0])+'\t'+str(line[2])+'\n'    for line in eqw_vals2:        writestr+=str(line[1])+'\t'+str(line[0])+'\t'+str(line[2])+'\n'    for line in eqw_vals3:        writestr+=str(line[1])+'\t'+str(line[0])+'\t'+str(line[2])+'\n'    print writestr    outname = fitname.replace('.h5','')    f = open(fitdir+outname+'_line_residuals.txt','w+')    f.write(writestr)    f.close()def gc_spectra_teff_mh_plots():    snr = 30.    outputpath = 'gc_bosz_fits'    result_title = 'BOSZ'    if not os.path.exists('/u/rbentley/localcompute/fitting_plots/'+outputpath):        os.mkdir('/u/rbentley/localcompute/fitting_plots/'+outputpath)    gc_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/gc_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    print (gc_star_info_all)    #gc_star_info_all.sort(key=lambda x: x[1])    gc_star_names = ['NE_1_001', 'NE_1_002', 'NE_1_003', 'E7_1_001', 'E7_2_001', 'E7_1_002', 'E7_1_003', 'N2_1_001', 'E5_1_001', 'N2_1_002', 'N2_1_003', 'S1-23']    bosz_vals = {'teff': [], \                    'logg': [], \                    'mh': [], \                    'alpha': []}    ref_vals = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    osiris_vals = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz = load_full_grid_bosz()    nirspec_teff_sigma = 180.    nirspec_logg_sigma = 0.5    nirspec_mh_sigma = 0.17    nirspec_alpha_sigma = 0.18    nirspec_teff_offset = 145.    nirspec_logg_offset = 0.03    nirspec_mh_offset = 0.15    nirspec_alpha_offset = 0.19    nifs_teff_sigma = 420.    nifs_mh_sigma = 0.32    for name in gc_star_names:        star_ind = [x[0] for x in gc_star_info_all].index(name)        gc_star_info = gc_star_info_all[star_ind]        print (gc_star_info)        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + name + '_order34-36_bosz_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        bosz_sigmas['teff'] += [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + nirspec_teff_sigma**2 + 25**2)]        bosz_sigmas['logg'] += [np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + nirspec_logg_sigma**2 + 0.1**2)]        bosz_sigmas['mh'] += [np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + nirspec_mh_sigma**2 + 0.03**2)]        bosz_sigmas['alpha'] += [np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + nirspec_alpha_sigma**2 + 0.03**2)]        bosz_vals['teff'] += [bosz_result.median['teff_0'] + nirspec_teff_offset]        bosz_vals['logg'] += [bosz_result.median['logg_0'] + nirspec_logg_offset]        bosz_vals['mh'] += [bosz_result.median['mh_0'] + nirspec_mh_offset]        bosz_vals['alpha'] += [bosz_result.median['alpha_0'] + nirspec_alpha_offset]        if name is 'S1-23':            ref_vals['teff'] += [gc_star_info[2]]            ref_vals['mh'] += [gc_star_info[1]]            osiris_vals['teff'] += [gc_star_info[2]]            osiris_vals['mh'] += [gc_star_info[1]]        else:            ref_vals['teff'] += [gc_star_info[2]]            ref_vals['mh'] += [gc_star_info[1]]        if name == '2MJ18113-30441':            file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*_nod2.dat')            file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*_nod2.dat')            file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*_nod2.dat')            starspectrum34 = mtf.read_nsdrp_txt(file1, desired_wavelength_units='Angstrom')            starspectrum35 = mtf.read_nsdrp_txt(file2, desired_wavelength_units='Angstrom')            starspectrum36 = mtf.read_nsdrp_txt(file3, desired_wavelength_units='Angstrom')            waverange34 = [np.amin(starspectrum34.wavelength.value[20:2000]),                           np.amax(starspectrum34.wavelength.value[:2000])]            waverange35 = [np.amin(starspectrum35.wavelength.value[20:2000]),                           np.amax(starspectrum35.wavelength.value[:2000])]            waverange36 = [np.amin(starspectrum36.wavelength.value[20:2000]),                           np.amax(starspectrum36.wavelength.value[:2000])]            starspectrum34 = mtf.read_nsdrp_txt(file1, desired_wavelength_units='Angstrom', wave_range=waverange34)            starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(                snr)) * starspectrum34.flux.unit            starspectrum35 = mtf.read_nsdrp_txt(file2, desired_wavelength_units='Angstrom', wave_range=waverange35)            starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(                snr)) * starspectrum35.flux.unit            starspectrum36 = mtf.read_nsdrp_txt(file3, desired_wavelength_units='Angstrom', wave_range=waverange36)            starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(                snr)) * starspectrum36.flux.unit        else:            file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*.dat')            file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*.dat')            file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*.dat')            starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')            starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')            starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')            waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]            waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]            waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]            starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)            starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)            starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)            starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(                snr)) * starspectrum34.flux.unit            starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(                snr)) * starspectrum35.flux.unit            starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(                snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, bosz)        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        bw1, bf1, bw2, bf2, bw3, bf3 = bmodel()        bosz_res1 = starspectrum34.flux.value - bf1        bosz_res2 = starspectrum35.flux.value - bf2        bosz_res3 = starspectrum36.flux.value - bf3        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1)+len(bosz_res2)+len(bosz_res3))        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        if name is 'S1-23':            plt.text(22070, 0.65,'Star: ' + name +'\nOSIRIS $T_{eff}:$ '+ str(gc_star_info[2]) + '$\pm$' + str(nifs_teff_sigma) + '\nOSIRIS [M/H]: ' + str(gc_star_info[1]) + '$\pm$' + str(nifs_mh_sigma),fontsize=12, bbox=props)        else:            plt.text(22070, 0.65,'Star: ' + name +'\nNIFS $T_{eff}:$ '+ str(gc_star_info[2]) + '$\pm$' + str(nifs_teff_sigma) + '\nNIFS [M/H]: ' + str(gc_star_info[1]) + '$\pm$' + str(nifs_mh_sigma),fontsize=12, bbox=props)        plt.text(22070, 0.2,'BOSZ fit:\n$T_{eff}:$' + str(np.round_(bosz_result.median['teff_0'] + nirspec_teff_offset,decimals=2)) + '$\pm$' + str(np.round_(np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + nirspec_teff_sigma**2 + 25**2),decimals=2)) + \                 '\nlog g: ' + str(np.round_(bosz_result.median['logg_0'] + nirspec_logg_offset, decimals=2)) + '$\pm$' + str( np.round_(np.sqrt(((bosz_bounds['logg_0'][1] - bosz_bounds['logg_0'][0]) / 2) ** 2 + nirspec_logg_sigma ** 2 + 0.1**2),decimals=2)) + \                 '\n[M/H]: ' + str(np.round_(bosz_result.median['mh_0'] + nirspec_mh_offset,decimals=2))  + '$\pm$' + str(np.round_(np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + nirspec_mh_sigma**2 + 0.03**2),decimals=2)) + \                 '\n'+r'[$\alpha$/Fe]: ' + str(np.round_(bosz_result.median['alpha_0'] + nirspec_alpha_offset, decimals=2)) + '$\pm$' + str(np.round_(np.sqrt(((bosz_bounds['alpha_0'][1] - bosz_bounds['alpha_0'][0]) / 2) ** 2 + nirspec_alpha_sigma ** 2 + 0.03**2),decimals=2)) + \                 '\n$\chi^2$: '+str(np.round_(bosz_chi2,decimals=2)), fontsize=12, bbox=props)        plt.plot(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(bw2 / (bosz_result.median['vrad_4'] / 3e5 + 1.0), bf2, color='#33AFFF', label='BOSZ Model/Residuals',linewidth=5.0)        plt.plot(bw2 / (bosz_result.median['vrad_4'] / 3e5 + 1.0), bosz_res2, color='#33AFFF',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21900,22100)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title(result_title+' fits and residuals for '+name)        plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_spectrum_offset_corrected.png')        bosz_result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_corner.pdf')        #plt.show()        plt.clf()    fig = plt.figure(figsize=(16, 12))    ax = fig.add_subplot(111)    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    ax.errorbar(bosz_vals['mh'], bosz_vals['teff'], yerr=bosz_sigmas['teff'], xerr=bosz_sigmas['mh'], color='#3349FF',marker='.',label='NIRSPEC',ls='none', markersize=21)    ax.errorbar(ref_vals['mh'], ref_vals['teff'], xerr=nifs_mh_sigma, yerr=nifs_teff_sigma, color='#FF0000',marker='.',label='NIFS',ls='none', markersize=21)    ax.errorbar(osiris_vals['mh'], osiris_vals['teff'], xerr=nifs_mh_sigma, yerr=nifs_teff_sigma, color='g',marker='.',label='OSIRIS',ls='none', markersize=21)    connect_points(ax,bosz_vals['mh'],ref_vals['mh'], bosz_vals['teff'],ref_vals['teff'])    ax.set_xlabel('Best-fit [M/H]', fontsize=16)    ax.set_ylabel('$T_{eff}$', fontsize=16)    xaxmin, xaxmax = ax.get_xlim()    yaxmin, yaxmax = ax.get_ylim()    print yaxmin, yaxmax    ax.axvspan(-2., 0.75, ymin=0.29103, alpha=0.1, color='red',label='BOSZ grid extent')    #plt.axhline(y=3500., color='k', linestyle='--', label='BOSZ grid bounds',xmax=3500.)    #plt.axvline(x=0.5, color='k', linestyle='--',ymin=3500.)    ax.legend(fontsize=12,loc='lower left')    ax.set_title('$T_{eff}$ vs [M/H] for fits to NIRSPEC, NIFS, and OSIRIS spectra', fontsize=18)    #ax[-1].set_xlim(2500, 4500)    #plt.show()    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_teff_vs_mh_offset_corrected.png')def globular_abundances_with_gc(bulge=False):    #Vizier.ROW_LIMIT = 100000    #catalog_list = Vizier.find_catalogs('Pritzl, 2005')    #catalog = Vizier.get_catalogs(catalog_list.keys())['J/AJ/130/2140/table2']    #glob_alpha = catalog['__a_Fe_']    #glob_mh = catalog['__Fe_H_']    #glob_names = catalog['Cluster']    glob_cat = ascii.read('/u/rbentley/glob_info_full.txt')    mh_flags = glob_cat['f_[Fe/H]']    glob_mh = glob_cat['[Fe/H]']    glob_alpha = glob_cat['[a/Fe]']    glob_names = glob_cat['Name']    glob_mean_idx = np.where((mh_flags=='b')&(glob_names != 'Pal 6'))    glob_mh = glob_mh[glob_mean_idx]    glob_alpha = glob_alpha[glob_mean_idx]    glob_names = glob_names[glob_mean_idx]    dg_glob_mean_idx = np.where(((glob_names=='Rup 106') | (glob_names=='Pal 12') | (glob_names=='Ter 7')))    dg_glob_mh = glob_mh[dg_glob_mean_idx]    dg_glob_alpha = glob_alpha[dg_glob_mean_idx]    dg_glob_names = glob_names[dg_glob_mean_idx]    glob_mh = np.delete(glob_mh, dg_glob_mean_idx)    glob_alpha = np.delete(glob_alpha, dg_glob_mean_idx)    glob_names = np.delete(glob_names, dg_glob_mean_idx)    gc_fit_path = '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/'    cal_fit_path = '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/sl_masked/'    ne_1_003 = MultiNestResult.from_hdf5(gc_fit_path+'NE_1_003_order34-36_bosz_adderr.h5')    n2_1_002 = MultiNestResult.from_hdf5(gc_fit_path+'N2_1_002_order34-36_bosz_adderr.h5')    n2_1_003 = MultiNestResult.from_hdf5(gc_fit_path+'N2_1_003_order34-36_bosz_adderr.h5')    mh_sig = [np.sqrt(((ne_1_003.calculate_sigmas(1)['mh_0'][1] - ne_1_003.calculate_sigmas(1)['mh_0'][0]) / 2.)**2 + 0.17**2), np.sqrt(((n2_1_002.calculate_sigmas(1)['mh_0'][1] - n2_1_002.calculate_sigmas(1)['mh_0'][0]) / 2.)**2 + 0.17**2), +\                np.sqrt(((n2_1_003.calculate_sigmas(1)['mh_0'][1] - n2_1_003.calculate_sigmas(1)['mh_0'][0]) / 2.)**2 + 0.17**2)]    a_sig = [np.sqrt(((ne_1_003.calculate_sigmas(1)['alpha_0'][1] - ne_1_003.calculate_sigmas(1)['alpha_0'][0]) / 2.)**2 + 0.17**2), np.sqrt(((n2_1_002.calculate_sigmas(1)['alpha_0'][1] - n2_1_002.calculate_sigmas(1)['alpha_0'][0]) / 2.)**2 + 0.17**2), +\                np.sqrt(((n2_1_003.calculate_sigmas(1)['alpha_0'][1] - n2_1_003.calculate_sigmas(1)['alpha_0'][0]) / 2.)**2 + 0.17**2)]    m71_021 = MultiNestResult.from_hdf5(cal_fit_path+'mh_masked_sl_cutoff_0.0_M71_J19534827+1848021_order34-36_bosz_adderr.h5')    m5_208 = MultiNestResult.from_hdf5(cal_fit_path+'mh_masked_sl_cutoff_0.0_M5 J15190+0208_order34-36_bosz_adderr.h5')    if bulge:        apogee_bulge = pd.read_csv('/u/rbentley/Downloads/APOGEE_DR16_inner2deg_csv.dat')        bulge_mh = apogee_bulge['M_H']        bulge_alpha = apogee_bulge['ALPHA_M']    else:        sagdeg_vals = list(scipy.genfromtxt('/u/rbentley/sagdeg_abundances_monaco2005.txt', delimiter='\t', skip_header=1, dtype=float))        sagdeg_vals2 = list(scipy.genfromtxt('/u/rbentley/sagdeg_abundances_bonifacio2004.txt', skip_header=0, dtype=float))        sagdeg_alpha = [x[3]/2.+x[2]/2. for x in sagdeg_vals]        sagdeg_mh = [x[1] for x in sagdeg_vals]        sagdeg_alpha2 = [x[3]/3.+x[5]/2. for x in sagdeg_vals2]        sagdeg_mh2 = [x[1] for x in sagdeg_vals2]        Vizier.ROW_LIMIT = 100000        catalog_list = Vizier.find_catalogs('Hill, 2019')        catalog = Vizier.get_catalogs(catalog_list.keys())['J/A+A/626/A15/tablec5']        masked = np.ma.nonzero(catalog['__Mg_Fe_'])        sculptor_mg = catalog['__Mg_Fe_'][masked]        sculptor_ca = catalog['__Ca_Fe_'][masked]        sculptor_mh = catalog['__Fe_H_'][masked]        sculptor_alpha = np.mean(np.array([sculptor_mg, sculptor_ca]), axis=0)        fornax = scipy.genfromtxt('/u/rbentley/fornax_abundances_letarte2010.txt', skip_header=1, dtype=None)        fornax_mh = [x[8] for x in fornax]        fornax_alpha = [x[6]/2.+x[2]/2. for x in fornax]        carina = scipy.genfromtxt('/u/rbentley/carina_abundances_norris2017.txt', skip_header=3, dtype=None, delimiter='\t')        carina_mh = [x[1] for x in carina]        carina_alpha = [np.mean([x[3],x[5]]) for x in carina]    gc_mh = [ne_1_003.median['mh_0']+0.17, n2_1_002.median['mh_0']+0.17, n2_1_003.median['mh_0']+0.17]    gc_alpha = [ne_1_003.median['alpha_0']+0.18, n2_1_002.median['alpha_0']+0.18, n2_1_003.median['alpha_0']+0.18]    cal_mh = [m71_021.median['mh_0']+0.17, m5_208.median['mh_0']+0.17]    cal_alpha = [m71_021.median['alpha_0']+0.18, m5_208.median['alpha_0']+0.18]    if bulge:        plt.errorbar(bulge_mh, bulge_alpha, color='g', marker='.',label='APOGEE (Inner 2 deg)', ls='none', markersize=4)    else:        plt.errorbar(sagdeg_mh, sagdeg_alpha, xerr=0., yerr=0., color = 'g', marker = 'X', label = 'Sgr dSph Stars (Monaco et al. 2005, Bonifacio et al. 2004)', ls = 'none', markersize = 10)        plt.errorbar(sagdeg_mh2, sagdeg_alpha2, xerr=0., yerr=0., color = 'g', marker = 'X', ls = 'none', markersize = 10) #        plt.errorbar(sculptor_mh, sculptor_alpha, xerr=0., yerr=0., color = '#59bf43', marker = '.', label = 'Sculptor Dwarf Stars (Hill et al. 2019)', ls = 'none', markersize = 10) #'#43bfa9'        plt.errorbar(fornax_mh, fornax_alpha, xerr=0., yerr=0., color = '#59bf43', marker = '>', label = 'Fornax Dwarf Stars (Letarte et al. 2010)', ls = 'none', markersize = 10) #'#4397bf'        plt.errorbar(carina_mh, carina_alpha, xerr=0., yerr=0., color = '#59bf43', marker = 'v', label = 'Carina Dwarf Stars (Norris et al. 2010)', ls = 'none', markersize = 10) #'#ded953'    plt.errorbar(glob_mh,glob_alpha, xerr=0.05, yerr=0.1, color='#FF0000',marker='s',label='Mean Globular Cluster values',ls='none', markersize=10)    plt.errorbar(dg_glob_mh,dg_glob_alpha, xerr=0.05, yerr=0.1, color='b',marker='D',label='Mean Dwarf Galaxy Cluster values',ls='none', markersize=10)    plt.errorbar(gc_mh, gc_alpha, xerr=mh_sig, yerr=a_sig, color = 'k', marker = '.', label = 'Galactic Center Stars (mean fit offset applied)', ls = 'none', markersize = 21)    #plt.errorbar(cal_mh, cal_alpha, xerr=0.17, yerr=0.17, color = '#FEBE4E', marker = '.', label = 'Globular Cluster Calibrators', ls = 'none', markersize = 21)    plt.legend(fontsize=16)    plt.xlabel('[M/H]')    plt.ylabel(r'[$\alpha$/Fe]')    if bulge:        plt.title('Alpha Abundance vs Metallicity for globular clusters, MW bulge, and galactic center stars')    else:        plt.title('Alpha Abundance vs Metallicity for globular cluster, Sgr dSph, and galactic center stars')    plt.axhline(y=0., color='k', linestyle='--')    plt.axvline(x=0., color='k', linestyle='--')    #plt.text(ne_1_003.median['mh_0'], ne_1_003.median['alpha_0'],'NE_1_003')    #plt.text(n2_1_002.median['mh_0'], n2_1_002.median['alpha_0'],'N2_1_002')    #plt.text(n2_1_003.median['mh_0'], n2_1_003.median['alpha_0'],'N2_1_003')    #plt.text(m71_021.median['mh_0'], m71_021.median['alpha_0'],'M71_J19534827+1848021')    #plt.text(m5_208.median['mh_0'], m5_208.median['alpha_0'],'M5 J15190+0208')    plt.show()def alpha_line_residual_highlighed(grids=None):    snr = 30.    outputpath = 'umasked_only'    result_title = 'BOSZ'    if not os.path.exists('/u/rbentley/localcompute/fitting_plots/'+outputpath):        os.mkdir('/u/rbentley/localcompute/fitting_plots/'+outputpath)    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info_corrected.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[:-1]]    bosz_vals = {'teff': [], \                    'logg': [], \                    'mh': [], \                    'alpha': []}    bosz_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    if grids is not None:        bosz = grids    else:        bosz = load_full_grid_bosz()    for name in cal_star_names:        star_ind = cal_star_names.index(name)        cal_star_info = cal_star_info_all[star_ind]        bosz_result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/sl_masked/mh_masked_sl_cutoff_0.0_' + name + '_order34-36_bosz_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        bosz_sigmas['teff'] += [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2)]        bosz_sigmas['logg'] += [np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2)]        bosz_sigmas['mh'] += [np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2)]        bosz_sigmas['alpha'] += [np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        bosz_sigmas_one = [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\                           np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\                           np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\                           np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        bosz_sigmas_one = np.around(bosz_sigmas_one, decimals=2)        print bosz_sigmas_one, cal_star_info        bosz_vals['teff'] += [bosz_result.median['teff_0']]        bosz_vals['logg'] += [bosz_result.median['logg_0']]        bosz_vals['mh'] += [bosz_result.median['mh_0']]        bosz_vals['alpha'] += [bosz_result.median['alpha_0']]        bosz_offsets['teff'] += [bosz_result.median['teff_0']-cal_star_info[2]]        bosz_offsets['logg'] += [bosz_result.median['logg_0']-cal_star_info[3]]        bosz_offsets['mh'] += [bosz_result.median['mh_0']-cal_star_info[1]]        bosz_offsets['alpha'] += [bosz_result.median['alpha_0']-cal_star_info[4]]        if name == '2MJ18113-30441':            file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*_nod2.dat')            file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*_nod2.dat')            file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*_nod2.dat')            starspectrum34 = mtf.read_nsdrp_txt(file1, desired_wavelength_units='Angstrom')            starspectrum35 = mtf.read_nsdrp_txt(file2, desired_wavelength_units='Angstrom')            starspectrum36 = mtf.read_nsdrp_txt(file3, desired_wavelength_units='Angstrom')            waverange34 = [np.amin(starspectrum34.wavelength.value[20:2000]),                           np.amax(starspectrum34.wavelength.value[:2000])]            waverange35 = [np.amin(starspectrum35.wavelength.value[20:2000]),                           np.amax(starspectrum35.wavelength.value[:2000])]            waverange36 = [np.amin(starspectrum36.wavelength.value[20:2000]),                           np.amax(starspectrum36.wavelength.value[:2000])]            starspectrum34 = mtf.read_nsdrp_txt(file1, desired_wavelength_units='Angstrom', wave_range=waverange34)            starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(                snr)) * starspectrum34.flux.unit            starspectrum35 = mtf.read_nsdrp_txt(file2, desired_wavelength_units='Angstrom', wave_range=waverange35)            starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(                snr)) * starspectrum35.flux.unit            starspectrum36 = mtf.read_nsdrp_txt(file3, desired_wavelength_units='Angstrom', wave_range=waverange36)            starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(                snr)) * starspectrum36.flux.unit        else:            file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order34*.dat')            file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order35*.dat')            file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + name + '_order36*.dat')            starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')            starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')            starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')            waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]            waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]            waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]            starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)            starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)            starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)            starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(                snr)) * starspectrum34.flux.unit            starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(                snr)) * starspectrum35.flux.unit            starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(                snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34,starspectrum35,starspectrum36, bosz)        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        bw1, bf1, bw2, bf2, bw3, bf3 = bmodel()        bosz_res1 = starspectrum34.flux.value - bf1        bosz_res2 = starspectrum35.flux.value - bf2        bosz_res3 = starspectrum36.flux.value - bf3        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum34.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res2) ** 2 / (starspectrum35.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2+np.sum((bosz_res3) ** 2 / (starspectrum36.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / (len(bosz_res1)+len(bosz_res2)+len(bosz_res3))        bosz_deltas = np.around([bosz_result.median['teff_0'] - cal_star_info[2], bosz_result.median['logg_0'] - cal_star_info[3],                  bosz_result.median['mh_0'] - cal_star_info[1], bosz_result.median['alpha_0'] - cal_star_info[4]],decimals=2)        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        plt.text(22035, 0.7,                 'APOGEE fitted parameters:\n$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$\alpha$:' + str(cal_star_info[4]) +'$\pm$'+ str(cal_star_info[9]),fontsize=12, bbox=props)        plt.text(22035, 0.45,                 'BOSZ fit offsets:\n$\Delta T_{eff}:$' + str(bosz_deltas[0]) +'$\pm$'+ str(bosz_sigmas_one[0]) + '\n$\Delta log g:$' + str(bosz_deltas[1]) +'$\pm$'+ str(bosz_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(bosz_deltas[2]) +'$\pm$'+ str(bosz_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(bosz_deltas[3]) +'$\pm$'+ str(bosz_sigmas_one[3]) + '\n$\chi^2$:' + str(np.round_(bosz_chi2,decimals=2)),                 fontsize=12, bbox=props)        #22035        '''        plt.text(22035, 0.2,                 'PHOENIX fit offsets:\n$\Delta T_{eff}:$' + str(phoenix_deltas[0]) +'$\pm$'+ str(phoenix_sigmas_one[0]) + '\n$\Delta log g:$' + str(phoenix_deltas[1]) +'$\pm$'+ str(phoenix_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(phoenix_deltas[2]) +'$\pm$'+ str(phoenix_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(phoenix_deltas[3]) +'$\pm$'+ str(phoenix_sigmas_one[3]) + '\n$\chi^2$:' + str(np.round_(phoenix_chi2,decimals=2)),                 fontsize=12, bbox=props)        plt.text(22035, 0.65,'APOGEE fitted parameters:\n$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$\alpha$:' + str(cal_star_info[4]) +'$\pm$'+ str(cal_star_info[9]),fontsize=12, bbox=props)        plt.text(22035, 0.4,'BOSZ fit offsets:\n$\Delta T_{eff}:$' + str(bosz_deltas[0]) +'$\pm$'+ str(bosz_sigmas_one[0]) + '\n$\Delta log g:$' + str(bosz_deltas[1]) +'$\pm$'+ str(bosz_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(bosz_deltas[2]) +'$\pm$'+ str(bosz_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(bosz_deltas[3]) +'$\pm$'+ str(bosz_sigmas_one[3]), fontsize=12, bbox=props)        #22035        plt.text(22035, 0.1,'PHOENIX fit offsets:\n$\Delta T_{eff}:$' + str(phoenix_deltas[0]) +'$\pm$'+ str(phoenix_sigmas_one[0]) + '\n$\Delta log g:$' + str(phoenix_deltas[1]) +'$\pm$'+ str(phoenix_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(phoenix_deltas[2]) +'$\pm$'+ str(phoenix_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(phoenix_deltas[3]) +'$\pm$'+ str(phoenix_sigmas_one[3]),fontsize=12, bbox=props)        plt.text(22090, 0.65,'Cluster: NGC 6791\n$T_{eff}:$' + str(cal_star_info[2]) +'$\pm$'+ str(cal_star_info[7]) + '\n$log g:$' + str(cal_star_info[3]) +'$\pm$'+ str(cal_star_info[8]) + \                 '\n$[M/H]:$' + str(cal_star_info[1]) +'$\pm$'+ str(cal_star_info[6]) + '\n'+r'$\alpha$:' + str(cal_star_info[4]) +'$\pm$'+ str(cal_star_info[9]),fontsize=12, bbox=props)        plt.text(22090, 0.4,'BOSZ fit offsets:\n$\Delta T_{eff}:$' + str(bosz_deltas[0]) +'$\pm$'+ str(bosz_sigmas_one[0]) + '\n$\Delta log g:$' + str(bosz_deltas[1]) +'$\pm$'+ str(bosz_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(bosz_deltas[2]) +'$\pm$'+ str(bosz_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(bosz_deltas[3]) +'$\pm$'+ str(bosz_sigmas_one[3]), fontsize=12, bbox=props)        #22035        plt.text(22090, 0.1,'PHOENIX fit offsets:\n$\Delta T_{eff}:$' + str(phoenix_deltas[0]) +'$\pm$'+ str(phoenix_sigmas_one[0]) + '\n$\Delta log g:$' + str(phoenix_deltas[1]) +'$\pm$'+ str(phoenix_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(phoenix_deltas[2]) +'$\pm$'+ str(phoenix_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(phoenix_deltas[3]) +'$\pm$'+ str(phoenix_sigmas_one[3]),fontsize=12, bbox=props)        '''        plt.plot(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0), starspectrum34.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0), starspectrum35.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0), starspectrum36.flux.value,                 color='#000000',linewidth=5.0)        plt.plot(bw2 / (bosz_result.median['vrad_4'] / 3e5 + 1.0), bf2, color='#33AFFF', label='BOSZ Model/Residuals',linewidth=5.0)        plt.plot(bw2 / (bosz_result.median['vrad_4'] / 3e5 + 1.0), bosz_res2, color='#33AFFF',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21900,22100)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title(result_title+' fits and residuals for '+name)        plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        f = open('/u/rbentley/localcompute/fitting_plots/umasked_only/'+name+'line_residuals.txt', 'w')        f.write('line source\tcentral wavelength\tcentral wavelength residual\tupper wavelength\tupper wavelength residual\tlower wavelength\t' +\            'lower wavelength residual\thigh residual line\talpha element line\n')        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False, wave_range=(np.amin(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0)),np.amax(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0))))        for i in range(len(linelocs)):            line = linelocs[i]            central_residual_idx = int(np.where(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0) == (closest(starspectrum34.wavelength.value / (bosz_result.median['vrad_3'] / 3e5 + 1.0), line)))[0])            print central_residual_idx, linelabels[i], linelocs[i]            central_residual = bosz_res2[central_residual_idx]            f.write(linelabels[i].replace('$','')+'\t'+str(line)+'\t'+str(central_residual)+'\t')            if not (central_residual_idx == len(bosz_res1)-2 or central_residual_idx == len(bosz_res1)-1):                upper_residual = bosz_res1[central_residual_idx+2]                f.write(str(starspectrum34.wavelength.value[central_residual_idx+2] / (bosz_result.median['vrad_3'] / 3e5 + 1.0))+'\t'+str(upper_residual)+'\t')            else:                upper_residual = bosz_res1[central_residual_idx]                f.write(str(starspectrum34.wavelength.value[central_residual_idx] / (bosz_result.median['vrad_3'] / 3e5 + 1.0))+'\t'+str(upper_residual)+'\t')            if not (central_residual_idx == 1 or central_residual_idx == 0):                lower_residual = bosz_res1[central_residual_idx-2]                f.write(str(starspectrum34.wavelength.value[central_residual_idx-2] / (bosz_result.median['vrad_3'] / 3e5 + 1.0))+'\t'+str(lower_residual)+'\t')            else:                lower_residual = bosz_res1[central_residual_idx]                f.write(str(starspectrum34.wavelength.value[central_residual_idx] / (bosz_result.median['vrad_3'] / 3e5 + 1.0))+'\t'+str(lower_residual)+'\t')            print central_residual, lower_residual, upper_residual            if (abs(central_residual) > 0.05) or (abs(lower_residual) > 0.05) or (abs(upper_residual) > 0.05):                plt.axvline(x=line, color='r', linestyle='--', alpha=0.5)                f.write('*\t')            else:                f.write('\t')            if linelabels[i].replace('$', '') in ['O', 'Ne', 'Mg', 'Si', 'S', 'Ca', 'Ti', 'C']:                f.write('*\n')            else:                f.write('\n')        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False, wave_range=(np.amin(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0)),np.amax(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0))))        for i in range(len(linelocs)):            line = linelocs[i]            central_residual_idx = int(np.where(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0) == (closest(starspectrum35.wavelength.value / (bosz_result.median['vrad_4'] / 3e5 + 1.0), line)))[0])            print central_residual_idx, linelabels[i], linelocs[i]            central_residual = bosz_res2[central_residual_idx]            f.write(linelabels[i].replace('$','')+'\t'+str(line)+'\t'+str(central_residual)+'\t')            if not (central_residual_idx == len(bosz_res2)-2 or central_residual_idx == len(bosz_res2)-1):                upper_residual = bosz_res2[central_residual_idx+2]                f.write(str(starspectrum35.wavelength.value[central_residual_idx+2] / (bosz_result.median['vrad_4'] / 3e5 + 1.0))+'\t'+str(upper_residual)+'\t')            else:                upper_residual = bosz_res2[central_residual_idx]                f.write(str(starspectrum35.wavelength.value[central_residual_idx] / (bosz_result.median['vrad_4'] / 3e5 + 1.0))+'\t'+str(upper_residual)+'\t')            if not (central_residual_idx == 1 or central_residual_idx == 0):                lower_residual = bosz_res2[central_residual_idx-2]                f.write(str(starspectrum35.wavelength.value[central_residual_idx-2] / (bosz_result.median['vrad_4'] / 3e5 + 1.0))+'\t'+str(lower_residual)+'\t')            else:                lower_residual = bosz_res2[central_residual_idx]                f.write(str(starspectrum35.wavelength.value[central_residual_idx] / (bosz_result.median['vrad_4'] / 3e5 + 1.0))+'\t'+str(lower_residual)+'\t')            if (abs(central_residual) > 0.05) or (abs(lower_residual) > 0.05) or (abs(upper_residual) > 0.05):                plt.axvline(x=line, color='r', linestyle='--', alpha=0.5)                f.write('*\t')            else:                f.write('\t')            if linelabels[i].replace('$', '') in ['O', 'Ne', 'Mg', 'Si', 'S', 'Ca', 'Ti', 'C']:                f.write('*\n')            else:                f.write('\n')        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False, wave_range=(np.amin(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0)),np.amax(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0))))        for i in range(len(linelocs)):            line = linelocs[i]            central_residual_idx = int(np.where(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0) == (closest(starspectrum36.wavelength.value / (bosz_result.median['vrad_5'] / 3e5 + 1.0), line)))[0])            print central_residual_idx, linelabels[i], linelocs[i]            central_residual = bosz_res3[central_residual_idx]            f.write(linelabels[i].replace('$','')+'\t'+str(line)+'\t'+str(central_residual)+'\t')            if not (central_residual_idx == len(bosz_res3)-2 or central_residual_idx == len(bosz_res3)-1):                upper_residual = bosz_res3[central_residual_idx+2]                f.write(str(starspectrum36.wavelength.value[central_residual_idx+2] / (bosz_result.median['vrad_5'] / 3e5 + 1.0))+'\t'+str(upper_residual)+'\t')            else:                upper_residual = bosz_res3[central_residual_idx]                f.write(str(starspectrum36.wavelength.value[central_residual_idx] / (bosz_result.median['vrad_5'] / 3e5 + 1.0))+'\t'+str(upper_residual)+'\t')            if not (central_residual_idx == 1 or central_residual_idx == 0):                lower_residual = bosz_res3[central_residual_idx-2]                f.write(str(starspectrum36.wavelength.value[central_residual_idx-2] / (bosz_result.median['vrad_5'] / 3e5 + 1.0))+'\t'+str(lower_residual)+'\t')            else:                lower_residual = bosz_res3[central_residual_idx]                f.write(str(starspectrum36.wavelength.value[central_residual_idx] / (bosz_result.median['vrad_5'] / 3e5 + 1.0))+'\t'+str(lower_residual)+'\t')            if (abs(central_residual) > 0.05) or (abs(lower_residual) > 0.05) or (abs(upper_residual) > 0.05):                plt.axvline(x=line, color='r', linestyle='--', alpha=0.5)                f.write('*\t')            else:                f.write('\t')            if linelabels[i].replace('$','') in ['O', 'Ne', 'Mg', 'Si', 'S', 'Ca', 'Ti', 'C']:                f.write('*\n')            else:                f.write('\n')        plt.axvline(x=-100, color='r', linestyle='--', label='Line with >5% residual')        f.close()        plt.savefig('/u/rbentley/localcompute/fitting_plots/umasked_only/'+name+'_'+result_title+'_alpha_lines_highlighted.png')        plt.clf()def closest(lst, K):    return lst[min(range(len(lst)), key=lambda i: abs(lst[i] - K))]def line_grid_plot(g):    cal_star_info_all = list(        scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[:-1]]    snr = 30.    plot_stars = ['TYC 3544', 'NGC6791_J19205+3748282', 'NGC6819_J19411+4010517']    #plot_stars = ['NGC6791_J19213390+3750202', 'NGC6819_J19413439+4017482', 'M71_J19534827+1848021', 'M5 J15190+0208']    fig, axs = plt.subplots(len(plot_stars), 6, sharex='col', sharey='row',                            gridspec_kw={'hspace': 0.7, 'wspace': 0.6}, figsize=(21, 15))    axs = np.array(axs).T.tolist()    si1_ax, si2_ax, s1_ax, fe1_ax, fe2_ax, fe3_ax = axs    for k in range(len(plot_stars)):        starname = plot_stars[k]        star_ind = cal_star_names.index(starname)        cal_star_info = cal_star_info_all[star_ind]        result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + starname + '_order34-36_bosz_adderr.h5')        print result        file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order34*.dat')        file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order35*.dat')        file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order36*.dat')        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]        waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]        waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)        starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit        starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit        starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g)        for a in result.median.keys():            setattr(bmodel, a, result.median[a])        setattr(bmodel, 'vrad_3', 0.0)        setattr(bmodel, 'vrad_4', 0.0)        setattr(bmodel, 'vrad_5', 0.0)        w1, f1, w2, f2, w3, f3 = bmodel()        setattr(bmodel, 'teff_0', cal_star_info[2])        setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', cal_star_info[1])        setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        '''        cont34 = []        for s in np.linspace(22400, 22750, 8):            data_idx = np.where((w1 >= s) & (w1 <= s + 50))[0]            if (s + 50 <= np.amax(w1)) & (s >= np.amin(w1)):                cont34 += [(np.median(f1[data_idx]), s, s + 50)]        cont35 = []        for s in np.linspace(21750, 22100, 8):            data_idx = np.where((w2 >= s) & (w2 <= s + 50))[0]            if (s + 50 <= np.amax(w2)) & (s >= np.amin(w2)):                cont35 += [(np.median(f2[data_idx]), s, s + 50)]        cont36 = []        for s in np.linspace(21150, 21500, 8):            data_idx = np.where((w3 >= s) & (w3 <= s + 50))[0]            if (s + 50 <= np.amax(w3)) & (s >= np.amin(w3)):                cont36 += [(np.median(f3[data_idx]), s, s + 50)]        '''        si1_range = [21925, 21936]        si1_ew_range = [21930, 21932]        cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        d_cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.98))[0]        si1_cont_b = (np.median(f2[cont_idx]) + 0.3*np.std(f2[cont_idx]))*np.ones(len(w2))#np.amax(f2[cont_idx])*np.ones(len(w2))        si1_cont_a = np.amax(af2[cont_idx])*np.ones(len(w2))        si1_cont_d = (np.median(starspectrum35.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum35.flux.value[d_cont_idx]))*np.ones(len(w2)) #starspectrum35.wavelength.value**2*p_fit[0] + p_fit[1]*starspectrum35.wavelength.value + p_fit[2]        si2_range = [21371.5, 21384.8]        si2_ew_range = [21377.1, 21379.8]        cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        d_cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.98))[0]        si2_cont_b = (np.median(f3[cont_idx]) + 0.3*np.std(f3[cont_idx]))*np.ones(len(w3))#np.amax(f3[cont_idx])*np.ones(len(w2))        si2_cont_a = np.amax(af3[cont_idx])*np.ones(len(w2))        si2_cont_d  = (np.median(starspectrum36.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum36.flux.value[d_cont_idx]))*np.ones(len(w3))        s1_range = [22503, 22523]        s1_ew_range = [22512, 22514.8]        cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.97))[0]        s1_cont_b = (np.median(f1[cont_idx]) + 0.3*np.std(f1[cont_idx]))*np.ones(len(w1))#np.amax(f1[cont_idx])*np.ones(len(w2))        s1_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        s1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe1_range = [22464., 22474.]        fe1_ew_range = [22468.3, 22471.1]        cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.97))[0]        fe1_cont_b = (np.median(f1[cont_idx]) + 0.3*np.std(f1[cont_idx]))*np.ones(len(w1))#np.amax(f1[cont_idx])*np.ones(len(w2))        fe1_cont_a = (np.median(af1[cont_idx]) + 0.3*np.std(af1[cont_idx]))*np.ones(len(aw1))#np.amax(af1[cont_idx])*np.ones(len(w2))        fe1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe2_range = [22474., 22484.]        fe2_ew_range = [22478., 22480.9]        d_cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.97))[0]        fe2_cont_b = (np.median(f1[cont_idx]) + 0.3*np.std(f1[cont_idx]))*np.ones(len(w1))#np.amax(f1[cont_idx])*np.ones(len(w2))        fe2_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe2_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe3_range = [22495., 22505.]        fe3_ew_range = [22498.7, 22501.2]        d_cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (f1 > 0.97))[0]        fe3_cont_b = (np.median(f1[cont_idx]) + 0.3*np.std(f1[cont_idx]))*np.ones(len(w1))#np.amax(f1[cont_idx])*np.ones(len(w2))        fe3_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe3_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        print np.array(f2).shape, np.array(w2).shape, np.array(si1_cont_b).shape        b_si1_ew = rvmeasure.equivalent_width(w2, f2, specRange=si1_ew_range,continuum=si1_cont_b)  # Si line        print b_si1_ew        b_si2_ew = rvmeasure.equivalent_width(w3, f3, specRange=si2_ew_range,                                              continuum=si2_cont_b)  # Si line        b_s1_ew = rvmeasure.equivalent_width(w1, f1, specRange=s1_ew_range,                                             continuum=s1_cont_b)  # S line        b_fe1_ew = rvmeasure.equivalent_width(w1, f1,                                              specRange=fe1_ew_range, continuum=fe1_cont_b)  # Fe line        b_fe2_ew = rvmeasure.equivalent_width(w1, f1, specRange=fe2_ew_range,                                              continuum=fe2_cont_b)  # Fe line        b_fe3_ew = rvmeasure.equivalent_width(w1, f1,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_b)  # Fe line        b_si1_ew_err = ew_monte_carlo(w2, f2, si1_ew_range, si1_cont_b)        b_si2_ew_err = ew_monte_carlo(w3, f3, si2_ew_range, si2_cont_b)        b_s1_ew_err = ew_monte_carlo(w1, f1, s1_ew_range, s1_cont_b)        b_fe1_ew_err = ew_monte_carlo(w1, f1, fe1_ew_range, fe1_cont_b)        b_fe2_ew_err = ew_monte_carlo(w1, f1, fe2_ew_range, fe2_cont_b)        b_fe3_ew_err = ew_monte_carlo(w1, f1, fe3_ew_range, fe3_cont_b)        d_w1 = starspectrum34.wavelength.value / (result.median['vrad_3'] / 3e5 + 1.0)        d_w2 = starspectrum35.wavelength.value / (result.median['vrad_4'] / 3e5 + 1.0)        d_w3 = starspectrum36.wavelength.value / (result.median['vrad_5'] / 3e5 + 1.0)        d_si1_ew = rvmeasure.equivalent_width(d_w2, starspectrum35.flux.value, specRange=si1_ew_range,                                              continuum=si1_cont_d)  # Si line        d_si2_ew = rvmeasure.equivalent_width(d_w3, starspectrum36.flux.value, specRange=si2_ew_range,                                              continuum=si1_cont_d)  # Si line        d_s1_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=s1_ew_range,                                             continuum=s1_cont_d)  # S line        d_fe1_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=fe1_ew_range,                                              continuum=fe1_cont_d)  # Fe line        d_fe2_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=fe2_ew_range,                                              continuum=fe2_cont_d)  # Fe line        d_fe3_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_d)  # Fe line        d_si1_ew_err = ew_monte_carlo(d_w2, starspectrum35.flux.value, si1_ew_range, si1_cont_d)        d_si2_ew_err = ew_monte_carlo(d_w3, starspectrum36.flux.value, si2_ew_range, si2_cont_d)        d_s1_ew_err = ew_monte_carlo(d_w1, starspectrum34.flux.value, s1_ew_range, s1_cont_d)        d_fe1_ew_err = ew_monte_carlo(d_w1, starspectrum34.flux.value, fe1_ew_range, fe1_cont_d)        d_fe2_ew_err = ew_monte_carlo(d_w1, starspectrum34.flux.value, fe2_ew_range, fe2_cont_d)        d_fe3_ew_err = ew_monte_carlo(d_w1, starspectrum34.flux.value, fe3_ew_range, fe3_cont_d)        a_si1_ew = rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                              continuum=si1_cont_a)  # Si line        a_si2_ew = rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                              continuum=si2_cont_a)  # Si line        a_s1_ew = rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                             continuum=s1_cont_a)  # S line        a_fe1_ew = rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe1_ew_range, continuum=fe1_cont_a)  # Fe line        a_fe2_ew = rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                              continuum=fe2_cont_a)  # Fe line        a_fe3_ew = rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_a)  # Fe line        a_si1_ew_err = ew_monte_carlo(aw2, af2, si1_ew_range, si1_cont_a)        a_si2_ew_err = ew_monte_carlo(aw3, af3, si2_ew_range, si2_cont_a)        a_s1_ew_err = ew_monte_carlo(aw1, af1, s1_ew_range, s1_cont_a)        a_fe1_ew_err = ew_monte_carlo(aw1, af1, fe1_ew_range, fe1_cont_a)        a_fe2_ew_err = ew_monte_carlo(aw1, af1, fe2_ew_range, fe2_cont_a)        a_fe3_ew_err = ew_monte_carlo(aw1, af1, fe3_ew_range, fe3_cont_a)        print k        si1_ax[k].set_ylabel(starname+'\nAPOGEE [M/H]: ' + str(cal_star_info[1]) + '\nBest-fit [M/H]: '+ str(np.round_(result.median['mh_0'], decimals=3)), fontsize=12)        si1_ax[k].plot(d_w2, starspectrum35.flux.value)        si1_ax[k].plot(w2, f2)        si1_ax[k].plot(w2, af2, alpha=0.65)        si1_ax[k].plot(w2, si1_cont_b, color='k', linestyle='--')        si1_ax[k].plot(w2, si1_cont_d, color='k', linestyle=':')        si1_ax[k].plot(w2, si1_cont_a, color='k', linestyle='-.')        si1_ax[k].set_xlim(si1_range)        si1_ax[k].set_ylim(0.6, 1.2)        si1_ax[k].set_xlabel('Data EW: ' + str(np.round_(d_si1_ew, decimals=3)) + '$\pm$' + str(np.round_(d_si1_ew_err, decimals=3)) + \                             '\nModel EW: ' + str(np.round_(b_si1_ew, decimals=3)) + '$\pm$' + str(np.round_(b_si1_ew_err, decimals=3)) +\                             '\nAPOGEE EW: ' + str(np.round_(a_si1_ew, decimals=3)) + '$\pm$' + str(np.round_(a_si1_ew_err, decimals=3)), fontsize=10)        si1_ax[k].axvspan(si1_ew_range[0], si1_ew_range[1],                       color='k', alpha=0.1)        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                         wave_range=si1_ew_range)        if k == 0:            si1_ax[k].set_title('Si '+str(np.round_(linelocs[k],decimals=1)))        si2_ax[k].plot(d_w3, starspectrum36.flux.value)        si2_ax[k].plot(w3, f3)        si2_ax[k].plot(w3, af3, alpha=0.65)        si2_ax[k].plot(w3, si2_cont_b, color='k', linestyle='--')        si2_ax[k].plot(w3, si2_cont_d, color='k', linestyle=':')        si2_ax[k].plot(w3, si2_cont_a, color='k', linestyle='-.')        si2_ax[k].set_xlim(si2_range)        si2_ax[k].set_ylim(0.6, 1.2)        si2_ax[k].set_xlabel('Data EW: ' + str(np.round_(d_si2_ew, decimals=3)) + '$\pm$' + str(np.round_(d_si2_ew_err, decimals=3)) +\                             '\nModel EW: ' + str(np.round_(b_si2_ew, decimals=3)) + '$\pm$' + str(np.round_(b_si2_ew_err, decimals=3)) +\                             '\nAPOGEE EW: ' + str(np.round_(a_si2_ew, decimals=3)) + '$\pm$' + str(np.round_(a_si2_ew_err, decimals=3)), fontsize=10)        si2_ax[k].axvspan(si2_ew_range[0], si2_ew_range[1],                       color='k', alpha=0.1)        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                         wave_range=si2_ew_range)        if k == 0:            si2_ax[k].set_title('Si '+str(np.round_(linelocs[k],decimals=1)))        s1_ax[k].plot(d_w1, starspectrum34.flux.value)        s1_ax[k].plot(w1, f1)        s1_ax[k].plot(w1, af1, alpha=0.65)        s1_ax[k].plot(w1, s1_cont_b, color='k', linestyle='--')        s1_ax[k].plot(w1, s1_cont_d, color='k', linestyle=':')        s1_ax[k].plot(w1, s1_cont_a, color='k', linestyle='-.')        s1_ax[k].set_xlim(s1_range)        s1_ax[k].set_ylim(0.6, 1.2)        s1_ax[k].set_xlabel('Data EW: ' + str(np.round_(d_s1_ew, decimals=3)) + '$\pm$' + str(np.round_(d_s1_ew_err, decimals=3)) +\                            '\nModel EW: ' + str(np.round_(b_s1_ew, decimals=3)) + '$\pm$' + str(np.round_(b_s1_ew_err, decimals=3)) +\                            '\nAPOGEE EW: ' + str(np.round_(a_s1_ew, decimals=3)) + '$\pm$' + str(np.round_(a_s1_ew_err, decimals=3)), fontsize=10)        s1_ax[k].axvspan(s1_ew_range[0], s1_ew_range[1],                      color='k', alpha=0.1)        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                         wave_range=s1_ew_range)        if k == 0:            s1_ax[k].set_title('S '+str(np.round_(linelocs[k],decimals=1)))        fe1_ax[k].plot(d_w1, starspectrum34.flux.value)        fe1_ax[k].plot(w1, f1)        fe1_ax[k].plot(w1, af1, alpha=0.65)        fe1_ax[k].plot(w1, fe1_cont_b, color='k', linestyle='--')        fe1_ax[k].plot(w1, fe1_cont_d, color='k', linestyle=':')        fe1_ax[k].plot(w1, fe1_cont_a, color='k', linestyle='-.')        fe1_ax[k].set_xlim(fe1_range)        fe1_ax[k].set_ylim(0.6, 1.2)        fe1_ax[k].set_xlabel('Data EW: ' + str(np.round_(d_fe1_ew, decimals=3)) + '$\pm$' + str(np.round_(d_fe1_ew_err, decimals=3)) + \                             '\nModel EW: ' + str(np.round_(b_fe1_ew, decimals=3)) + '$\pm$' + str(np.round_(b_fe1_ew_err, decimals=3)) +\                             '\nAPOGEE EW: ' + str(np.round_(a_fe1_ew, decimals=3)) + '$\pm$' + str(np.round_(a_fe1_ew_err, decimals=3)) , fontsize=10)        fe1_ax[k].axvspan(fe1_ew_range[0], fe1_ew_range[1],                       color='k', alpha=0.1)        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                         wave_range=fe1_ew_range)        if k == 0:            fe1_ax[k].set_title('Fe '+str(np.round_(linelocs[k],decimals=1)))        fe2_ax[k].plot(d_w1, starspectrum34.flux.value)        fe2_ax[k].plot(w1, f1)        fe2_ax[k].plot(w1, af1, alpha=0.65)        fe2_ax[k].plot(w1, fe2_cont_b, color='k', linestyle='--')        fe2_ax[k].plot(w1, fe2_cont_d, color='k', linestyle=':')        fe2_ax[k].plot(w1, fe2_cont_a, color='k', linestyle='-.')        fe2_ax[k].set_xlim(fe2_range)        fe2_ax[k].set_ylim(0.6, 1.2)        fe2_ax[k].set_xlabel('Data EW: ' + str(np.round_(d_fe2_ew, decimals=3)) + '$\pm$' + str(np.round_(d_fe2_ew_err, decimals=3)) + \                             '\nModel EW: ' + str(np.round_(b_fe2_ew, decimals=3)) + '$\pm$' + str(np.round_(b_fe2_ew_err, decimals=3)) +\                             '\nAPOGEE EW: ' + str(np.round_(a_fe2_ew, decimals=3)) + '$\pm$' + str(np.round_(a_fe2_ew_err, decimals=3)), fontsize=10)        fe2_ax[k].axvspan(fe2_ew_range[0], fe2_ew_range[1],                       color='k', alpha=0.1)        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                         wave_range=fe2_ew_range)        if k == 0:            fe2_ax[k].set_title('Fe '+str(np.round_(linelocs[k],decimals=1)))        fe3_ax[k].plot(d_w1, starspectrum34.flux.value, label='Data')        fe3_ax[k].plot(w1, f1, label='Model')        fe3_ax[k].plot(w1, af1, alpha=0.65, label='Model at APOGEE params')        fe3_ax[k].plot(w1, fe3_cont_b, color='k', linestyle='--', label = 'Best-fit model continuum')        fe3_ax[k].plot(w1, fe3_cont_d, color='k', linestyle=':', label = 'Data continuum')        fe3_ax[k].plot(w1, fe3_cont_a, color='k', linestyle='-.', label = 'APOGEE continuum')        fe3_ax[k].set_xlim(fe3_range)        fe3_ax[k].set_ylim(0.6, 1.2)        fe3_ax[k].set_xlabel('Data EW: ' + str(np.round_(d_fe3_ew, decimals=3)) + '$\pm$' + str(np.round_(d_fe3_ew_err, decimals=3)) + \                             '\nModel EW: ' + str(np.round_(b_fe3_ew, decimals=3)) + '$\pm$' + str(np.round_(b_fe3_ew_err, decimals=3)) +\                             '\nAPOGEE EW: ' + str(np.round_(a_fe3_ew, decimals=3)) + '$\pm$' + str(np.round_(a_fe3_ew_err, decimals=3)), fontsize=10)        fe3_ax[k].axvspan(fe3_ew_range[0], fe3_ew_range[1],                       color='k', alpha=0.1)        (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                         wave_range=fe3_ew_range)        #for l in range(len(linelocs)):        #    fe3_ax[k].axvline(x=linelocs[l], color='b', linestyle='--', alpha=0.25, label='Line center')        if k == 0:            fe3_ax[k].set_title('Fe '+str(np.round_(linelocs[k],decimals=1)))    '''    si1_ax[-1].set_xticks([])    si2_ax[-1].set_xticks([])    s1_ax[-1].set_xticks([])    fe1_ax[-1].set_xticks([])    fe2_ax[-1].set_xticks([])    fe3_ax[-1].set_xticks([])    '''    fe3_ax[0].legend(loc='lower right', fontsize=10)    #plt.show()    plt.savefig(        '/u/rbentley/localcompute/fitting_plots/line_profiles_ew_1d.png')def curve_of_growth(g):    cal_star_info_all = list(        scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[:-1]]    ap_mh = [x[1] for x in cal_star_info_all[:-1]]    snr = 30.    b_si1_ew = []    b_si2_ew = []    b_s1_ew = []    b_fe1_ew = []    b_fe2_ew = []    b_fe3_ew = []    d_si1_ew = []    d_si2_ew = []    d_s1_ew = []    d_fe1_ew = []    d_fe2_ew = []    d_fe3_ew = []    a_si1_ew = []    a_si2_ew = []    a_s1_ew = []    a_fe1_ew = []    a_fe2_ew = []    a_fe3_ew = []    b_si1_ew_err = []    b_si2_ew_err = []    b_s1_ew_err = []    b_fe1_ew_err = []    b_fe2_ew_err = []    b_fe3_ew_err = []    d_si1_ew_err = []    d_si2_ew_err = []    d_s1_ew_err = []    d_fe1_ew_err = []    d_fe2_ew_err = []    d_fe3_ew_err = []    a_si1_ew_err = []    a_si2_ew_err = []    a_s1_ew_err = []    a_fe1_ew_err = []    a_fe2_ew_err = []    a_fe3_ew_err = []    for starname in cal_star_names:        star_ind = cal_star_names.index(starname)        cal_star_info = cal_star_info_all[star_ind]        result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + starname + '_order34-36_bosz_adderr.h5')        file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order34*.dat')        file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order35*.dat')        file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order36*.dat')        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]        waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]        waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)        starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit        starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit        starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g)        for a in result.median.keys():            setattr(bmodel, a, result.median[a])        setattr(bmodel, 'vrad_3', 0.0)        setattr(bmodel, 'vrad_4', 0.0)        setattr(bmodel, 'vrad_5', 0.0)        w1, f1, w2, f2, w3, f3 = bmodel()        #setattr(bmodel, 'teff_0', cal_star_info[2])        #setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', cal_star_info[1])        #setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        si1_range = [21925, 21936]        si1_ew_range = [21930, 21932]        cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        d_cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.98))[0]        p_fit = np.polyfit(starspectrum35.wavelength.value[d_cont_idx], starspectrum35.flux.value[d_cont_idx], 2)        si1_cont_b = np.amax(f2[cont_idx])*np.ones(len(w2)) #w2*p_fit[0] + p_fit[1]        si1_cont_a = np.amax(af2[cont_idx])*np.ones(len(w2))        si1_cont_d = (np.median(starspectrum35.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum35.flux.value[d_cont_idx]))*np.ones(len(w2)) #starspectrum35.wavelength.value**2*p_fit[0] + p_fit[1]*starspectrum35.wavelength.value + p_fit[2]        si2_range = [21371.5, 21384.8]        si2_ew_range = [21377.1, 21379.8]        cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        d_cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.98))[0]        p_fit = np.polyfit(w3[d_cont_idx], f3[d_cont_idx], 1)        si2_cont_b = np.amax(f3[cont_idx])*np.ones(len(w2))#w3*p_fit[0] + p_fit[1]        si2_cont_a = np.amax(af3[cont_idx])*np.ones(len(w2))        si2_cont_d  = (np.median(starspectrum36.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum36.flux.value[d_cont_idx]))*np.ones(len(w3))        s1_range = [22503, 22523]        s1_ew_range = [22512, 22514.8]        cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.98))[0]        s1_cont_b = np.amax(f1[cont_idx])*np.ones(len(w1)) #w2*p_fit[0] + p_fit[1]        s1_cont_a = np.amax(af1[cont_idx])*np.ones(len(w1))        s1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe1_range = [22464., 22474.]        fe1_ew_range = [22468.3, 22471.1]        cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.97))[0]        p_fit = np.polyfit(w1[d_cont_idx], f1[d_cont_idx], 1)        fe1_cont_b = np.amax(f1[cont_idx])*np.ones(len(w2))#w1*p_fit[0] + p_fit[1]        fe1_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe2_range = [22474., 22484.]        fe2_ew_range = [22478., 22480.9]        d_cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.97))[0]        p_fit = np.polyfit(w1[d_cont_idx], f1[d_cont_idx], 1)        fe2_cont_b = np.amax(f1[cont_idx])*np.ones(len(w2))#w1*p_fit[0] + p_fit[1]        fe2_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe2_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe3_range = [22495., 22505.]        fe3_ew_range = [22498.7, 22501.2]        d_cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (f1 > 0.97))[0]        p_fit = np.polyfit(w1[d_cont_idx], f1[d_cont_idx], 1)        fe3_cont_b = np.amax(f1[cont_idx])*np.ones(len(w2))#w1*p_fit[0] + p_fit[1]        fe3_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe3_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        b_si1_ew += [rvmeasure.equivalent_width(w2, f2, specRange=si1_ew_range,                                              continuum=si1_cont_b)]  # Si line        b_si2_ew += [rvmeasure.equivalent_width(w3, f3, specRange=si2_ew_range,                                              continuum=si2_cont_b)]  # Si line        b_s1_ew += [rvmeasure.equivalent_width(w1, f1, specRange=s1_ew_range,                                             continuum=s1_cont_b)]  # S line        b_fe1_ew += [rvmeasure.equivalent_width(w1, f1,                                              specRange=fe1_ew_range, continuum=fe1_cont_b)]  # Fe line        b_fe2_ew += [rvmeasure.equivalent_width(w1, f1, specRange=fe2_ew_range,                                              continuum=fe2_cont_b)]  # Fe line        b_fe3_ew += [rvmeasure.equivalent_width(w1, f1,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_b)]  # Fe line        b_si1_ew_err += [ew_monte_carlo(w2, f2, si1_ew_range, si1_cont_b)]        b_si2_ew_err += [ew_monte_carlo(w3, f3, si2_ew_range, si2_cont_b)]        b_s1_ew_err += [ew_monte_carlo(w1, f1, s1_ew_range, s1_cont_b)]        b_fe1_ew_err += [ew_monte_carlo(w1, f1, fe1_ew_range, fe1_cont_b)]        b_fe2_ew_err += [ew_monte_carlo(w1, f1, fe2_ew_range, fe2_cont_b)]        b_fe3_ew_err += [ew_monte_carlo(w1, f1, fe3_ew_range, fe3_cont_b)]        d_w1 = starspectrum34.wavelength.value / (result.median['vrad_3'] / 3e5 + 1.0)        d_w2 = starspectrum35.wavelength.value / (result.median['vrad_4'] / 3e5 + 1.0)        d_w3 = starspectrum36.wavelength.value / (result.median['vrad_5'] / 3e5 + 1.0)        d_si1_ew += [rvmeasure.equivalent_width(d_w2, starspectrum35.flux.value, specRange=si1_ew_range,                                              continuum=si1_cont_d)]  # Si line        d_si2_ew += [rvmeasure.equivalent_width(d_w3, starspectrum36.flux.value, specRange=si2_ew_range,                                              continuum=si2_cont_d)]  # Si line        d_s1_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=s1_ew_range,                                             continuum=s1_cont_d)]  # S line        d_fe1_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                              specRange=fe1_ew_range, continuum=fe1_cont_d)]  # Fe line        d_fe2_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=fe2_ew_range,                                              continuum=fe2_cont_d)]  # Fe line        d_fe3_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_d)]  # Fe line        d_si1_ew_err += [ew_monte_carlo(d_w2, starspectrum35.flux.value, si1_ew_range, si1_cont_d)]        d_si2_ew_err += [ew_monte_carlo(d_w3, starspectrum36.flux.value, si2_ew_range, si2_cont_d)]        d_s1_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, s1_ew_range, s1_cont_d)]        d_fe1_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, fe1_ew_range, fe1_cont_d)]        d_fe2_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, fe2_ew_range, fe2_cont_d)]        d_fe3_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, fe3_ew_range, fe3_cont_d)]        a_si1_ew += [rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                              continuum=si1_cont_a)]  # Si line        a_si2_ew += [rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                              continuum=si2_cont_a)]  # Si line        a_s1_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                             continuum=s1_cont_a)]  # S line        a_fe1_ew += [rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        a_fe2_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                              continuum=fe2_cont_a)]  # Fe line        a_fe3_ew += [rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_a)]  # Fe line        a_si1_ew_err += [ew_monte_carlo(aw2, af2, si1_ew_range, si1_cont_a)]        a_si2_ew_err += [ew_monte_carlo(aw3, af3, si2_ew_range, si2_cont_a)]        a_s1_ew_err += [ew_monte_carlo(aw1, af1, s1_ew_range, s1_cont_a)]        a_fe1_ew_err += [ew_monte_carlo(aw1, af1, fe1_ew_range, fe1_cont_a)]        a_fe2_ew_err += [ew_monte_carlo(aw1, af1, fe2_ew_range, fe2_cont_a)]        a_fe3_ew_err += [ew_monte_carlo(aw1, af1, fe3_ew_range, fe3_cont_a)]    fig, axs = plt.subplots(6, 1, sharex='col', sharey='row',                            gridspec_kw={'hspace': 0.5, 'wspace': 0.5}, figsize=(11, 18))    (si1_ax, si2_ax, s1_ax, fe1_ax, fe2_ax, fe3_ax) = axs    si1_ax.errorbar(ap_mh, d_si1_ew, yerr=d_si1_ew_err, marker='d', markersize=16, ls='none', label='Data EW')    si1_ax.errorbar(ap_mh, b_si1_ew, yerr=b_si1_ew_err, marker='.', markersize=16, ls='none', label='Model EW')    si1_ax.errorbar(ap_mh, a_si1_ew, yerr=a_si1_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE [M/H]', alpha=0.6)    si1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=si1_ew_range)    si1_ax.set_title('Calibrator curves of growth\nSi ' + str(np.round_(linelocs[0], decimals=1)))    si1_ax.legend(fontsize=10, loc='lower center')    si1_ax.set_ylabel('Equivalent width')    #si1_ax.set_title('Equivalent width vs APOGEE [M/H]')    si2_ax.errorbar(ap_mh, d_si2_ew, yerr=d_si2_ew_err, marker='d', markersize=16, ls='none')    si2_ax.errorbar(ap_mh, b_si2_ew, yerr=b_si2_ew_err, marker='.', markersize=16, ls='none')    si2_ax.errorbar(ap_mh, a_si2_ew, yerr=a_si2_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    si2_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=si2_ew_range)    si2_ax.set_title('Si ' + str(np.round_(linelocs[0], decimals=1)))    s1_ax.errorbar(ap_mh, d_s1_ew, yerr=d_s1_ew_err, marker='d', markersize=16, ls='none')    s1_ax.errorbar(ap_mh, b_s1_ew, yerr=b_s1_ew_err, marker='.', markersize=16, ls='none')    s1_ax.errorbar(ap_mh, a_s1_ew, yerr=a_s1_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    s1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=s1_ew_range)    s1_ax.set_title('S ' + str(np.round_(linelocs[0], decimals=1)))    fe1_ax.errorbar(ap_mh, d_fe1_ew, yerr=d_fe1_ew_err, marker='d', markersize=16, ls='none')    fe1_ax.errorbar(ap_mh, b_fe1_ew, yerr=b_fe1_ew_err, marker='.', markersize=16, ls='none')    fe1_ax.errorbar(ap_mh, a_fe1_ew, yerr=a_fe1_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    fe1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe1_ew_range)    fe1_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe2_ax.errorbar(ap_mh, d_fe2_ew, yerr=d_fe2_ew_err, marker='d', markersize=16, ls='none')    fe2_ax.errorbar(ap_mh, b_fe2_ew, yerr=b_fe2_ew_err, marker='.', markersize=16, ls='none')    fe2_ax.errorbar(ap_mh, a_fe2_ew, yerr=a_fe2_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    fe2_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe2_ew_range)    fe2_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe3_ax.errorbar(ap_mh, d_fe3_ew, yerr=d_fe3_ew_err, marker='d', markersize=16, ls='none')    fe3_ax.errorbar(ap_mh, b_fe3_ew, yerr=b_fe3_ew_err, marker='.', markersize=16, ls='none')    fe3_ax.errorbar(ap_mh, a_fe3_ew, yerr=a_fe3_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    fe3_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe3_ew_range)    fe3_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe3_ax.set_xlabel('APOGEE [M/H]')    #plt.show()    plt.savefig(        '/u/rbentley/localcompute/fitting_plots/curve_of_growth_apogee_mh.png')def curve_of_growth_delta(g):    cal_star_info_all = list(        scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[:-1]]    ap_mh = [x[1] for x in cal_star_info_all[:-1]]    snr = 30.    b_si1_ew = []    b_si2_ew = []    b_s1_ew = []    b_fe1_ew = []    b_fe2_ew = []    b_fe3_ew = []    d_si1_ew = []    d_si2_ew = []    d_s1_ew = []    d_fe1_ew = []    d_fe2_ew = []    d_fe3_ew = []    a_si1_ew = []    a_si2_ew = []    a_s1_ew = []    a_fe1_ew = []    a_fe2_ew = []    a_fe3_ew = []    b_si1_ew_err = []    b_si2_ew_err = []    b_s1_ew_err = []    b_fe1_ew_err = []    b_fe2_ew_err = []    b_fe3_ew_err = []    d_si1_ew_err = []    d_si2_ew_err = []    d_s1_ew_err = []    d_fe1_ew_err = []    d_fe2_ew_err = []    d_fe3_ew_err = []    a_si1_ew_err = []    a_si2_ew_err = []    a_s1_ew_err = []    a_fe1_ew_err = []    a_fe2_ew_err = []    a_fe3_ew_err = []    mh_delta = []    ah_delta = []    alpha_delta = []    for starname in cal_star_names:        star_ind = cal_star_names.index(starname)        cal_star_info = cal_star_info_all[star_ind]        result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + starname + '_order34-36_bosz_adderr.h5')        print result.median['alpha_0'], cal_star_info[4], result.median['mh_0'], cal_star_info[1]        mh_delta += [result.median['mh_0'] - cal_star_info[1]]        ah_delta += [result.median['alpha_0'] - cal_star_info[4] - result.median['mh_0'] + cal_star_info[1]]        alpha_delta += [result.median['alpha_0'] - cal_star_info[4]]        file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order34*.dat')        file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order35*.dat')        file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order36*.dat')        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')        waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]        waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]        waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]        starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)        starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)        starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)        starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit        starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit        starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit        bmodel = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g)        for a in result.median.keys():            setattr(bmodel, a, result.median[a])        setattr(bmodel, 'vrad_3', 0.0)        setattr(bmodel, 'vrad_4', 0.0)        setattr(bmodel, 'vrad_5', 0.0)        w1, f1, w2, f2, w3, f3 = bmodel()        #setattr(bmodel, 'teff_0', cal_star_info[2])        #setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', cal_star_info[1])        #setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        si1_range = [21925, 21936]        si1_ew_range = [21930, 21932]        cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        d_cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.98))[0]        p_fit = np.polyfit(starspectrum35.wavelength.value[d_cont_idx], starspectrum35.flux.value[d_cont_idx], 2)        si1_cont_b = np.amax(f2[cont_idx])*np.ones(len(w2)) #w2*p_fit[0] + p_fit[1]        si1_cont_a = np.amax(af2[cont_idx])*np.ones(len(w2))        si1_cont_d = (np.median(starspectrum35.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum35.flux.value[d_cont_idx]))*np.ones(len(w2)) #starspectrum35.wavelength.value**2*p_fit[0] + p_fit[1]*starspectrum35.wavelength.value + p_fit[2]        si2_range = [21371.5, 21384.8]        si2_ew_range = [21377.1, 21379.8]        cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        d_cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.98))[0]        p_fit = np.polyfit(w3[d_cont_idx], f3[d_cont_idx], 1)        si2_cont_b = np.amax(f3[cont_idx])*np.ones(len(w2))#w3*p_fit[0] + p_fit[1]        si2_cont_a = np.amax(af3[cont_idx])*np.ones(len(w2))        si2_cont_d  = (np.median(starspectrum36.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum36.flux.value[d_cont_idx]))*np.ones(len(w3))        s1_range = [22503, 22523]        s1_ew_range = [22512, 22514.8]        cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.98))[0]        s1_cont_b = np.amax(f1[cont_idx])*np.ones(len(w1)) #w2*p_fit[0] + p_fit[1]        s1_cont_a = np.amax(af1[cont_idx])*np.ones(len(w1))        s1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe1_range = [22464., 22474.]        fe1_ew_range = [22468.3, 22471.1]        cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (f1 > 0.97))[0]        p_fit = np.polyfit(w1[d_cont_idx], f1[d_cont_idx], 1)        fe1_cont_b = np.amax(f1[cont_idx])*np.ones(len(w2))#w1*p_fit[0] + p_fit[1]        fe1_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe2_range = [22474., 22484.]        fe2_ew_range = [22478., 22480.9]        cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.94))[0]        d_cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.97))[0]        p_fit = np.polyfit(w1[d_cont_idx], f1[d_cont_idx], 1)        fe2_cont_b = np.amax(f1[cont_idx])*np.ones(len(w2))#w1*p_fit[0] + p_fit[1]        fe2_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe2_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        fe3_range = [22495., 22505.]        fe3_ew_range = [22498.7, 22501.2]        d_cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (f1 > 0.97))[0]        p_fit = np.polyfit(w1[d_cont_idx], f1[d_cont_idx], 1)        fe3_cont_b = np.amax(f1[cont_idx])*np.ones(len(w2))#w1*p_fit[0] + p_fit[1]        fe3_cont_a = np.amax(af1[cont_idx])*np.ones(len(w2))        fe3_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5*np.std(starspectrum34.flux.value[d_cont_idx]))*np.ones(len(w1))        b_si1_ew += [rvmeasure.equivalent_width(w2, f2, specRange=si1_ew_range,                                              continuum=si1_cont_b) - rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                              continuum=si1_cont_a)]  # Si line        b_si2_ew += [rvmeasure.equivalent_width(w3, f3, specRange=si2_ew_range,                                              continuum=si2_cont_b) - rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                              continuum=si2_cont_a)]  # Si line        b_s1_ew += [rvmeasure.equivalent_width(w1, f1, specRange=s1_ew_range,                                             continuum=s1_cont_b) - rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                             continuum=s1_cont_a)]  # S line        b_fe1_ew += [rvmeasure.equivalent_width(w1, f1,                                              specRange=fe1_ew_range, continuum=fe1_cont_b) - rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        b_fe2_ew += [rvmeasure.equivalent_width(w1, f1, specRange=fe2_ew_range,                                              continuum=fe2_cont_b) - rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                              continuum=fe2_cont_a)]  # Fe line        b_fe3_ew += [rvmeasure.equivalent_width(w1, f1,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_b) - rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe3_ew_range, continuum=fe3_cont_a)]  # Fe line        b_si1_ew_err += [ew_monte_carlo(w2, f2, si1_ew_range, si1_cont_b)]        b_si2_ew_err += [ew_monte_carlo(w3, f3, si2_ew_range, si2_cont_b)]        b_s1_ew_err += [ew_monte_carlo(w1, f1, s1_ew_range, s1_cont_b)]        b_fe1_ew_err += [ew_monte_carlo(w1, f1, fe1_ew_range, fe1_cont_b)]        b_fe2_ew_err += [ew_monte_carlo(w1, f1, fe2_ew_range, fe2_cont_b)]        b_fe3_ew_err += [ew_monte_carlo(w1, f1, fe3_ew_range, fe3_cont_b)]        d_w1 = starspectrum34.wavelength.value / (result.median['vrad_3'] / 3e5 + 1.0)        d_w2 = starspectrum35.wavelength.value / (result.median['vrad_4'] / 3e5 + 1.0)        d_w3 = starspectrum36.wavelength.value / (result.median['vrad_5'] / 3e5 + 1.0)        d_si1_ew += [rvmeasure.equivalent_width(d_w2, starspectrum35.flux.value, specRange=si1_ew_range,                                              continuum=si1_cont_d) - rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                              continuum=si1_cont_a)]  # Si line        d_si2_ew += [rvmeasure.equivalent_width(d_w3, starspectrum36.flux.value, specRange=si2_ew_range,                                              continuum=si2_cont_d) - rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                              continuum=si2_cont_a)]  # Si line        d_s1_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=s1_ew_range,                                             continuum=s1_cont_d) - rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                             continuum=s1_cont_a)]  # S line        d_fe1_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                              specRange=fe1_ew_range, continuum=fe1_cont_d) - rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        d_fe2_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=fe2_ew_range,                                              continuum=fe2_cont_d) - rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                              continuum=fe2_cont_a)]  # Fe line        d_fe3_ew += [rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_d) - rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe3_ew_range, continuum=fe3_cont_a)]  # Fe line        d_si1_ew_err += [ew_monte_carlo(d_w2, starspectrum35.flux.value, si1_ew_range, si1_cont_d)]        d_si2_ew_err += [ew_monte_carlo(d_w3, starspectrum36.flux.value, si2_ew_range, si2_cont_d)]        d_s1_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, s1_ew_range, s1_cont_d)]        d_fe1_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, fe1_ew_range, fe1_cont_d)]        d_fe2_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, fe2_ew_range, fe2_cont_d)]        d_fe3_ew_err += [ew_monte_carlo(d_w1, starspectrum34.flux.value, fe3_ew_range, fe3_cont_d)]        a_si1_ew += [0]  # Si line        a_si2_ew += [0]  # Si line        a_s1_ew += [0]  # S line        a_fe1_ew += [0]  # Fe line        a_fe2_ew += [0]  # Fe line        a_fe3_ew += [0]  # Fe line        a_si1_ew_err += [ew_monte_carlo(aw2, af2, si1_ew_range, si1_cont_a)]        a_si2_ew_err += [ew_monte_carlo(aw3, af3, si2_ew_range, si2_cont_a)]        a_s1_ew_err += [ew_monte_carlo(aw1, af1, s1_ew_range, s1_cont_a)]        a_fe1_ew_err += [ew_monte_carlo(aw1, af1, fe1_ew_range, fe1_cont_a)]        a_fe2_ew_err += [ew_monte_carlo(aw1, af1, fe2_ew_range, fe2_cont_a)]        a_fe3_ew_err += [ew_monte_carlo(aw1, af1, fe3_ew_range, fe3_cont_a)]    fig, axs = plt.subplots(6, 1, sharey='row',                            gridspec_kw={'hspace': 0.5, 'wspace': 0.5}, figsize=(11, 18))    (si1_ax, si2_ax, s1_ax, fe1_ax, fe2_ax, fe3_ax) = axs    ap_mh = mh_delta    ah_delta = alpha_delta    si1_ax.errorbar(ah_delta, d_si1_ew, yerr=d_si1_ew_err, marker='d', markersize=16, ls='none', label='Data EW')    si1_ax.errorbar(ah_delta, b_si1_ew, yerr=b_si1_ew_err, marker='.', markersize=16, ls='none', label='Model EW')    #si1_ax.errorbar(ap_mh, a_si1_ew, yerr=a_si1_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE [M/H]', alpha=0.6)    si1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=si1_ew_range)    si1_ax.set_title(r'EW offsets from APOGEE vs [$\alpha$/Fe], '+'[M/H] offset from APOGEE\nSi ' + str(np.round_(linelocs[0], decimals=1)))    si1_ax.legend(fontsize=10, loc='lower center')    si1_ax.set_ylabel('$\Delta$Equivalent width')    #si1_ax.set_title('Equivalent width vs APOGEE [M/H]')    si2_ax.errorbar(ah_delta, d_si2_ew, yerr=d_si2_ew_err, marker='d', markersize=16, ls='none')    si2_ax.errorbar(ah_delta, b_si2_ew, yerr=b_si2_ew_err, marker='.', markersize=16, ls='none')    #si2_ax.errorbar(ap_mh, a_si2_ew, yerr=a_si2_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    si2_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=si2_ew_range)    si2_ax.set_title('Si ' + str(np.round_(linelocs[0], decimals=1)))    s1_ax.errorbar(ah_delta, d_s1_ew, yerr=d_s1_ew_err, marker='d', markersize=16, ls='none')    s1_ax.errorbar(ah_delta, b_s1_ew, yerr=b_s1_ew_err, marker='.', markersize=16, ls='none')    #s1_ax.errorbar(ap_mh, a_s1_ew, yerr=a_s1_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    s1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=s1_ew_range)    s1_ax.set_title('S ' + str(np.round_(linelocs[0], decimals=1)))    s1_ax.set_xlabel(r'$\Delta$[$\alpha$/Fe]')    fe1_ax.errorbar(ap_mh, d_fe1_ew, yerr=d_fe1_ew_err, marker='d', markersize=16, ls='none')    fe1_ax.errorbar(ap_mh, b_fe1_ew, yerr=b_fe1_ew_err, marker='.', markersize=16, ls='none')    #fe1_ax.errorbar(ap_mh, a_fe1_ew, yerr=a_fe1_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    fe1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe1_ew_range)    fe1_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe2_ax.errorbar(ap_mh, d_fe2_ew, yerr=d_fe2_ew_err, marker='d', markersize=16, ls='none')    fe2_ax.errorbar(ap_mh, b_fe2_ew, yerr=b_fe2_ew_err, marker='.', markersize=16, ls='none')    #fe2_ax.errorbar(ap_mh, a_fe2_ew, yerr=a_fe2_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    fe2_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe2_ew_range)    fe2_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe3_ax.errorbar(ap_mh, d_fe3_ew, yerr=d_fe3_ew_err, marker='d', markersize=16, ls='none')    fe3_ax.errorbar(ap_mh, b_fe3_ew, yerr=b_fe3_ew_err, marker='.', markersize=16, ls='none')    #fe3_ax.errorbar(ap_mh, a_fe3_ew, yerr=a_fe3_ew_err, marker='s', markersize=16, ls='none', label='Model EW at APOGEE params', alpha=0.6)    fe3_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe3_ew_range)    fe3_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe3_ax.set_xlabel('$\Delta$[M/H]')    #plt.show()    plt.savefig(        '/u/rbentley/localcompute/fitting_plots/curve_of_growth_delta_mh_afe.png')def plot_nifs_stars(bulge=False, dgalaxy=False):    nifs_paths = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/nifs/*.h5')    nirspec_path = '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/'    gc_stars = ['NE_1_001', 'NE_1_002', 'NE_1_003', 'E7_1_001', 'E7_2_001', 'E7_1_002', 'E7_1_003', 'N2_1_001',                'E5_1_001', 'N2_1_002', 'N2_1_003']    mh_offset = 0.15    mh_scatter = 0.17    alpha_offset = 0.18    alpha_scatter = 0.18    teff = []    teff_err = []    logg = []    logg_err = []    mh = []    mh_err = []    alpha = []    alpha_err = []    nn_teff = {}    nn_teff_err = {}    nn_logg = {}    nn_logg_err = {}    nn_mh = {}    nn_mh_err = {}    nn_alpha = {}    nn_alpha_err = {}    nirspec_teff = []    nirspec_teff_err = []    nirspec_logg = []    nirspec_logg_err = []    nirspec_mh = []    nirspec_mh_err = []    nirspec_alpha = []    nirspec_alpha_err = []    if bulge:        apogee_bulge = pd.read_csv('/u/rbentley/Downloads/APOGEE_DR16_inner2deg_csv.dat')        bulge_mh = apogee_bulge['M_H']        bulge_alpha = apogee_bulge['ALPHA_M']        bulge_ah = apogee_bulge['ALPHA_M'] - apogee_bulge['M_H']        plt.errorbar(bulge_mh, bulge_alpha, color='g', marker='.', label='APOGEE (Inner 2 deg)', ls='none',                     markersize=4, alpha=0.4)    if dgalaxy:        sagdeg_vals = list(scipy.genfromtxt('/u/rbentley/sagdeg_abundances_monaco2005.txt', delimiter='\t', skip_header=1, dtype=float))        sagdeg_vals2 = list(scipy.genfromtxt('/u/rbentley/sagdeg_abundances_bonifacio2004.txt', skip_header=0, dtype=float))        sagdeg_alpha = np.array([x[3]/2.+x[2]/2. for x in sagdeg_vals])        sagdeg_mh = np.array([x[1] for x in sagdeg_vals])        sagdeg_alpha2 = np.array([x[3]/3.+x[5]/2. for x in sagdeg_vals2])        sagdeg_mh2 = np.array([x[1] for x in sagdeg_vals2])        Vizier.ROW_LIMIT = 100000        catalog_list = Vizier.find_catalogs('Hill, 2019')        catalog = Vizier.get_catalogs(catalog_list.keys())['J/A+A/626/A15/tablec5']        masked = np.ma.nonzero(catalog['__Mg_Fe_'])        sculptor_mg = catalog['__Mg_Fe_'][masked]        sculptor_ca = catalog['__Ca_Fe_'][masked]        sculptor_mh = catalog['__Fe_H_'][masked]        sculptor_alpha = np.mean(np.array([sculptor_mg, sculptor_ca]), axis=0)        fornax = scipy.genfromtxt('/u/rbentley/fornax_abundances_letarte2010.txt', skip_header=1, dtype=None)        fornax_mh = np.array([x[8] for x in fornax])        fornax_alpha = np.array([x[6]/2.+x[2]/2. for x in fornax])        carina = scipy.genfromtxt('/u/rbentley/carina_abundances_norris2017.txt', skip_header=3, dtype=None, delimiter='\t')        carina_mh = np.array([x[1] for x in carina])        carina_alpha = np.array([np.mean([x[3],x[5]]) for x in carina])        plt.errorbar(sagdeg_mh, sagdeg_alpha, xerr=0., yerr=0., color = 'g', marker = 'X', label = 'Sgr dSph Stars (Monaco et al. 2005, Bonifacio et al. 2004)', ls = 'none', markersize = 10, alpha=0.4)        plt.errorbar(sagdeg_mh2, sagdeg_alpha2, xerr=0., yerr=0., color = 'g', marker = 'X', ls = 'none', markersize = 10, alpha=0.4) #        plt.errorbar(sculptor_mh, sculptor_alpha, xerr=0., yerr=0., color = '#59bf43', marker = '.', label = 'Sculptor Dwarf Stars (Hill et al. 2019)', ls = 'none', markersize = 10, alpha=0.4) #'#43bfa9'        plt.errorbar(fornax_mh, fornax_alpha, xerr=0., yerr=0., color = '#59bf43', marker = '>', label = 'Fornax Dwarf Stars (Letarte et al. 2010)', ls = 'none', markersize = 10, alpha=0.4) #'#4397bf'        plt.errorbar(carina_mh, carina_alpha, xerr=0., yerr=0., color = '#59bf43', marker = 'v', label = 'Carina Dwarf Stars (Norris et al. 2010)', ls = 'none', markersize = 10, alpha=0.4) #'#ded953'    for path in nifs_paths:        result = MultiNestResult.from_hdf5(path)        sigmas = result.calculate_sigmas(1)        obs_twice = [ele for ele in gc_stars if (ele in path)]        for gc in gc_stars:            if gc in path:                star = gc        if obs_twice:            nn_teff.update({star:result.median['teff_0']})            nn_teff_err.update({star:(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.})            nn_logg.update({star:result.median['logg_0']})            nn_logg_err.update({star:(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.})            nn_mh.update({star:result.median['mh_0']+mh_offset})            nn_mh_err.update({star:np.sqrt(((sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.)**2 + mh_scatter**2)})            nn_alpha.update({star:result.median['alpha_0']+alpha_offset})            nn_alpha_err.update({star:np.sqrt(((sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.)**2 + alpha_scatter**2)})        else:            teff += [result.median['teff_0']]            teff_err += [(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.]            logg += [result.median['logg_0']]            logg_err += [(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.]            mh += [result.median['mh_0']+mh_offset]            mh_err += [np.sqrt(((sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.)**2 + mh_scatter**2)]            alpha += [result.median['alpha_0']+alpha_offset]            alpha_err += [np.sqrt(((sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.)**2 + alpha_scatter**2)]    for a in nn_teff.keys():        print a        result = MultiNestResult.from_hdf5(nirspec_path+a+'_order34-36_bosz_adderr.h5')        sigmas = result.calculate_sigmas(1)        nirspec_teff += [result.median['teff_0']]        nirspec_teff_err += [(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.]        nirspec_logg += [result.median['logg_0']]        nirspec_logg_err += [(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.]        nirspec_mh += [result.median['mh_0']+mh_offset]        nirspec_mh_err += [np.sqrt(((sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.)**2 + mh_scatter**2)]        nirspec_alpha += [result.median['alpha_0']+alpha_offset]        nirspec_alpha_err += [np.sqrt(((sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.)**2 + alpha_scatter**2)]        print nn_mh[a], nn_alpha[a], result.median['mh_0'], result.median['alpha_0']        #connectpoints_plt(nn_mh[a], nn_alpha[a], result.median['mh_0']+mh_offset, result.median['alpha_0']+alpha_offset)        #plt.errorbar(nn_mh[a], nn_alpha[a], xerr=nn_mh_err[a], yerr=nn_alpha_err[a], fmt='.', c='k', alpha=0.3)        #plt.scatter(nn_mh[a], nn_alpha[a], c=nn_teff[a], vmin=np.amin(teff), vmax=np.amax(teff), marker='.',        #            s=300, cmap=plt.cm.get_cmap('plasma'))    glob_cat = ascii.read('/u/rbentley/glob_info_full.txt')    mh_flags = glob_cat['f_[Fe/H]']    glob_mh = glob_cat['[Fe/H]']    glob_alpha = glob_cat['[a/Fe]']    glob_names = glob_cat['Name']    glob_mean_idx = np.where((mh_flags=='b')&(glob_names != 'Pal 6'))    glob_mh = glob_mh[glob_mean_idx]    glob_alpha = glob_alpha[glob_mean_idx]    glob_names = glob_names[glob_mean_idx]    dg_glob_mean_idx = np.where(((glob_names=='Rup 106') | (glob_names=='Pal 12') | (glob_names=='Ter 7')))    dg_glob_mh = glob_mh[dg_glob_mean_idx]    dg_glob_alpha = glob_alpha[dg_glob_mean_idx]    dg_glob_names = glob_names[dg_glob_mean_idx]    glob_mh = np.delete(glob_mh, dg_glob_mean_idx)    glob_alpha = np.delete(glob_alpha, dg_glob_mean_idx)    glob_names = np.delete(glob_names, dg_glob_mean_idx)    #plt.errorbar(mh, np.array(alpha), xerr=0, yerr=0,fmt = '.', c='k', alpha=0.3)    #plt.scatter(mh, np.array(alpha), c=teff, vmin=np.amin(teff), vmax=np.amax(teff), marker = '.', label = 'NIFS BOSZ fits', s = 300, cmap=plt.cm.get_cmap('plasma'))    plt.errorbar(nirspec_mh, np.array(nirspec_alpha), xerr=np.sqrt(np.array(nirspec_alpha_err)**2 + np.array(nirspec_mh_err)**2), yerr=nirspec_alpha_err,fmt = 'd', c='k', alpha=1., markersize=15, label = 'NIRSPEC BOSZ fits')    #plt.scatter(nirspec_mh, np.array(nirspec_alpha), marker = 'd', label = 'NIRSPEC BOSZ fits', s = 200)    plt.errorbar(glob_mh,glob_alpha, xerr=0.05, yerr=0.1, color='#FF0000',marker='s',label='Mean Globular Cluster values',ls='none', markersize=6, alpha=0.3)    #plt.errorbar(-0.76,0.26, xerr=0.05, yerr=0.1, color='k',marker='s',label='M71',ls='none', markersize=12, alpha=0.7)    plt.errorbar(dg_glob_mh,dg_glob_alpha, xerr=0.05, yerr=0.1, color='b',marker='D',label='Mean Dwarf Galaxy Cluster values',ls='none', markersize=6, alpha=0.3)    plt.legend(fontsize=10)    plt.xlabel('[M/H]')    plt.ylabel(r'[$\alpha$/Fe]')    #plt.colorbar()    plt.title(r'[$\alpha$/Fe]'+' vs [M/H] for NIRSPEC stars fit with BOSZ grid')    plt.axhline(y=0., color='k', linestyle='--')    plt.axvline(x=0., color='k', linestyle='--')    print nirspec_teff, nirspec_teff_err    print nirspec_logg, nirspec_logg_err    print nirspec_mh, nirspec_mh_err    print nirspec_alpha, nirspec_alpha_err    plt.show()def nifs_vs_nifs(bulge=False, dgalaxy=False):    nifs_paths = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/nifs/*.h5')    nirspec_path = '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/'    gc_stars = ['NE_1_001', 'NE_1_002', 'NE_1_003', 'E7_1_001', 'E7_2_001', 'E7_1_002', 'E7_1_003', 'N2_1_001',                'E5_1_001', 'N2_1_002', 'N2_1_003']    gc_stars2015 = ['NE1-1 001', 'NE1-1 002', 'NE1-1 003', 'E7-1 001', 'E7-2 001', 'E7-1 002', 'E7-1 003', 'N2-1 001',                'E5-1 001', 'N2-1 002', 'N2-1 003']    teff = []    teff_err = []    logg = []    logg_err = []    mh = []    mh_err = []    alpha = []    alpha_err = []    nn_teff = {}    nn_teff_err = {}    nn_logg = {}    nn_logg_err = {}    nn_mh = {}    nn_mh_err = {}    nn_alpha = {}    nn_alpha_err = {}    nirspec_teff = []    nirspec_teff_err = []    nirspec_logg = []    nirspec_logg_err = []    nirspec_mh = []    nirspec_mh_err = []    nirspec_alpha = []    nirspec_alpha_err = []    Vizier.ROW_LIMIT = 100000    catalog_list = Vizier.find_catalogs('Do, 2015')    catalog = Vizier.get_catalogs(catalog_list.keys())['J/ApJ/809/143/table1']    print catalog.keys()    nn2015_mh = {}    nn2015_mh_err = {}    nn2015_teff = {}    nn2015_teff_err = {}    nn2015_logg = {}    nn2015_logg_err = {}    for i in range(len(catalog['Name'])):        name = catalog['Name'][i]        print name        if name in gc_stars2015:            gc_idx = gc_stars2015.index(name)            gc_name = gc_stars[gc_idx]            nn2015_mh.update({gc_name:catalog['__M_H_'][i]})            nn2015_mh_err.update({gc_name:catalog['e__M_H_'][i]})            nn2015_teff.update({gc_name:catalog['Teff'][i]})            nn2015_teff_err.update({gc_name:catalog['e_Teff'][i]})            nn2015_logg.update({gc_name:catalog['logg'][i]})            nn2015_logg_err.update({gc_name:catalog['e_logg'][i]})    for path in nifs_paths:        result = MultiNestResult.from_hdf5(path)        sigmas = result.calculate_sigmas(1)        obs_twice = [ele for ele in gc_stars if (ele in path)]        for gc in gc_stars:            if gc in path:                star = gc        if obs_twice:            nn_teff.update({star:result.median['teff_0']})            nn_teff_err.update({star:(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.})            nn_logg.update({star:result.median['logg_0']})            nn_logg_err.update({star:(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.})            nn_mh.update({star:result.median['mh_0']})            nn_mh_err.update({star:(sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.})            nn_alpha.update({star:result.median['alpha_0']})            nn_alpha_err.update({star:(sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.})        else:            teff += [result.median['teff_0']]            teff_err += [(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.]            logg += [result.median['logg_0']]            logg_err += [(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.]            mh += [result.median['mh_0']]            mh_err += [(sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.]            alpha += [result.median['alpha_0']]            alpha_err += [(sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.]    print nn_mh.keys(), nn2015_teff.keys()    for a in nn_mh.keys():        plt.errorbar(nn_mh[a], nn_mh[a]-nn2015_mh[a], xerr=np.sqrt(nn_mh_err[a]**2 + 0.17**2), yerr=np.sqrt(np.sqrt(nn_mh_err[a]**2 + 0.17**2)**2 + 0.32**2), fmt='.', c='k', alpha=0.3)        plt.scatter(nn_mh[a], nn_mh[a]-nn2015_mh[a], c=nn_teff[a], vmin=np.amin(3000), vmax=np.amax(4500), marker='d',                    s=200, cmap=plt.cm.get_cmap('plasma'))    #plt.plot(range(2500,6000), range(2500,6000), color = 'k', label = 'BOSZ and NIFS equal')    plt.axhline(y=0., color='k', linestyle='--')    #plt.axvline(x=3500, color='b', linestyle='-.', label= 'BOSZ $T_{eff}$ range lower limit')    plt.legend(fontsize=16)    plt.xlabel('BOSZ [M/H]')    plt.ylabel('[M/H] offset')    plt.colorbar()    plt.title('BOSZ-NIFS [M/H] offset (colored by $T_{eff}$ from BOSZ fit)')    plt.show()def nifs_vs_nirspec():    nifs_paths = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/nifs/*.h5')    nirspec_path = '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/'    gc_stars = ['NE_1_001', 'NE_1_002', 'NE_1_003', 'E7_1_001', 'E7_2_001', 'E7_1_002', 'E7_1_003', 'N2_1_001',                'E5_1_001', 'N2_1_002', 'N2_1_003']    gc_stars2015 = ['NE1-1 001', 'NE1-1 002', 'NE1-1 003', 'E7-1 001', 'E7-2 001', 'E7-1 002', 'E7-1 003', 'N2-1 001',                'E5-1 001', 'N2-1 002', 'N2-1 003']    teff = []    teff_err = []    logg = []    logg_err = []    mh = []    mh_err = []    alpha = []    alpha_err = []    nn_teff = {}    nn_teff_err = {}    nn_logg = {}    nn_logg_err = {}    nn_mh = {}    nn_mh_err = {}    nn_alpha = {}    nn_alpha_err = {}    nirspec_teff = {}    nirspec_teff_err = {}    nirspec_logg = {}    nirspec_logg_err = {}    nirspec_mh = {}    nirspec_mh_err = {}    nirspec_alpha = {}    nirspec_alpha_err = {}    Vizier.ROW_LIMIT = 100000    catalog_list = Vizier.find_catalogs('Do, 2015')    catalog = Vizier.get_catalogs(catalog_list.keys())['J/ApJ/809/143/table1']    print catalog.keys()    nn2015_mh = {}    nn2015_mh_err = {}    nn2015_teff = {}    nn2015_teff_err = {}    nn2015_logg = {}    nn2015_logg_err = {}    for i in range(len(catalog['Name'])):        name = catalog['Name'][i]        print name        if name in gc_stars2015:            gc_idx = gc_stars2015.index(name)            gc_name = gc_stars[gc_idx]            nn2015_mh.update({gc_name:catalog['__M_H_'][i]})            nn2015_mh_err.update({gc_name:catalog['e__M_H_'][i]})            nn2015_teff.update({gc_name:catalog['Teff'][i]})            nn2015_teff_err.update({gc_name:catalog['e_Teff'][i]})            nn2015_logg.update({gc_name:catalog['logg'][i]})            nn2015_logg_err.update({gc_name:catalog['e_logg'][i]})    for path in nifs_paths:        result = MultiNestResult.from_hdf5(path)        sigmas = result.calculate_sigmas(1)        obs_twice = [ele for ele in gc_stars if (ele in path)]        for gc in gc_stars:            if gc in path:                star = gc        if obs_twice:            nn_teff.update({star:result.median['teff_0']})            nn_teff_err.update({star:(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.})            nn_logg.update({star:result.median['logg_0']})            nn_logg_err.update({star:(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.})            nn_mh.update({star:result.median['mh_0']})            nn_mh_err.update({star:(sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.})            nn_alpha.update({star:result.median['alpha_0']})            nn_alpha_err.update({star:(sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.})        else:            teff += [result.median['teff_0']]            teff_err += [(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.]            logg += [result.median['logg_0']]            logg_err += [(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.]            mh += [result.median['mh_0']]            mh_err += [(sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.]            alpha += [result.median['alpha_0']]            alpha_err += [(sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.]    print nn_mh.keys(), nn2015_teff.keys()    for a in nn_teff.keys():        print a        result = MultiNestResult.from_hdf5(nirspec_path+a+'_order34-36_bosz_adderr.h5')        sigmas = result.calculate_sigmas(1)        nirspec_teff.update({a:result.median['teff_0']})        nirspec_teff_err.update({a:(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.})        nirspec_logg.update({a:result.median['logg_0']})        nirspec_logg_err.update({a:(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.})        nirspec_mh.update({a:result.median['mh_0']})        nirspec_mh_err.update({a:(sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.})        nirspec_alpha.update({a:result.median['alpha_0']})        nirspec_alpha_err.update({a:(sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.})    for a in nn_mh.keys():        plt.errorbar(nirspec_mh[a], nirspec_mh[a]-nn_mh[a], xerr=np.sqrt(nirspec_mh_err[a]**2 + 0.17**2), yerr=np.sqrt(np.sqrt(nirspec_mh_err[a]**2 + 0.17**2)**2 + 0.32**2), fmt='.', c='k', alpha=0.3)        plt.scatter(nirspec_mh[a], nirspec_mh[a]-nn_mh[a], c='k', marker='d',s=200)    #plt.plot(range(3500,5000), range(3500,5000), color = 'k', label = 'NIRSPEC and NIFS fits are equal')    plt.axhline(y=0.0, color='k', linestyle='--')    #plt.axvline(x=3500, color='k', linestyle='--', label= 'BOSZ $T_{eff}$ range limit')    #plt.legend(fontsize=16)    plt.xlabel('NIRSPEC [M/H]')    plt.ylabel('[M/H] offset')    #plt.colorbar()    plt.title('BOSZ NIRSPEC-NIFS BOSZ [M/H] offset')    plt.show()def connectpoints_plt(x,y,p1,p2):    plt.plot([x,p1],[y,p2], color='k', alpha=0.4,linestyle='--')def curve_of_growth_one_star(starname, g):    cal_star_info_all = list(        scipy.genfromtxt('/u/rbentley/metallicity/cal_star_info.dat', delimiter='\t', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[1])    cal_star_names = [x[0] for x in cal_star_info_all[:-1]]    ap_mh = [x[1] for x in cal_star_info_all[:-1]]    snr = 30.    star_ind = cal_star_names.index(starname)    cal_star_info = cal_star_info_all[star_ind]    result = MultiNestResult.from_hdf5(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/' + starname + '_order34-36_bosz_adderr.h5')    file1 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order34*.dat')    file2 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order35*.dat')    file3 = glob.glob('/u/ghezgroup/data/metallicity/nirspec/spectra/' + starname + '_order36*.dat')    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='micron')    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='micron')    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='micron')    waverange34 = [np.amin(starspectrum34.wavelength.value[:970]), np.amax(starspectrum34.wavelength.value[:970])]    waverange35 = [np.amin(starspectrum35.wavelength.value[:970]), np.amax(starspectrum35.wavelength.value[:970])]    waverange36 = [np.amin(starspectrum36.wavelength.value[:970]), np.amax(starspectrum36.wavelength.value[:970])]    starspectrum34 = read_fits_file.read_nirspec_dat(file1, desired_wavelength_units='Angstrom',                                                         wave_range=waverange34)    starspectrum35 = read_fits_file.read_nirspec_dat(file2, desired_wavelength_units='Angstrom',                                                         wave_range=waverange35)    starspectrum36 = read_fits_file.read_nirspec_dat(file3, desired_wavelength_units='Angstrom',                                                         wave_range=waverange36)    starspectrum34.uncertainty = (np.zeros(len(starspectrum34.flux.value)) + 1.0 / np.float(            snr)) * starspectrum34.flux.unit    starspectrum35.uncertainty = (np.zeros(len(starspectrum35.flux.value)) + 1.0 / np.float(            snr)) * starspectrum35.flux.unit    starspectrum36.uncertainty = (np.zeros(len(starspectrum36.flux.value)) + 1.0 / np.float(            snr)) * starspectrum36.flux.unit    bmodel = make_model_three_order(starspectrum34, starspectrum35, starspectrum36, g)    for a in result.median.keys():        setattr(bmodel, a, result.median[a])    setattr(bmodel, 'vrad_3', 0.0)    setattr(bmodel, 'vrad_4', 0.0)    setattr(bmodel, 'vrad_5', 0.0)    mh_range = np.linspace(-1.5,0.5,100)    w1, f1, w2, f2, w3, f3 = bmodel()    si1_range = [21925, 21936]    si1_ew_range = [21930, 21932]    d_cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.98))[0]    si1_cont_d = (np.median(starspectrum35.flux.value[d_cont_idx]) + 0.5 * np.std(        starspectrum35.flux.value[d_cont_idx])) * np.ones(        len(w2))  # starspectrum35.wavelength.value**2*p_fit[0] + p_fit[1]*starspectrum35.wavelength.value + p_fit[2]    si2_range = [21371.5, 21384.8]    si2_ew_range = [21377.1, 21379.8]    d_cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.98))[0]    si2_cont_d = (np.median(starspectrum36.flux.value[d_cont_idx]) + 0.5 * np.std(        starspectrum36.flux.value[d_cont_idx])) * np.ones(len(w3))    s1_range = [22503, 22523]    s1_ew_range = [22512, 22514.8]    d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.98))[0]    s1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5 * np.std(        starspectrum34.flux.value[d_cont_idx])) * np.ones(len(w1))    fe1_range = [22464., 22474.]    fe1_ew_range = [22468.3, 22471.1]    d_cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.97))[0]    fe1_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5 * np.std(        starspectrum34.flux.value[d_cont_idx])) * np.ones(len(w1))    fe2_range = [22474., 22484.]    fe2_ew_range = [22478., 22480.9]    d_cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.97))[0]    fe2_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5 * np.std(        starspectrum34.flux.value[d_cont_idx])) * np.ones(len(w1))    fe3_range = [22495., 22505.]    fe3_ew_range = [22498.7, 22501.2]    d_cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (f1 > 0.97))[0]    fe3_cont_d = (np.median(starspectrum34.flux.value[d_cont_idx]) + 0.5 * np.std(        starspectrum34.flux.value[d_cont_idx])) * np.ones(len(w1))    d_w1 = starspectrum34.wavelength.value / (result.median['vrad_3'] / 3e5 + 1.0)    d_w2 = starspectrum35.wavelength.value / (result.median['vrad_4'] / 3e5 + 1.0)    d_w3 = starspectrum36.wavelength.value / (result.median['vrad_5'] / 3e5 + 1.0)    d_si1_ew = rvmeasure.equivalent_width(d_w2, starspectrum35.flux.value, specRange=si1_ew_range,                                            continuum=si1_cont_d)  # Si line    d_si2_ew = rvmeasure.equivalent_width(d_w3, starspectrum36.flux.value, specRange=si2_ew_range,                                            continuum=si2_cont_d)  # Si line    d_s1_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=s1_ew_range,                                           continuum=s1_cont_d)  # S line    d_fe1_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                            specRange=fe1_ew_range, continuum=fe1_cont_d)  # Fe line    d_fe2_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value, specRange=fe2_ew_range,                                            continuum=fe2_cont_d)  # Fe line    d_fe3_ew = rvmeasure.equivalent_width(d_w1, starspectrum34.flux.value,                                            specRange=fe3_ew_range,                                            continuum=fe3_cont_d)  # Fe line    setattr(bmodel, 'mh_0', -1.5)    setattr(bmodel, 'alpha_0', 0.25)    aw1, af1, aw2, af2, aw3, af3 = bmodel()    cont_idx1 = np.where((w1 >= s1_range[0]) & (w1 <= (s1_range[1]+s1_range[0])/2.) & (f1 > 0.94))[0]    cont_idx2 = np.where((w1 >= (s1_range[1]+s1_range[0])/2.) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]    s1_cont_a = (np.amax(af1[cont_idx1])+np.amax(af1[cont_idx2]))/2. * np.ones(len(w1))    plt.axhline(y=s1_cont_a[0], color='k', linestyle='--')    plt.plot(aw1,af1, color='k')    setattr(bmodel, 'mh_0', -1.0)    aw1, af1, aw2, af2, aw3, af3 = bmodel()    cont_idx1 = np.where((w1 >= s1_range[0]) & (w1 <= (s1_range[1]+s1_range[0])/2.) & (f1 > 0.94))[0]    cont_idx2 = np.where((w1 >= (s1_range[1]+s1_range[0])/2.) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]    s1_cont_a = (np.amax(af1[cont_idx1])+np.amax(af1[cont_idx2]))/2. * np.ones(len(w1))    plt.axhline(y=s1_cont_a[0], color='b', linestyle='--')    plt.plot(aw1,af1, color='b')    setattr(bmodel, 'mh_0', 0.5)    aw1, af1, aw2, af2, aw3, af3 = bmodel()    cont_idx1 = np.where((w1 >= s1_range[0]) & (w1 <= (s1_range[1]+s1_range[0])/2.) & (f1 > 0.94))[0]    cont_idx2 = np.where((w1 >= (s1_range[1]+s1_range[0])/2.) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]    s1_cont_a = (np.amax(af1[cont_idx1])+np.amax(af1[cont_idx2]))/2. * np.ones(len(w1))    plt.axhline(y=s1_cont_a[0], color='g', linestyle='--')    plt.plot(aw1,af1, color='g')    plt.axvspan(s1_ew_range[0], s1_ew_range[1],             color='k', alpha=0.1)    plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)    plt.show()    model_si1_ew = []    model_si2_ew = []    model_s1_ew = []    model_fe1_ew = []    model_fe2_ew = []    model_fe3_ew = []    a_si1_ew = []    a_si2_ew = []    a_s1_ew = []    a_fe1_ew = []    a_fe2_ew = []    a_fe3_ew = []    for a in result.median.keys():        setattr(bmodel, a, result.median[a])    setattr(bmodel, 'vrad_3', 0.0)    setattr(bmodel, 'vrad_4', 0.0)    setattr(bmodel, 'vrad_5', 0.0)    for mh in mh_range:        #setattr(bmodel, 'teff_0', cal_star_info[2])        #setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', mh)        #setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        cont_idx1 = np.where((w2 >= si1_range[0]) & (w2 <= (si1_range[1] + si1_range[0]) / 2.) & (f2 > 0.94))[0]        cont_idx2 = np.where((w2 >= (si1_range[1] + si1_range[0]) / 2.) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        si1_cont_a = (np.amax(af2[cont_idx1]) + np.amax(af2[cont_idx2])) / 2. * np.ones(len(w2))        cont_idx1 = np.where((w3 >= si2_range[0]) & (w3 <= (si2_range[1] + si2_range[0]) / 2.) & (f3 > 0.94))[0]        cont_idx2 = np.where((w3 >= (si2_range[1] + si2_range[0]) / 2.) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        si2_cont_a = (np.amax(af3[cont_idx1]) + np.amax(af3[cont_idx2])) / 2. * np.ones(len(w2))        cont_idx1 = np.where((w1 >= s1_range[0]) & (w1 <= (s1_range[1] + s1_range[0]) / 2.) & (f1 > 0.94))[0]        cont_idx2 = np.where((w1 >= (s1_range[1] + s1_range[0]) / 2.) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]        s1_cont_a = (np.amax(af1[cont_idx1]) + np.amax(af1[cont_idx2])) / 2. * np.ones(len(w2))        cont_idx1 = np.where((w1 >= fe1_range[0]) & (w1 <= (fe1_range[1] + fe1_range[0]) / 2.) & (f1 > 0.94))[0]        cont_idx2 = np.where((w1 >= (fe1_range[1] + fe1_range[0]) / 2.) & (w1 <= fe1_range[1]) & (f1 > 0.94))[0]        fe1_cont_a = (np.amax(af1[cont_idx1]) + np.amax(af1[cont_idx2])) / 2. * np.ones(len(w2))        cont_idx1 = np.where((w1 >= fe2_range[0]) & (w1 <= (fe2_range[1] + fe2_range[0]) / 2.) & (f1 > 0.94))[0]        cont_idx2 = np.where((w1 >= (fe2_range[1] + fe2_range[0]) / 2.) & (w1 <= fe2_range[1]) & (f1 > 0.94))[0]        fe2_cont_a = (np.amax(af1[cont_idx1]) + np.amax(af1[cont_idx2])) / 2. * np.ones(len(w2))        cont_idx1 = np.where((w1 >= fe3_range[0]) & (w1 <= (fe3_range[1] + fe3_range[0]) / 2.) & (f1 > 0.94))[0]        cont_idx2 = np.where((w1 >= (fe3_range[1] + fe3_range[0]) / 2.) & (w1 <= fe3_range[1]) & (f1 > 0.94))[0]        fe3_cont_a = (np.amax(af1[cont_idx1]) + np.amax(af1[cont_idx2])) / 2. * np.ones(len(w2))        a_si1_ew += [rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                              continuum=si1_cont_a)]  # Si line        a_si2_ew += [rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                              continuum=si2_cont_a)]  # Si line        a_s1_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                             continuum=s1_cont_a)]  # S line        a_fe1_ew += [rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        a_fe2_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                              continuum=fe2_cont_a)]  # Fe line        a_fe3_ew += [rvmeasure.equivalent_width(aw1, af1,                                              specRange=fe3_ew_range,                                              continuum=fe3_cont_a)]  # Fe line    model_si1_ew += [[result.median['alpha_0'], a_si1_ew]]    model_si2_ew += [[result.median['alpha_0'], a_si2_ew]]    model_s1_ew += [[result.median['alpha_0'], a_s1_ew]]    model_fe1_ew += [[result.median['alpha_0'], a_fe1_ew]]    model_fe2_ew += [[result.median['alpha_0'], a_fe2_ew]]    model_fe3_ew += [[result.median['alpha_0'], a_fe3_ew]]    a_si1_ew = []    a_si2_ew = []    a_s1_ew = []    a_fe1_ew = []    a_fe2_ew = []    a_fe3_ew = []    setattr(bmodel, 'teff_0', cal_star_info[2])    setattr(bmodel, 'logg_0', cal_star_info[3])    #setattr(bmodel, 'mh_0', cal_star_info[1])    setattr(bmodel, 'alpha_0', cal_star_info[4])    for mh in mh_range:        print mh        # setattr(bmodel, 'teff_0', cal_star_info[2])        # setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', mh)        # setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        cont_idx1 = np.where((w2 >= si1_range[0]) & (w2 <= (si1_range[1]+si1_range[0])/2.) & (f2 > 0.94))[0]        cont_idx2 = np.where((w2 >= (si1_range[1]+si1_range[0])/2.) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        si1_cont_a = (np.amax(af2[cont_idx1])+np.amax(af2[cont_idx2]))/2. * np.ones(len(w2))        cont_idx1 = np.where((w3 >= si2_range[0]) & (w3 <= (si2_range[1]+si2_range[0])/2.) & (f3 > 0.94))[0]        cont_idx2 = np.where((w3 >= (si2_range[1]+si2_range[0])/2.) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        si2_cont_a = (np.amax(af3[cont_idx1])+np.amax(af3[cont_idx2]))/2. * np.ones(len(w2))        cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]        s1_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w1))        cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (f1 > 0.94))[0]        fe1_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.94))[0]        fe2_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (f1 > 0.94))[0]        fe3_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        a_si1_ew += [rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                                continuum=si1_cont_a)]  # Si line        a_si2_ew += [rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                                continuum=si2_cont_a)]  # Si line        a_s1_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                               continuum=s1_cont_a)]  # S line        a_fe1_ew += [rvmeasure.equivalent_width(aw1, af1,                                                specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        a_fe2_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                                continuum=fe2_cont_a)]  # Fe line        a_fe3_ew += [rvmeasure.equivalent_width(aw1, af1,                                                specRange=fe3_ew_range,                                                continuum=fe3_cont_a)]  # Fe line    model_si1_ew += [[cal_star_info[4], a_si1_ew]]    model_si2_ew += [[cal_star_info[4], a_si2_ew]]    model_s1_ew += [[cal_star_info[4], a_s1_ew]]    model_fe1_ew += [[cal_star_info[4], a_fe1_ew]]    model_fe2_ew += [[cal_star_info[4], a_fe2_ew]]    model_fe3_ew += [[cal_star_info[4], a_fe3_ew]]    a_si1_ew = []    a_si2_ew = []    a_s1_ew = []    a_fe1_ew = []    a_fe2_ew = []    a_fe3_ew = []    setattr(bmodel, 'alpha_0', 0.0)    for mh in mh_range:        # setattr(bmodel, 'teff_0', cal_star_info[2])        # setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', mh)        # setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        cont_idx1 = np.where((w2 >= si1_range[0]) & (w2 <= (si1_range[1]+si1_range[0])/2.) & (f2 > 0.94))[0]        cont_idx2 = np.where((w2 >= (si1_range[1]+si1_range[0])/2.) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        si1_cont_a = (np.amax(af2[cont_idx1])+np.amax(af2[cont_idx2]))/2. * np.ones(len(w2))        cont_idx1 = np.where((w3 >= si2_range[0]) & (w3 <= (si2_range[1]+si2_range[0])/2.) & (f3 > 0.94))[0]        cont_idx2 = np.where((w3 >= (si2_range[1]+si2_range[0])/2.) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        si2_cont_a = (np.amax(af3[cont_idx1])+np.amax(af3[cont_idx2]))/2. * np.ones(len(w2))        #cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        #si1_cont_a = np.amax(af2[cont_idx]) * np.ones(len(w2))        #cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        #si2_cont_a = np.amax(af3[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (f1 > 0.94))[0]        s1_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w1))        cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (f1 > 0.94))[0]        fe1_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (f1 > 0.94))[0]        fe2_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (f1 > 0.94))[0]        fe3_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        a_si1_ew += [rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                                continuum=si1_cont_a)]  # Si line        a_si2_ew += [rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                                continuum=si2_cont_a)]  # Si line        a_s1_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                               continuum=s1_cont_a)]  # S line        a_fe1_ew += [rvmeasure.equivalent_width(aw1, af1,                                                specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        a_fe2_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                                continuum=fe2_cont_a)]  # Fe line        a_fe3_ew += [rvmeasure.equivalent_width(aw1, af1,                                                specRange=fe3_ew_range,                                                continuum=fe3_cont_a)]  # Fe line    model_si1_ew += [[0.0, a_si1_ew]]    model_si2_ew += [[0.0, a_si2_ew]]    model_s1_ew += [[0.0, a_s1_ew]]    model_fe1_ew += [[0.0, a_fe1_ew]]    model_fe2_ew += [[0.0, a_fe2_ew]]    model_fe3_ew += [[0.0, a_fe3_ew]]    a_si1_ew = []    a_si2_ew = []    a_s1_ew = []    a_fe1_ew = []    a_fe2_ew = []    a_fe3_ew = []    setattr(bmodel, 'alpha_0', 0.25)    for mh in mh_range:        # setattr(bmodel, 'teff_0', cal_star_info[2])        # setattr(bmodel, 'logg_0', cal_star_info[3])        setattr(bmodel, 'mh_0', mh)        # setattr(bmodel, 'alpha_0', cal_star_info[4])        aw1, af1, aw2, af2, aw3, af3 = bmodel()        #cont_idx = np.where((w2 >= si1_range[0]) & (w2 <= si1_range[1]) & (af2 > 0.94))[0]        #si1_cont_a = np.amax(af2[cont_idx]) * np.ones(len(w2))        #cont_idx = np.where((w3 >= si2_range[0]) & (w3 <= si2_range[1]) & (af3 > 0.94))[0]        #si2_cont_a = np.amax(af3[cont_idx]) * np.ones(len(w2))        cont_idx1 = np.where((w2 >= si1_range[0]) & (w2 <= (si1_range[1]+si1_range[0])/2.) & (f2 > 0.94))[0]        cont_idx2 = np.where((w2 >= (si1_range[1]+si1_range[0])/2.) & (w2 <= si1_range[1]) & (f2 > 0.94))[0]        si1_cont_a = (np.amax(af2[cont_idx1])+np.amax(af2[cont_idx2]))/2. * np.ones(len(w2))        cont_idx1 = np.where((w3 >= si2_range[0]) & (w3 <= (si2_range[1]+si2_range[0])/2.) & (f3 > 0.94))[0]        cont_idx2 = np.where((w3 >= (si2_range[1]+si2_range[0])/2.) & (w3 <= si2_range[1]) & (f3 > 0.94))[0]        si2_cont_a = (np.amax(af3[cont_idx1])+np.amax(af3[cont_idx2]))/2. * np.ones(len(w2))        cont_idx = np.where((w1 >= s1_range[0]) & (w1 <= s1_range[1]) & (af1 > 0.94))[0]        s1_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w1))        cont_idx = np.where((w1 >= fe1_range[0]) & (w1 <= fe1_range[1]) & (af1 > 0.94))[0]        fe1_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= fe2_range[0]) & (w1 <= fe2_range[1]) & (af1 > 0.94))[0]        fe2_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        cont_idx = np.where((w1 >= fe3_range[0]) & (w1 <= fe3_range[1]) & (af1 > 0.94))[0]        fe3_cont_a = np.amax(af1[cont_idx]) * np.ones(len(w2))        a_si1_ew += [rvmeasure.equivalent_width(aw2, af2, specRange=si1_ew_range,                                                continuum=si1_cont_a)]  # Si line        a_si2_ew += [rvmeasure.equivalent_width(aw3, af3, specRange=si2_ew_range,                                                continuum=si2_cont_a)]  # Si line        a_s1_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=s1_ew_range,                                               continuum=s1_cont_a)]  # S line        a_fe1_ew += [rvmeasure.equivalent_width(aw1, af1,                                                specRange=fe1_ew_range, continuum=fe1_cont_a)]  # Fe line        a_fe2_ew += [rvmeasure.equivalent_width(aw1, af1, specRange=fe2_ew_range,                                                continuum=fe2_cont_a)]  # Fe line        a_fe3_ew += [rvmeasure.equivalent_width(aw1, af1,                                                specRange=fe3_ew_range,                                                continuum=fe3_cont_a)]  # Fe line    model_si1_ew += [[0.25, a_si1_ew]]    model_si2_ew += [[0.25, a_si2_ew]]    model_s1_ew += [[0.25, a_s1_ew]]    model_fe1_ew += [[0.25, a_fe1_ew]]    model_fe2_ew += [[0.25, a_fe2_ew]]    model_fe3_ew += [[0.25, a_fe3_ew]]    fig, axs = plt.subplots(6, 1, sharex='col', sharey='row',                            gridspec_kw={'hspace': 0.5, 'wspace': 0.5}, figsize=(11, 18))    (si1_ax, si2_ax, s1_ax, fe1_ax, fe2_ax, fe3_ax) = axs    si1_ax.errorbar(cal_star_info[1], d_si1_ew, yerr=0.02, marker='d', markersize=8, ls='none', label='Data EW', color='k')    si1_ax.errorbar(mh_range, model_si1_ew[0][1], marker='.', markersize=8, ls='none', label='Model EW at best-fit params [alpha/Fe]='+str(np.round_(model_si1_ew[0][0],decimals=3)), color = '#33AFFF')    si1_ax.errorbar(mh_range, model_si1_ew[1][1], marker='.', markersize=8, ls='none', label='Model EW at APOGEE params, [alpha/Fe]='+str(np.round_(model_si1_ew[1][0],decimals=3)), color='#f09c37')    si1_ax.fill_between(mh_range, np.array(model_si1_ew[0][1])-0.02, np.array(model_si1_ew[0][1])+0.02, where=(np.array(model_si1_ew[0][1])+0.02) >= (np.array(model_si1_ew[0][1])-0.02),facecolor='#33AFFF', interpolate=True, alpha=0.3)    si1_ax.fill_between(mh_range, np.array(model_si1_ew[1][1])-0.02, np.array(model_si1_ew[1][1])+0.02, where=(np.array(model_si1_ew[1][1])+0.02) >= (np.array(model_si1_ew[1][1])-0.02),facecolor='#f09c37', interpolate=True, alpha=0.3)    #si1_ax.errorbar(mh_range, model_si1_ew[2][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_si1_ew[2][0],decimals=3)))    #si1_ax.errorbar(mh_range, model_si1_ew[3][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_si1_ew[3][0],decimals=3)))    si1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=si1_ew_range)    si1_ax.set_title('Curves of growth for '+starname+'\nSi ' + str(np.round_(linelocs[0], decimals=1)))    si1_ax.legend(fontsize=10, loc='lower right')    si1_ax.set_ylabel('Equivalent width')    #si1_ax.set_title('Equivalent width vs APOGEE [M/H]')    si2_ax.errorbar(cal_star_info[1], d_si2_ew, yerr=0.02, marker='d', markersize=8, ls='none', label='Data EW', color='k')    si2_ax.errorbar(mh_range, model_si2_ew[0][1], marker='.', markersize=8, ls='none', label='Model EW at best-fit [alpha/Fe]='+str(np.round_(model_si2_ew[0][0],decimals=3)), color = '#33AFFF')    si2_ax.errorbar(mh_range, model_si2_ew[1][1], marker='.', markersize=8, ls='none', label='Model EW at APOGEE [alpha/Fe]='+str(np.round_(model_si2_ew[1][0],decimals=3)), color='#f09c37')    si2_ax.fill_between(mh_range, np.array(model_si2_ew[0][1])-0.02, np.array(model_si2_ew[0][1])+0.02, where=(np.array(model_si2_ew[0][1])+0.02) >= (np.array(model_si2_ew[0][1])-0.02),facecolor='#33AFFF', interpolate=True, alpha=0.3)    si2_ax.fill_between(mh_range, np.array(model_si2_ew[1][1])-0.02, np.array(model_si2_ew[1][1])+0.02, where=(np.array(model_si2_ew[1][1])+0.02) >= (np.array(model_si2_ew[1][1])-0.02),facecolor='#f09c37', interpolate=True, alpha=0.3)    #si2_ax.errorbar(mh_range, model_si2_ew[2][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_si2_ew[2][0],decimals=3)))    #si2_ax.errorbar(mh_range, model_si2_ew[3][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_si2_ew[3][0],decimals=3)))    si2_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=si2_ew_range)    si2_ax.set_title('Si ' + str(np.round_(linelocs[0], decimals=1)))    s1_ax.errorbar(cal_star_info[1], d_s1_ew, yerr=0.02, marker='d', markersize=8, ls='none', label='Data EW', color='k')    s1_ax.errorbar(mh_range, model_s1_ew[0][1], marker='.', markersize=8, ls='none', label='Model EW at best-fit [alpha/Fe]='+str(np.round_(model_s1_ew[0][0],decimals=3)), color = '#33AFFF')    s1_ax.errorbar(mh_range, model_s1_ew[1][1], marker='.', markersize=8, ls='none', label='Model EW at APOGEE [alpha/Fe]='+str(np.round_(model_s1_ew[1][0],decimals=3)), color='#f09c37')    s1_ax.fill_between(mh_range, np.array(model_s1_ew[0][1])-0.02, np.array(model_s1_ew[0][1])+0.02, where=(np.array(model_s1_ew[0][1])+0.02) >= (np.array(model_s1_ew[0][1])-0.02),facecolor='#33AFFF', interpolate=True, alpha=0.3)    s1_ax.fill_between(mh_range, np.array(model_s1_ew[1][1])-0.02, np.array(model_s1_ew[1][1])+0.02, where=(np.array(model_s1_ew[1][1])+0.02) >= (np.array(model_s1_ew[1][1])-0.02),facecolor='#f09c37', interpolate=True, alpha=0.3)    #s1_ax.errorbar(mh_range, model_s1_ew[2][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_s1_ew[2][0],decimals=3)))    #s1_ax.errorbar(mh_range, model_s1_ew[3][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_s1_ew[3][0],decimals=3)))    s1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=s1_ew_range)    s1_ax.set_title('S ' + str(np.round_(linelocs[0], decimals=1)))    fe1_ax.errorbar(cal_star_info[1], d_fe1_ew, yerr=0.02, marker='d', markersize=8, ls='none', label='Data EW', color='k')    fe1_ax.errorbar(mh_range, model_fe1_ew[0][1], marker='.', markersize=8, ls='none', label='Model EW at best-fit [alpha/Fe]='+str(np.round_(model_fe1_ew[0][0],decimals=3)), color = '#33AFFF')    fe1_ax.errorbar(mh_range, model_fe1_ew[1][1], marker='.', markersize=8, ls='none', label='Model EW at APOGEE [alpha/Fe]='+str(np.round_(model_fe1_ew[1][0],decimals=3)), color='#f09c37')    fe1_ax.fill_between(mh_range, np.array(model_fe1_ew[0][1])-0.02, np.array(model_fe1_ew[0][1])+0.02, where=(np.array(model_fe1_ew[0][1])+0.02) >= (np.array(model_fe1_ew[0][1])-0.02),facecolor='#33AFFF', interpolate=True, alpha=0.3)    fe1_ax.fill_between(mh_range, np.array(model_fe1_ew[1][1])-0.02, np.array(model_fe1_ew[1][1])+0.02, where=(np.array(model_fe1_ew[1][1])+0.02) >= (np.array(model_fe1_ew[1][1])-0.02),facecolor='#f09c37', interpolate=True, alpha=0.3)    #fe1_ax.errorbar(mh_range, model_fe1_ew[2][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_fe1_ew[2][0],decimals=3)))    #fe1_ax.errorbar(mh_range, model_fe1_ew[3][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_fe1_ew[3][0],decimals=3)))    fe1_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe1_ew_range)    fe1_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe2_ax.errorbar(cal_star_info[1], d_fe2_ew, yerr=0.02, marker='d', markersize=8, ls='none', label='Data EW', color='k')    fe2_ax.errorbar(mh_range, model_fe2_ew[0][1], marker='.', markersize=8, ls='none', label='Model EW at best-fit [alpha/Fe]='+str(np.round_(model_fe2_ew[0][0],decimals=3)), color = '#33AFFF')    fe2_ax.errorbar(mh_range, model_fe2_ew[1][1], marker='.', markersize=8, ls='none', label='Model EW at APOGEE [alpha/Fe]='+str(np.round_(model_fe2_ew[1][0],decimals=3)), color='#f09c37')    fe2_ax.fill_between(mh_range, np.array(model_fe2_ew[0][1])-0.02, np.array(model_fe2_ew[0][1])+0.02, where=(np.array(model_fe2_ew[0][1])+0.02) >= (np.array(model_fe2_ew[0][1])-0.02),facecolor='#33AFFF', interpolate=True, alpha=0.3)    fe2_ax.fill_between(mh_range, np.array(model_fe2_ew[1][1])-0.02, np.array(model_fe2_ew[1][1])+0.02, where=(np.array(model_fe2_ew[1][1])+0.02) >= (np.array(model_fe2_ew[1][1])-0.02),facecolor='#f09c37', interpolate=True, alpha=0.3)    #fe2_ax.errorbar(mh_range, model_fe2_ew[2][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_fe2_ew[2][0],decimals=3)))    #fe2_ax.errorbar(mh_range, model_fe2_ew[3][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_fe2_ew[3][0],decimals=3)))    fe2_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe2_ew_range)    fe2_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe3_ax.errorbar(cal_star_info[1], d_fe3_ew, yerr=0.02, marker='d', markersize=8, ls='none', label='Data EW', color='k')    fe3_ax.errorbar(mh_range, model_fe3_ew[0][1], marker='.', markersize=8, ls='none', label='Model EW at best-fit [alpha/Fe]='+str(np.round_(model_fe3_ew[0][0],decimals=3)), color = '#33AFFF')    fe3_ax.errorbar(mh_range, model_fe3_ew[1][1], marker='.', markersize=8, ls='none', label='Model EW at APOGEE [alpha/Fe]='+str(np.round_(model_fe3_ew[1][0],decimals=3)), color='#f09c37')    fe3_ax.fill_between(mh_range, np.array(model_fe3_ew[0][1])-0.02, np.array(model_fe3_ew[0][1])+0.02, where=(np.array(model_fe3_ew[0][1])+0.02) >= (np.array(model_fe3_ew[0][1])-0.02),facecolor='#33AFFF', interpolate=True, alpha=0.3)    fe3_ax.fill_between(mh_range, np.array(model_fe3_ew[1][1])-0.02, np.array(model_fe3_ew[1][1])+0.02, where=(np.array(model_fe3_ew[1][1])+0.02) >= (np.array(model_fe3_ew[1][1])-0.02),facecolor='#f09c37', interpolate=True, alpha=0.3)    #fe3_ax.errorbar(mh_range, model_fe3_ew[2][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_fe3_ew[2][0],decimals=3)))    #fe3_ax.errorbar(mh_range, model_fe3_ew[3][1], yerr=0.02, marker='.', markersize=5, ls='none', label='Model EW at [alpha/Fe]='+str(np.round_(model_fe3_ew[3][0],decimals=3)))    fe3_ax.axhline(y=0., color='k', linestyle='--')    (linelocs, linelabels) = plotlines.extract_lines(angstrom=True, arcturus=True, molecules=False,                                                     wave_range=fe3_ew_range)    fe3_ax.set_title('Fe ' + str(np.round_(linelocs[0], decimals=1)))    fe3_ax.set_xlabel('APOGEE [M/H]')    #plt.show()    plt.savefig(        '/u/rbentley/localcompute/fitting_plots/curve_of_growth_apogee_mh_bf_vs_ap'+starname+'.png')def ew_monte_carlo(wave, flux, spec_range, cont, snr=40.):    ew_vals = []    for i in range(100):        noisy_flux = flux + np.random.normal(0., 1/snr, len(flux))        ew_vals += [rvmeasure.equivalent_width(wave, noisy_flux, specRange=spec_range,                                              continuum=cont)]    print np.std(ew_vals), 'here'    return np.std(ew_vals)def change_do2015_starname(starname):    starname = starname.replace(' ', '_')    starname = starname.replace('-', '_')    return starnamedef nifs_mh_vs_kmag():    nifs_paths = glob.glob('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/nifs/*.h5')    nirspec_path = '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/unmasked/'    catalog_list = Vizier.find_catalogs('Do, 2015')    catalog = Vizier.get_catalogs(catalog_list.keys())['J/ApJ/808/106/stars']    locs = np.where((catalog['SNR'] >= 20.))[0]    starnames = catalog['Name']    starnames = map(change_do2015_starname, starnames)    print starnames    nirspec_stars = ['NE_1_001', 'NE_1_002', 'NE_1_003', 'E7_1_001', 'E7_2_001', 'E7_1_002', 'E7_1_003', 'N2_1_001',                'E5_1_001', 'N2_1_002', 'N2_1_003', 'S1-23']    for i in range(len(starnames)):        if starnames[i] in ['NE1_1_001', 'NE1_1_002', 'NE1_1_003']:            starnames[i] = starnames[i].replace('NE1', 'NE')    mh_offset = 0.15    mh_scatter = 0.17    alpha_offset = 0.18    alpha_scatter = 0.18    ksmags = catalog['Ksmag']    teff = []    teff_err = []    logg = []    logg_err = []    mh = []    mh_err = []    alpha = []    alpha_err = []    kmag = []    nspec_kmag = []    nspec_mh = []    nspec_mh_err = []    for path in nifs_paths:        result = MultiNestResult.from_hdf5(path)        sigmas = result.calculate_sigmas(1)        for name in starnames:            if name in path:                star_idx = starnames.index(name)                starn = name                continue        obs_twice = [ele for ele in nirspec_stars if (ele in path)]        if obs_twice:            print ksmags[star_idx], starn            nspec_mh += [result.median['mh_0'] + mh_offset]            nspec_mh_err += [np.sqrt(((sigmas['mh_0'][1] - sigmas['mh_0'][0]) / 2.) ** 2 + mh_scatter ** 2)]            nspec_kmag += [ksmags[star_idx]]        kmag += [ksmags[star_idx]]        teff += [result.median['teff_0']]        teff_err += [(sigmas['teff_0'][1]-sigmas['teff_0'][0])/2.]        logg += [result.median['logg_0']]        logg_err += [(sigmas['logg_0'][1]-sigmas['logg_0'][0])/2.]        mh += [result.median['mh_0']+mh_offset]        mh_err += [np.sqrt(((sigmas['mh_0'][1]-sigmas['mh_0'][0])/2.)**2 + mh_scatter**2)]        alpha += [result.median['alpha_0']+alpha_offset]        alpha_err += [np.sqrt(((sigmas['alpha_0'][1]-sigmas['alpha_0'][0])/2.)**2 + alpha_scatter**2)]    print len(nspec_mh), len(nspec_kmag)    for i in range(len(kmag)):        print kmag[i], mh[i]    plt.errorbar(mh, kmag, xerr=mh_err, marker='.', markersize=15, ls='none', label='Galactic Center NIFS stars', color='k', alpha=0.4)    plt.errorbar(nspec_mh, nspec_kmag, xerr=nspec_mh_err, marker='d', markersize=14, ls='none', label='Galactic Center NIRSPEC stars', color='b')    plt.ylim(np.amax(kmag)+1., np.amin(kmag)-1.)    plt.legend()    plt.xlabel('[M/H]')    plt.ylabel('K mag')    plt.title('[M/H] vs K magnitude for NIFS and NIRSPEC Galactic Center fits')    plt.show()def make_fit_result_plots_spex(grids=None):    snr = 30.    outputpath = 'spex'    result_title = 'BOSZ'    if not os.path.exists('/u/rbentley/localcompute/fitting_plots/'+outputpath):        os.mkdir('/u/rbentley/localcompute/fitting_plots/'+outputpath)    cal_star_info_all = list(scipy.genfromtxt('/u/rbentley/metallicity/irtf_spex_stars.dat', delimiter=',', skip_header=1, dtype=None))    cal_star_info_all.sort(key=lambda x: x[0])    cal_star_info_all = filter(lambda x: np.isfinite(x[8]) and np.isfinite(x[10]) and np.isfinite(x[11]), cal_star_info_all)    cal_star_names = [x[3] for x in cal_star_info_all]    for i in cal_star_info_all:        print i    bosz_vals = {'teff': [], \                    'logg': [], \                    'mh': [], \                    'alpha': []}    bosz_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    bosz_sigmas = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    phoenix_offsets = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    ap_values = {'teff':[],\               'logg':[],\               'mh':[],\               'alpha':[]}    chi2_vals = []    koa_chi2_vals = []    if grids is not None:        bosz = grids    else:        bosz = load_full_grid_bosz()    print cal_star_names    for name in cal_star_names:        star_ind = cal_star_names.index(name)        cal_star_info = cal_star_info_all[star_ind]        if 'HD' in name:            name_comps = name.split(' ')            name = name_comps[0] + str(int(name_comps[1]))        else:            name = name.replace(' ','_')        print name, cal_star_info        file_path = glob.glob(            '/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/BOSZ_fits/spex/*' + name + '_bosz_spex_fit_R_adderr.h5')        if not file_path:            continue        bosz_result = MultiNestResult.from_hdf5(file_path[0])        #phoenix_result = MultiNestResult.from_hdf5('/u/rbentley/metallicity/spectra_fits/masked_fit_results/orders34-35-36/PHOENIX_fits/sl_masked/mh_masked_sl_cutoff_0.0_' + name + '_order34-36_phoenix_adderr.h5')        bosz_bounds = bosz_result.calculate_sigmas(1)        #bosz_result.plot_triangle(parameters=['teff_0', 'logg_0', 'mh_0', 'alpha_0', 'vrot_1'])        #plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_corner.png')        #plt.clf()        bosz_sigmas['teff'] += [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + 0.**2)]        bosz_sigmas['logg'] += [np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + 0.**2)]        bosz_sigmas['mh'] += [np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + 0.**2)]        bosz_sigmas['alpha'] += [np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + 0.**2)]        bosz_sigmas_one = [np.sqrt(((bosz_bounds['teff_0'][1]-bosz_bounds['teff_0'][0])/2)**2 + 0.**2), +\                           np.sqrt(((bosz_bounds['logg_0'][1]-bosz_bounds['logg_0'][0])/2)**2 + 0.**2), +\                           np.sqrt(((bosz_bounds['mh_0'][1]-bosz_bounds['mh_0'][0])/2)**2 + 0.**2),+\                           np.sqrt(((bosz_bounds['alpha_0'][1]-bosz_bounds['alpha_0'][0])/2)**2 + 0.**2)]        bosz_sigmas_one = np.around(bosz_sigmas_one, decimals=2)        #phoenix_bounds = phoenix_result.calculate_sigmas(1)        #phoenix_sigmas['teff'] += [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2 + 91.5**2)] #cal_star_info[7]        #phoenix_sigmas['logg'] += [np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + 0.11**2)] #cal_star_info[8]        #phoenix_sigmas['mh'] += [np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + 0.05**2)] #cal_star_info[6]        #phoenix_sigmas['alpha'] += [np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + 0.05**2)] #cal_star_info[9]        #phoenix_sigmas_one = [np.sqrt(((phoenix_bounds['teff_0'][1]-phoenix_bounds['teff_0'][0])/2)**2 + cal_star_info[7]**2), +\        #                   np.sqrt(((phoenix_bounds['logg_0'][1]-phoenix_bounds['logg_0'][0])/2)**2 + cal_star_info[8]**2), +\        #                   np.sqrt(((phoenix_bounds['mh_0'][1]-phoenix_bounds['mh_0'][0])/2)**2 + cal_star_info[6]**2),+\        #                   np.sqrt(((phoenix_bounds['alpha_0'][1]-phoenix_bounds['alpha_0'][0])/2)**2 + cal_star_info[9]**2)]        #phoenix_sigmas_one = np.around(phoenix_sigmas_one, decimals=2)        bosz_vals['teff'] += [bosz_result.median['teff_0']]        bosz_vals['logg'] += [bosz_result.median['logg_0']]        bosz_vals['mh'] += [bosz_result.median['mh_0']]        bosz_vals['alpha'] += [bosz_result.median['alpha_0']]        bosz_offsets['teff'] += [bosz_result.median['teff_0']-cal_star_info[8]]        bosz_offsets['logg'] += [bosz_result.median['logg_0']-cal_star_info[10]]        bosz_offsets['mh'] += [bosz_result.median['mh_0']-cal_star_info[11]]        bosz_offsets['alpha'] += [bosz_result.median['alpha_0']-0.]        file1 = '/u/tdo/research/metallicity/standards/*' + name + '.fits'        spec1 = glob.glob(file1)[0]        starspectrum = mtf.load_spex_spectra(spec1,waverange=[21000.,22910.],normalize=True)        interp1 = Interpolate(starspectrum)        convolve1 = InstrumentConvolveGrating.from_grid(bosz, R=2000.)        rot1 = RotationalBroadening.from_grid(bosz, vrot=np.array([10.0]))        norm1 = Normalize(starspectrum, 2)        bmodel = bosz | rot1 | DopplerShift(vrad=0) | convolve1 | interp1 | norm1        amodel = bmodel        for a in bosz_result.median.keys():            setattr(bmodel, a, bosz_result.median[a])        bw1, bf1 = bmodel()        bosz_res1 = starspectrum.flux.value - bf1        print bosz_res1, len(bosz_res1)        bosz_chi2 = np.sum((bosz_res1) ** 2 / (starspectrum.uncertainty.value) ** 2)        bosz_chi2 = bosz_chi2 / len(bosz_res1)        bosz_deltas = np.around([bosz_result.median['teff_0'] - cal_star_info[8], bosz_result.median['logg_0'] - cal_star_info[10],                  bosz_result.median['mh_0'] - cal_star_info[11], bosz_result.median['alpha_0'] - 0.],decimals=2)        setattr(amodel, 'teff_0', cal_star_info[8])        setattr(amodel, 'logg_0', cal_star_info[10])        setattr(amodel, 'mh_0', cal_star_info[11])        aw1, af1 = amodel()        apogee_res1 = starspectrum.flux.value - af1        apogee_chi2 = np.sum((apogee_res1) ** 2 / (starspectrum.uncertainty.value) ** 2)        apogee_chi2 = apogee_chi2 / len(apogee_res1)        chi2_vals += [(np.round_(bosz_chi2,decimals=2),np.round_(0.,decimals=2),np.round_(apogee_chi2,decimals=2))]        '''        plt.figure(figsize=(16, 12))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)        plt.text(22090, 0.65,'Star:'+name+'\n$T_{eff}:$' + str(cal_star_info[8]) +'$\pm$'+ str('?') + '\n$log g:$' + str(cal_star_info[10]) +'$\pm$'+ str('?') + \                 '\n$[M/H]:$' + str(cal_star_info[11]) +'$\pm$'+ str(0.) + '\n'+r'$\alpha$:' + str('?') +'$\pm$'+ str(''),fontsize=12, bbox=props)        plt.text(22090, 0.4,'BOSZ fit offsets:\n$\Delta T_{eff}:$' + str(bosz_deltas[0]) +'$\pm$'+ str(bosz_sigmas_one[0]) + '\n$\Delta log g:$' + str(bosz_deltas[1]) +'$\pm$'+ str(bosz_sigmas_one[1]) + \                 '\n$\Delta [M/H]:$' + str(bosz_deltas[2]) +'$\pm$'+ str(bosz_sigmas_one[2]) + '\n'+r'[$\alpha$/Fe]:' + str(bosz_deltas[3]) +'$\pm$'+ str(bosz_sigmas_one[3])                 + '\n'+'$\chi^{2}$:' + str(bosz_chi2) +'\n$\chi^{2}$ at ref. values'+ str(apogee_chi2), fontsize=12, bbox=props)        #22035        #plt.text(22090, 0.1,'PHOENIX fit offsets:\n$\Delta T_{eff}:$' + str(phoenix_deltas[0]) +'$\pm$'+ str(phoenix_sigmas_one[0]) + '\n$\Delta log g:$' + str(phoenix_deltas[1]) +'$\pm$'+ str(phoenix_sigmas_one[1]) + \        #         '\n$\Delta [M/H]:$' + str(phoenix_deltas[2]) +'$\pm$'+ str(phoenix_sigmas_one[2]) + '\n'+r'$\Delta$$\alpha$:' + str(phoenix_deltas[3]) +'$\pm$'+ str(phoenix_sigmas_one[3]),fontsize=12, bbox=props)        plt.plot(starspectrum.wavelength.value / (bosz_result.median['vrad_2'] / 3e5 + 1.0), starspectrum.flux.value,                 color='#000000', label='Data',linewidth=5.0)        plt.plot(bw1 / (bosz_result.median['vrad_2'] / 3e5 + 1.0), bf1, color='#33AFFF', label='BOSZ Model/Residuals',linewidth=5.0)        #plt.plot(pw2 / (phoenix_result.median['vrad_4'] / 3e5 + 1.0), pf2, color='#FEBE4E', label='PHOENIX Model/Residuals',linewidth=5.0)        plt.plot(bw1 / (bosz_result.median['vrad_2'] / 3e5 + 1.0), bosz_res1, color='#33AFFF',linewidth=5.0)        #plt.plot(pw2 / (phoenix_result.median['vrad_4'] / 3e5 + 1.0), phoenix_res2, color='#FEBE4E',linewidth=5.0)        plt.axhline(y=0.05, color='k', linestyle='--', label='$\pm$ 5%')        plt.axhline(y=-0.05, color='k', linestyle='--')        plt.xlim(21000,22900)        plt.ylim(-0.2,1.3)        plt.legend(loc='center left', fontsize=16)        plt.xlabel('Wavelength (Angstroms)')        plt.ylabel('Normalized Flux')        plt.title(result_title+' fits and residuals for '+name)        #plotlines.oplotlines(angstrom=True, arcturus=True, alpha=0.25, molecules=False, size=15)        plt.savefig('/u/rbentley/localcompute/fitting_plots/'+outputpath+'/'+name+'_'+result_title+'_spectrum.png')        #plt.show()        plt.clf()        plt.cla()        '''        ap_values['teff'] += [cal_star_info[8]]        ap_values['logg'] += [cal_star_info[10]]        ap_values['mh'] += [cal_star_info[11]]        ap_values['alpha'] += [0.0]    fig, ax = plt.subplots(nrows=len(bosz_offsets.keys())+2, ncols=1,figsize=(16, 16))    props = dict(boxstyle='round', facecolor='wheat', alpha=0.75)    x_axis_b = bosz_offsets['logg']    x_axis_p = ap_values['mh']    x_axis_b = np.array([float(i) for i in x_axis_b])    for i in range(len(ax)-2):        combined_offsets = bosz_offsets[bosz_offsets.keys()[i]]        combined_sigmas = bosz_sigmas[phoenix_offsets.keys()[i]]        b_stdev = np.std(combined_offsets)        b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in combined_sigmas])        b_offset_mean = np.average(combined_offsets, weights=b_sigmas_stdev ** -2)        #ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)        #ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        #ppopt2, ppcov2 = curve_fit(quad_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])        ax[i].errorbar(x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], yerr=bosz_sigmas[phoenix_offsets.keys()[i]], color='#3349FF',marker='.',label='Reference BOSZ grid',ls='none', markersize=24)        #bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        #bpopt2, bpcov2 = curve_fit(quad_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])        ax[i].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Reference mean offset')        ax[i].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                      color='#3349FF', alpha=0.2)        xmin, xmax = ax[i].get_xlim()        ymin, ymax = ax[i].get_ylim()        bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[phoenix_offsets.keys()[i]])        bpopt_c, bpcov_c = curve_fit(constant_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[phoenix_offsets.keys()[i]])        fit_res_b = np.array(bosz_offsets[bosz_offsets.keys()[i]] - linear_fit(x_axis_b, bpopt[0], bpopt[1]))        chi2_b_fit = np.sum((fit_res_b)**2 / np.array(bosz_sigmas[phoenix_offsets.keys()[i]])**2)        chi2_b_fit_red = chi2_b_fit/(len(fit_res_b) - len(bpopt))        fit_res_b_c = np.array(bosz_offsets[bosz_offsets.keys()[i]] - constant_fit(x_axis_b, bpopt_c[0]))        chi2_b_fit_c = np.sum((fit_res_b_c)**2 / np.array(bosz_sigmas[phoenix_offsets.keys()[i]])**2)        chi2_b_fit_c_red = chi2_b_fit_c/(len(fit_res_b_c) - len(bpopt_c))        f_b = (chi2_b_fit_c - chi2_b_fit)        f_b = f_b/(len(bpopt) - len(bpopt_c))        f_b = f_b*(len(fit_res_b)-len(bpopt))/chi2_b_fit        ax[i].text(0.45, 0.0, 'Stdev:' + str(np.round_(b_stdev,decimals=2))+'\nMean:' + str(np.round_(b_offset_mean,decimals=2))+'\nF-statistic: '+str(np.round_(f_b,decimals=2))+'\n5% crit val: '+str(np.round_(18.513,decimals=2)),fontsize=12, bbox=props)        #connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])        #connect_points(ax[i],x_axis_b,x_axis_n, bosz_offsets[phoenix_offsets.keys()[i]],offsets[offsets.keys()[i]])        ax[i].axhline(y=0., color='k', linestyle='--')    #ax[-1].plot(x_axis_n,[x[0] for x in chi2_vals],color='#5cd85e',marker='d',label=outputpath,ls='none', markersize=10)    #ax[-1].plot(x_axis_b,[x[1] for x in chi2_vals], color='#3349FF',marker='.',label='Unmasked BOSZ grid',ls='none', markersize=18)    #ax[-1].plot(x_axis_p,[x[2] for x in chi2_vals],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    ax[i].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Reference mean offset')    print combined_offsets    combined_sigmas = np.array(bosz_offsets['alpha']) - np.array(bosz_offsets['mh'])    b_stdev = np.std(combined_offsets)    b_sigmas_stdev = np.array([np.sqrt(float(x) ** 2 + b_stdev ** 2) for x in combined_sigmas])    b_offset_mean = np.average(combined_offsets, weights=b_sigmas_stdev ** -2)    # ax[i].errorbar(x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], yerr=phoenix_sigmas[phoenix_offsets.keys()[i]],color='#FF0000',marker='s',label='Unmasked PHOENIX grid',ls='none', markersize=10)    # ppopt, ppcov = curve_fit(linear_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])    # ppopt2, ppcov2 = curve_fit(quad_fit, x_axis_p, phoenix_offsets[phoenix_offsets.keys()[i]], sigma = phoenix_sigmas[phoenix_offsets.keys()[i]])    ax[-2].errorbar(x_axis_b, np.array(bosz_offsets['alpha'])-np.array(bosz_offsets['mh']), yerr=np.array(bosz_sigmas['alpha'])**2 + np.array(bosz_sigmas['mh'])**2,                   color='#3349FF', marker='.', label='Reference BOSZ grid', ls='none', markersize=24)    # bpopt, bpcov = curve_fit(linear_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])    # bpopt2, bpcov2 = curve_fit(quad_fit, x_axis_b, bosz_offsets[bosz_offsets.keys()[i]], sigma = bosz_sigmas[bosz_offsets.keys()[i]])    ax[-2].axhline(y=b_offset_mean, color='#3349FF', linestyle='--', label='Reference mean offset')    ax[-2].axhspan(b_offset_mean - b_stdev, b_offset_mean + b_stdev,                  color='#3349FF', alpha=0.2)    xmin, xmax = ax[-2].get_xlim()    ymin, ymax = ax[-2].get_ylim()    ax[-2].text(0.45, 0.0,               'Stdev:' + str(np.round_(b_stdev, decimals=2)) + '\nMean:' + str(np.round_(b_offset_mean, decimals=2)),               fontsize=12, bbox=props)    # connect_points(ax[i],x_axis_b,x_axis_p, bosz_offsets[phoenix_offsets.keys()[i]],phoenix_offsets[phoenix_offsets.keys()[i]])    # connect_points(ax[i],x_axis_b,x_axis_n, bosz_offsets[phoenix_offsets.keys()[i]],offsets[offsets.keys()[i]])    ax[-2].axhline(y=0., color='k', linestyle='--')    #ax[-1].plot(x_axis_p, [x[0] for x in chi2_vals],color='#3349FF',marker='.',ls='none', markersize=18)    ax[-1].plot(x_axis_b, [x[1] for x in chi2_vals], color='#3349FF',marker='.',ls='none', markersize=24)    ax[-1].plot(x_axis_b, [x[2] for x in chi2_vals], color='r',marker='.',label='BOSZ grid at SPEX values',ls='none', markersize=18)    #ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[len(ax)-1].set_xlabel('log g offset', fontsize=16)    ax[0].set_ylabel('log g offset', fontsize=16)    #ax[0].set_ylim(-1.4,1.4)    ax[1].set_ylabel(r'[$\alpha$/Fe]'+' (no reference\n values at the moment)', fontsize=16)    #ax[1].set_ylim(-0.5,0.5)    ax[2].set_ylabel('$T_{eff}$ offset', fontsize=16)    #ax[2].set_ylim(-400,400)    ax[3].set_ylabel('[M/H] offset', fontsize=16)    #ax[3].set_ylim(-0.5,0.5)    ax[4].set_ylabel(r'[$\alpha$/H]'+' (no reference\n values at the moment)', fontsize=16)    #ax[4].set_ylim(-0.7,0.7)    ax[-1].set_ylabel('Reduced $\chi^2$', fontsize=16)    ax[0].legend(fontsize=10)    ax[-1].legend(fontsize=10)    ax[0].set_title('StarKit-APOGEE fit offsets for SPEX stars')    #plt.show()    plt.savefig('/u/rbentley/localcompute/fitting_plots/' + outputpath + '/' + outputpath + '_offsets.png')